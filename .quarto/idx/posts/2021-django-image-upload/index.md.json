{"title":"How to Upload Multiple Geotagged Images in Django","markdown":{"yaml":{"title":"How to Upload Multiple Geotagged Images in Django","date":"16-03-2021","slug":"django-image-upload","categories":["Django"],"tags":[],"subtitle":"","description":"we look into how to upload multiple geo-tagged/non-geotagged images to aws s3 using plain Django and postgresql as databbase."},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\n\n\nIn this post, we look into how to upload multiple geo-tagged/non-geotagged images to aws s3 using plain Django and spatialite as databbase. We use GeoDjango to store the latitude, longitude extracted from geo-tagged images into the database.\n\n\n\n<br>\n<hr>\n\n### Project setup\n\ncreate django project \n```bash\ndjango-admin startproject login_boiler_plate\ncreate app python manage.py startapp GisMap\ncreate superuser python manage.py createsuperuser\n```\n\nIn `settings.py` add the app to `installed_app` list and setup the default location for media storage.\n```python\nINSTALLED_APPS = [\n\t...\n\t'GisMap',\n]\n\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media') \nMEDIA_URL = '/media/'\n```\n\n\n### **Setup the database backend to postgis extenstion of postgresql.**\n\n```python\n# in settings.py file\nDATABASES = {\n\t'default': {\n\t\t 'ENGINE': 'django.contrib.gis.db.backends.postgis', #imp\n\t\t 'NAME': 'database_name_here',\n\t\t 'USER': 'postgres',\n\t\t'PASSWORD': 'password_here',\n\t\t'HOST': 'localhost',\n\t\t'PORT': '5432',\n\t},\n}\n```\n\nIn `models.py`, create model for uploading images. `DateTimeField` and `user` are not necessary.\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass ImageUpload(models.Model):\n\tuser = models.ForeignKey(User, null=True, on_delete=models.CASCADE)\n\timage = models.ImageField( null=False, blank=False, upload_to = 'images/')\n\tdate_created = models.DateTimeField(auto_now_add=True, null=True)\n\n\tdef __str__(self):\n\t\treturn self.user.username + \" uploaded: \"+ self.image.name\n```\n\nIn `forms.py`, refer to the ImageUpload model for input.\n```python\n  \nfrom django.forms import ModelForm\nfrom django.contrib.auth.models import User\nfrom .models import ImageUpload\n\nclass ImageForm(ModelForm):\n\tclass Meta:\n\t\tmodel = ImageUpload\n\t\tfields = ('image',)\n\n```\n\n\n\nIn `home.html`, create the form to accept image upload. \n```html\n                  <!-- Modal -->\n                  <form method = \"post\" enctype=\"multipart/form-data\">\n                  <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\" >\n                    {% csrf_token %}\n                    <div class=\"modal-dialog\" role=\"document\">\n                      <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                          <h5 class=\"modal-title\" id=\"exampleModalLabel\">Upload Image</h5>\n                          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                          </button>\n                        </div>\n                        <div class=\"modal-body\">\n                          {{ image_form.image }}\n                        </div>\n                        <div class=\"modal-footer\">\n                          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                          <button type=\"submit\" class=\"btn btn-primary\">Save Image</button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  </form>\n\n```\n\nIn `views.py`, accept the HTTP POST request and save to the database. We will alter this to extract latitude, longitude later. \n\n\n```python\n@login_required(login_url='login')\ndef home_page(request):\n\n\tif request.method == 'POST':\n\t\tform = ImageForm(request.POST , request.FILES)\n\t\tprint(form)\n\t\tif form.is_valid():\n\t\t\tprint(\"is valid\")\n\t\t\tobj = form.save(commit=False)\n\t\t\tobj.user = request.user\n\t\t\tobj.save()\n\t\treturn redirect('home')\n\telse:\n\t\tImageform = ImageForm()\n\t\treturn render(request, \"GisMap/home.html\", {'Title': \"Home Page\", \"image_form\": ImageForm})\n\n```\n\n\n\n###  Get Lat, lon from image meta deta (Exchangeable image file format [EXIF] )\n\n1. Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional. These include- GDAL, PROJ, GEOS, PostGIS. These can be downloaded from osgeo4W which bundles all these libraries. Then application can be added to apps in settings with `django.contrib.gis` to the installed apps.\n\n\n\nBy default geodjango is not installed in the apps list and thus we do it ourself.\n \n```\npip install django-geo\n```\n\nNOTE- ensure os4geo is installed: install from [here](https://qgis.org/en/site/forusers/download.html) if not done.  And make the following changes in `settings.py`. \n\n\nAn additional setting is required, which is to locate osgeo4w directory in django. If you install osgeo4w in default directory, you need to put the following code within the settings.py file. \n\n```python\nINSTALLED_APPS = [\n...\n\t'django.contrib.gis',\n]\n\n\n\nimport os\nimport posixpath\nif os.name == 'nt':\n\timport platform\n\tOSGEO4W = r\"C:\\OSGeo4W\"\n\tif '64' in platform.architecture()[0]:\n\t\tOSGEO4W += \"64\"\n\tassert os.path.isdir(OSGEO4W), \"Directory does not exist: \" + OSGEO4W\n\tos.environ['OSGEO4W_ROOT'] = OSGEO4W\n\tos.environ['GDAL_DATA'] = OSGEO4W + r\"\\share\\gdal\"\n\tos.environ['PROJ_LIB'] = OSGEO4W + r\"\\share\\proj\"\n\tos.environ['PATH'] = OSGEO4W + r\"\\bin;\" + os.environ['PATH']\n\n```\n\n\n\n\n\n\nIn `models.py`, add a PointField which can store geospatial information (lat,lon)\n```python\nfrom django.contrib.gis.db import models\nclass ImageUpload():\n  ...  \n  geom = models.PointField( null=True)\n```\n\nIn `views.py`, define functions to extract meta data from image and convert into right format for GeoDjango to understand it. Courtesy of [Jayson DeLancey](https://developer.here.com/blog/getting-started-with-geocoding-exif-image-metadata-in-python3)\n\n```python\n\n#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#\n\n\n\nfrom PIL import Image\nfrom urllib.request import urlopen\nfrom PIL.ExifTags import GPSTAGS\nfrom PIL.ExifTags import TAGS\n\ndef get_decimal_from_dms(dms, ref):\n\n\tdegrees = dms[0]\n\tminutes = dms[1] / 60.0\n\tseconds = dms[2] / 3600.0\n\n\tif ref in ['S', 'W']:\n\t\tdegrees = -degrees\n\t\tminutes = -minutes\n\t\tseconds = -seconds\n\n\treturn round(degrees + minutes + seconds, 5)\n\ndef get_coordinates(geotags):\n\tlat = get_decimal_from_dms(geotags['GPSLatitude'], geotags['GPSLatitudeRef'])\n\n\tlon = get_decimal_from_dms(geotags['GPSLongitude'], geotags['GPSLongitudeRef'])\n\n\treturn (lon, lat)\n\n\n\ndef get_geotagging(exif):\n\tif not exif:\n\t\traise ValueError(\"No EXIF metadata found\")\n\n\tgeotagging = {}\n\tfor (idx, tag) in TAGS.items():\n\t\tif tag == 'GPSInfo':\n\t\t\tif idx not in exif:\n\t\t\t\traise ValueError(\"No EXIF geotagging found\")\n\n\t\t\tfor (key, val) in GPSTAGS.items():\n\t\t\t\tif key in exif[idx]:\n\t\t\t\t\tgeotagging[val] = exif[idx][key]\n\n\treturn geotagging\n\n#_______________________________________________________________________________________________________________________________________#\n\n\n```\n\nIn `views.py`, update home_page function to extract meta data and save the image to database.\n```python\nfrom django.contrib.gis.geos import Point\n\n@login_required(login_url='login')\ndef home_page(request):\n    if request.method == \"POST\":\n        form = ImageForm(request.POST, request.FILES)\n        img = Image.open(request.FILES.get(\"image\"))\n        if form.is_valid():\n            try:\n                obj = form.save(commit=False)\n                obj.user = request.user\n                obj.image_url = obj.image.url\n                geotags = get_geotagging(img._getexif())\n                obj.geom = Point(\n                    get_coordinates(geotags)\n                )  # X is longitude, Y is latitude, Point(X,Y)\n                obj.save()\n                messages.success(request, f\"image uploaded succesfully\")\n            except ValueError as e:\n                messages.warning(request, e)\n        else:\n            messages.warning(request, f\"Invalid image type\")\n        return redirect(\"home\")\n    else:\n        Imageform = ImageForm()\n        return render(\n            request, \"GisMap/home.html\", {\"Title\": \"Home Page\", \"image_form\": ImageForm}\n        )\n```\n\n## Upload to S3 bucket\n\n\nInstall boto3 package and django-storages. Add to installed packages. Additionally, provide Key:Value AWS credentials to access the bucket and change the default file storage to S3.\n```bash\npip install django-storages\npip install boto3\n```\n\n\nin `settings.py`\n```python\nINSTALLED_APPS = [\n\t...\n\t'storages',\n]\n\nAWS_ACCESS_KEY_ID = \"\"\nAWS_SECRET_ACCESS_KEY = \"\"\nAWS_STORAGE_BUCKET_NAME = \"\"\n\nAWS_S3_FILE_OVERWRITE = False\nAWS_DEFAULT_ACL = None\n\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n\nAWS_QUERYSTRING_AUTH = False // removes the query string\n```\n\n**NOTE: Make the bucket public to be able to make HTTP request**\n\nProvide policy to make our s3 bucket public. By default, the bucket is private and no read/wrtie access is provided for user from outside the s3 page. There are other ways to access private bucket by either Limiting access to specific IP addresses or Restricting access to a specific HTTP referer. For simplicity we make the bucket public. \n```json\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[\n    {\n      \"Sid\":\"PublicRead\",\n      \"Effect\":\"Allow\",\n      \"Principal\": \"*\",\n      \"Action\":[\"s3:GetObject\",\"s3:GetObjectVersion\"],\n      \"Resource\":[\"arn:aws:s3:::DOC-EXAMPLE-BUCKET/*\"]\n    }\n  ]\n}\n```\n\n\n\n## Accept non-geotagged images\n\nAt this point, we should be able to upload geotagged images to s3 bucket. Non-geotagged images are not yet accepted by the model and thus we create seperate model for it.\n\n[Additional resource](https://stackoverflow.com/questions/34006994/how-to-upload-multiple-images-to-a-blog-post-in-django)\n\nWe now make separate model for accepting non-geotagged images similar to `ImageUpload` model but without `PointField`.\n```python\nclass Photos(models.Model):\n\n\tuser = models.ForeignKey(User, null=True, on_delete=models.CASCADE)\n\timage = models.ImageField(upload_to='photos/',null=True,blank=False)\n\tdate_created = models.DateTimeField(auto_now_add=True, null=True)\n\timage_url = models.URLField(max_length=250, null=True, blank=False)\n\n\tclass Meta:\n\t\tverbose_name = 'Photo'\n\t\tverbose_name_plural = 'Photos'\n\n\tdef __str__(self):\n\t\treturn self.user.username + \" uploaded image \"+ self.image.name\n```\n\n\nIn `views.py` file, extend the home_page function to add a fallback for non-geotagged images. \n\n```python\nif request.method == \"POST\":\n\n    # images will be in request.FILES\n    post_request, files_request = request.POST, request.FILES\n\n    form = PhotoForm(post_request or None, files_request or None)\n    files = request.FILES.getlist(\n        \"images\"\n    )  # returns files: [<InMemoryUploadedFile: Image_name.jpg (image/jpeg)>, <InMemoryUploadedFile: Image_name.jpg (image/jpeg)>]\n    if form.is_valid():\n        user = request.user\n        for f in files:\n\n            # returns <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=480x360 at 0x1ED0CCC6280>\n            img = Image.open(f)  \n            \n            try:\n                geotags = get_geotagging(img._getexif())\n                geoimage = ImageUpload(user=user, image=f)\n                geoimageimg_upload.image_url = geoimage.image.url\n                # X is longitude, Y is latitude, Point(X,Y) ; returns eg SRID=4326;POINT (11.88454 43.46708)\n                geoimage.geom = Point(get_coordinates(geotags))\n                geoimage.save()\n            except:\n                nongeoimage = Photos(user=user, image=f)\n                nongeoimage.image_url = nongeoimage.image.url\n                nongeoimage.save()\n    else:\n        print(\"Form invalid\")\n    return redirect(\"home\")\nelse:\n    Imageform = PhotoForm()\n    return render(\n        request, \"GisMap/home.html\", {\"Title\": \"Home Page\", \"image_form\": ImageForm}\n    )\n```\n\n## Accept multiple images\n\nMake a new form which accepts multiple image files to be uploaded at once.\n```python\nclass PhotoForm(forms.ModelForm):\n\timages = forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}))\n\n\tclass Meta:\n\t\tmodel = Photos\n\t\tfields = ('images',)\n```\n\n\nIn `home.html`, add `multiple` attribute to allow for multiple selection of images at once.\n```html\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"note-image\"></label>\n\t\t\t\t<input type=\"file\" name=\"images\" class=\"form-control-file\" id=\"note-image\" multiple>\n\t\t\t\t</div>\n```\n\n## Final Note:\nAt this point, you should be able to upload multiple Images to the AWS S3 bucket and have coordinates extracted the geo-tagged images and segregate non-geotagged images. \n\nYou learnt-\n\n- How to Setup GeoDjango\n- How to Setup AWS S3 bucket\n- How to Extract meta data from Image and store in database using PointField\n\n> These steps will ensure you have multiple images uploaded at once and all the geolocation information can be stored in database, which later can be import to QGIS for data visualisation. Although both postgresql and django admin allows users to visualise the data.\n","srcMarkdownNoYaml":"\n\n## Overview\n\n\n\nIn this post, we look into how to upload multiple geo-tagged/non-geotagged images to aws s3 using plain Django and spatialite as databbase. We use GeoDjango to store the latitude, longitude extracted from geo-tagged images into the database.\n\n\n\n<br>\n<hr>\n\n### Project setup\n\ncreate django project \n```bash\ndjango-admin startproject login_boiler_plate\ncreate app python manage.py startapp GisMap\ncreate superuser python manage.py createsuperuser\n```\n\nIn `settings.py` add the app to `installed_app` list and setup the default location for media storage.\n```python\nINSTALLED_APPS = [\n\t...\n\t'GisMap',\n]\n\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media') \nMEDIA_URL = '/media/'\n```\n\n\n### **Setup the database backend to postgis extenstion of postgresql.**\n\n```python\n# in settings.py file\nDATABASES = {\n\t'default': {\n\t\t 'ENGINE': 'django.contrib.gis.db.backends.postgis', #imp\n\t\t 'NAME': 'database_name_here',\n\t\t 'USER': 'postgres',\n\t\t'PASSWORD': 'password_here',\n\t\t'HOST': 'localhost',\n\t\t'PORT': '5432',\n\t},\n}\n```\n\nIn `models.py`, create model for uploading images. `DateTimeField` and `user` are not necessary.\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass ImageUpload(models.Model):\n\tuser = models.ForeignKey(User, null=True, on_delete=models.CASCADE)\n\timage = models.ImageField( null=False, blank=False, upload_to = 'images/')\n\tdate_created = models.DateTimeField(auto_now_add=True, null=True)\n\n\tdef __str__(self):\n\t\treturn self.user.username + \" uploaded: \"+ self.image.name\n```\n\nIn `forms.py`, refer to the ImageUpload model for input.\n```python\n  \nfrom django.forms import ModelForm\nfrom django.contrib.auth.models import User\nfrom .models import ImageUpload\n\nclass ImageForm(ModelForm):\n\tclass Meta:\n\t\tmodel = ImageUpload\n\t\tfields = ('image',)\n\n```\n\n\n\nIn `home.html`, create the form to accept image upload. \n```html\n                  <!-- Modal -->\n                  <form method = \"post\" enctype=\"multipart/form-data\">\n                  <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\" >\n                    {% csrf_token %}\n                    <div class=\"modal-dialog\" role=\"document\">\n                      <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                          <h5 class=\"modal-title\" id=\"exampleModalLabel\">Upload Image</h5>\n                          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                          </button>\n                        </div>\n                        <div class=\"modal-body\">\n                          {{ image_form.image }}\n                        </div>\n                        <div class=\"modal-footer\">\n                          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                          <button type=\"submit\" class=\"btn btn-primary\">Save Image</button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  </form>\n\n```\n\nIn `views.py`, accept the HTTP POST request and save to the database. We will alter this to extract latitude, longitude later. \n\n\n```python\n@login_required(login_url='login')\ndef home_page(request):\n\n\tif request.method == 'POST':\n\t\tform = ImageForm(request.POST , request.FILES)\n\t\tprint(form)\n\t\tif form.is_valid():\n\t\t\tprint(\"is valid\")\n\t\t\tobj = form.save(commit=False)\n\t\t\tobj.user = request.user\n\t\t\tobj.save()\n\t\treturn redirect('home')\n\telse:\n\t\tImageform = ImageForm()\n\t\treturn render(request, \"GisMap/home.html\", {'Title': \"Home Page\", \"image_form\": ImageForm})\n\n```\n\n\n\n###  Get Lat, lon from image meta deta (Exchangeable image file format [EXIF] )\n\n1. Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional. These include- GDAL, PROJ, GEOS, PostGIS. These can be downloaded from osgeo4W which bundles all these libraries. Then application can be added to apps in settings with `django.contrib.gis` to the installed apps.\n\n\n\nBy default geodjango is not installed in the apps list and thus we do it ourself.\n \n```\npip install django-geo\n```\n\nNOTE- ensure os4geo is installed: install from [here](https://qgis.org/en/site/forusers/download.html) if not done.  And make the following changes in `settings.py`. \n\n\nAn additional setting is required, which is to locate osgeo4w directory in django. If you install osgeo4w in default directory, you need to put the following code within the settings.py file. \n\n```python\nINSTALLED_APPS = [\n...\n\t'django.contrib.gis',\n]\n\n\n\nimport os\nimport posixpath\nif os.name == 'nt':\n\timport platform\n\tOSGEO4W = r\"C:\\OSGeo4W\"\n\tif '64' in platform.architecture()[0]:\n\t\tOSGEO4W += \"64\"\n\tassert os.path.isdir(OSGEO4W), \"Directory does not exist: \" + OSGEO4W\n\tos.environ['OSGEO4W_ROOT'] = OSGEO4W\n\tos.environ['GDAL_DATA'] = OSGEO4W + r\"\\share\\gdal\"\n\tos.environ['PROJ_LIB'] = OSGEO4W + r\"\\share\\proj\"\n\tos.environ['PATH'] = OSGEO4W + r\"\\bin;\" + os.environ['PATH']\n\n```\n\n\n\n\n\n\nIn `models.py`, add a PointField which can store geospatial information (lat,lon)\n```python\nfrom django.contrib.gis.db import models\nclass ImageUpload():\n  ...  \n  geom = models.PointField( null=True)\n```\n\nIn `views.py`, define functions to extract meta data from image and convert into right format for GeoDjango to understand it. Courtesy of [Jayson DeLancey](https://developer.here.com/blog/getting-started-with-geocoding-exif-image-metadata-in-python3)\n\n```python\n\n#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#\n\n\n\nfrom PIL import Image\nfrom urllib.request import urlopen\nfrom PIL.ExifTags import GPSTAGS\nfrom PIL.ExifTags import TAGS\n\ndef get_decimal_from_dms(dms, ref):\n\n\tdegrees = dms[0]\n\tminutes = dms[1] / 60.0\n\tseconds = dms[2] / 3600.0\n\n\tif ref in ['S', 'W']:\n\t\tdegrees = -degrees\n\t\tminutes = -minutes\n\t\tseconds = -seconds\n\n\treturn round(degrees + minutes + seconds, 5)\n\ndef get_coordinates(geotags):\n\tlat = get_decimal_from_dms(geotags['GPSLatitude'], geotags['GPSLatitudeRef'])\n\n\tlon = get_decimal_from_dms(geotags['GPSLongitude'], geotags['GPSLongitudeRef'])\n\n\treturn (lon, lat)\n\n\n\ndef get_geotagging(exif):\n\tif not exif:\n\t\traise ValueError(\"No EXIF metadata found\")\n\n\tgeotagging = {}\n\tfor (idx, tag) in TAGS.items():\n\t\tif tag == 'GPSInfo':\n\t\t\tif idx not in exif:\n\t\t\t\traise ValueError(\"No EXIF geotagging found\")\n\n\t\t\tfor (key, val) in GPSTAGS.items():\n\t\t\t\tif key in exif[idx]:\n\t\t\t\t\tgeotagging[val] = exif[idx][key]\n\n\treturn geotagging\n\n#_______________________________________________________________________________________________________________________________________#\n\n\n```\n\nIn `views.py`, update home_page function to extract meta data and save the image to database.\n```python\nfrom django.contrib.gis.geos import Point\n\n@login_required(login_url='login')\ndef home_page(request):\n    if request.method == \"POST\":\n        form = ImageForm(request.POST, request.FILES)\n        img = Image.open(request.FILES.get(\"image\"))\n        if form.is_valid():\n            try:\n                obj = form.save(commit=False)\n                obj.user = request.user\n                obj.image_url = obj.image.url\n                geotags = get_geotagging(img._getexif())\n                obj.geom = Point(\n                    get_coordinates(geotags)\n                )  # X is longitude, Y is latitude, Point(X,Y)\n                obj.save()\n                messages.success(request, f\"image uploaded succesfully\")\n            except ValueError as e:\n                messages.warning(request, e)\n        else:\n            messages.warning(request, f\"Invalid image type\")\n        return redirect(\"home\")\n    else:\n        Imageform = ImageForm()\n        return render(\n            request, \"GisMap/home.html\", {\"Title\": \"Home Page\", \"image_form\": ImageForm}\n        )\n```\n\n## Upload to S3 bucket\n\n\nInstall boto3 package and django-storages. Add to installed packages. Additionally, provide Key:Value AWS credentials to access the bucket and change the default file storage to S3.\n```bash\npip install django-storages\npip install boto3\n```\n\n\nin `settings.py`\n```python\nINSTALLED_APPS = [\n\t...\n\t'storages',\n]\n\nAWS_ACCESS_KEY_ID = \"\"\nAWS_SECRET_ACCESS_KEY = \"\"\nAWS_STORAGE_BUCKET_NAME = \"\"\n\nAWS_S3_FILE_OVERWRITE = False\nAWS_DEFAULT_ACL = None\n\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n\nAWS_QUERYSTRING_AUTH = False // removes the query string\n```\n\n**NOTE: Make the bucket public to be able to make HTTP request**\n\nProvide policy to make our s3 bucket public. By default, the bucket is private and no read/wrtie access is provided for user from outside the s3 page. There are other ways to access private bucket by either Limiting access to specific IP addresses or Restricting access to a specific HTTP referer. For simplicity we make the bucket public. \n```json\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[\n    {\n      \"Sid\":\"PublicRead\",\n      \"Effect\":\"Allow\",\n      \"Principal\": \"*\",\n      \"Action\":[\"s3:GetObject\",\"s3:GetObjectVersion\"],\n      \"Resource\":[\"arn:aws:s3:::DOC-EXAMPLE-BUCKET/*\"]\n    }\n  ]\n}\n```\n\n\n\n## Accept non-geotagged images\n\nAt this point, we should be able to upload geotagged images to s3 bucket. Non-geotagged images are not yet accepted by the model and thus we create seperate model for it.\n\n[Additional resource](https://stackoverflow.com/questions/34006994/how-to-upload-multiple-images-to-a-blog-post-in-django)\n\nWe now make separate model for accepting non-geotagged images similar to `ImageUpload` model but without `PointField`.\n```python\nclass Photos(models.Model):\n\n\tuser = models.ForeignKey(User, null=True, on_delete=models.CASCADE)\n\timage = models.ImageField(upload_to='photos/',null=True,blank=False)\n\tdate_created = models.DateTimeField(auto_now_add=True, null=True)\n\timage_url = models.URLField(max_length=250, null=True, blank=False)\n\n\tclass Meta:\n\t\tverbose_name = 'Photo'\n\t\tverbose_name_plural = 'Photos'\n\n\tdef __str__(self):\n\t\treturn self.user.username + \" uploaded image \"+ self.image.name\n```\n\n\nIn `views.py` file, extend the home_page function to add a fallback for non-geotagged images. \n\n```python\nif request.method == \"POST\":\n\n    # images will be in request.FILES\n    post_request, files_request = request.POST, request.FILES\n\n    form = PhotoForm(post_request or None, files_request or None)\n    files = request.FILES.getlist(\n        \"images\"\n    )  # returns files: [<InMemoryUploadedFile: Image_name.jpg (image/jpeg)>, <InMemoryUploadedFile: Image_name.jpg (image/jpeg)>]\n    if form.is_valid():\n        user = request.user\n        for f in files:\n\n            # returns <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=480x360 at 0x1ED0CCC6280>\n            img = Image.open(f)  \n            \n            try:\n                geotags = get_geotagging(img._getexif())\n                geoimage = ImageUpload(user=user, image=f)\n                geoimageimg_upload.image_url = geoimage.image.url\n                # X is longitude, Y is latitude, Point(X,Y) ; returns eg SRID=4326;POINT (11.88454 43.46708)\n                geoimage.geom = Point(get_coordinates(geotags))\n                geoimage.save()\n            except:\n                nongeoimage = Photos(user=user, image=f)\n                nongeoimage.image_url = nongeoimage.image.url\n                nongeoimage.save()\n    else:\n        print(\"Form invalid\")\n    return redirect(\"home\")\nelse:\n    Imageform = PhotoForm()\n    return render(\n        request, \"GisMap/home.html\", {\"Title\": \"Home Page\", \"image_form\": ImageForm}\n    )\n```\n\n## Accept multiple images\n\nMake a new form which accepts multiple image files to be uploaded at once.\n```python\nclass PhotoForm(forms.ModelForm):\n\timages = forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}))\n\n\tclass Meta:\n\t\tmodel = Photos\n\t\tfields = ('images',)\n```\n\n\nIn `home.html`, add `multiple` attribute to allow for multiple selection of images at once.\n```html\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"note-image\"></label>\n\t\t\t\t<input type=\"file\" name=\"images\" class=\"form-control-file\" id=\"note-image\" multiple>\n\t\t\t\t</div>\n```\n\n## Final Note:\nAt this point, you should be able to upload multiple Images to the AWS S3 bucket and have coordinates extracted the geo-tagged images and segregate non-geotagged images. \n\nYou learnt-\n\n- How to Setup GeoDjango\n- How to Setup AWS S3 bucket\n- How to Extract meta data from Image and store in database using PointField\n\n> These steps will ensure you have multiple images uploaded at once and all the geolocation information can be stored in database, which later can be import to QGIS for data visualisation. Although both postgresql and django admin allows users to visualise the data.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en-GB","fig-responsive":true,"quarto-version":"1.3.450","theme":["sandstone","../../_variables.scss"],"page-layout":"article","fontsize":"1.1em","linestretch":1.7,"fontcolor":"black","author":[{"id":"cvc","number":1,"name":{"given":"Aman","family":"Bagrecha","literal":"Aman Bagrecha","non-dropping-particle":"von"},"orcid":"0000-0003-3131-0864","email":"jainaman588@gmail.com"}],"mermaid":{"theme":"neutral"},"title":"How to Upload Multiple Geotagged Images in Django","date":"16-03-2021","slug":"django-image-upload","categories":["Django"],"tags":[],"subtitle":"","description":"we look into how to upload multiple geo-tagged/non-geotagged images to aws s3 using plain Django and postgresql as databbase."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}