{"title":"Full Fledged CRUD application using DRF and Token Authentication","markdown":{"yaml":{"title":"Full Fledged CRUD application using DRF and Token Authentication","date":"25-02-2021","slug":"crud-in-django-rest-framework","categories":["Django"],"tags":["Django"],"subtitle":"","description":"How to perform Create, Read, Update and Delete operations in Django Rest Framework","featured":"no"},"headingText":"What will you learn","containsRefs":false,"markdown":"\n\n\n<hr style=\"border:1px solid lightgray\"> </hr>\n\n<br>\n\n\n<span style=\"color: grey;font-size: 18px;\">Too Long; Didn't Read </span>\n\nMarkdown | Less \n--- | --- \n**DRF** | Create API end points for CRUD\n**Token Authentication** |  Add security and authorised access\n**Fetch API calls** | Consume API from front-end\n**Password Reset** | Send email to reset your forgotton password\n\n---\n\n## 1. Step one : Basic Django Project setup\n\nCreate virtual environment\n\n```\nconda create --name djangoEnv\n```\n\nActivate the environment\n\n```\nconda activate djangoEnv\n```\nInstall the dependencies\n\n```\nconda install django\n```\nNow, in your command line\n\ncreate project `django-admin startproject tutorial`\n\ncreate app `python manage.py startapp Accountsapp`\n\ncreate superuser `python manage.py createsuperuser`\n\nNow that we have the project and app installed your structure should look like this (insert picture here)\n\nRegister the app in  file as follows\n\nIn `settings.py`\n```python\nInstalled_apps = [ \n    'Accountsapp.apps.AccountsappConfig',\n    ...\n]\n```\n\nWe now create our own custom model named ***MyAccounts***\n\nIn `models.py`\n\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager\n\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom rest_framework.authtoken.models import Token\n\n\nclass MyAccountManager(BaseUserManager):\n\tdef create_user(self, email, username, password=None):\n\t\tif not email:\n\t\t\traise ValueError('Users must have an email address')\n\t\tif not username:\n\t\t\traise ValueError('Users must have a username')\n\n\n\t\tuser = self.model(\n\t\t\temail=self.normalize_email(email),\n\t\t\tusername=username,\n\t\t)\n\n\t\tuser.set_password(password)\n\t\tuser.save(using=self._db)\n\t\treturn user\n\n\tdef create_superuser(self, email, username, password):\n\t\tuser = self.create_user(\n\t\t\temail=self.normalize_email(email),\n\t\t\tpassword=password,\n\t\t\tusername=username,\n\t\t\t\n\t\t)\n\t\tuser.is_admin = True\n\t\tuser.is_staff = True\n\t\tuser.is_superuser = True\n\t\tuser.save(using=self._db)\n\t\treturn user\n\n# creating custom model of \"User\" base model. \nclass MyAccount(AbstractBaseUser):\n\temail \t\t\t\t\t= models.EmailField(verbose_name=\"email\", max_length=60, unique=True)\n\tusername \t\t\t\t= models.CharField(max_length=30, unique=True)\n\tdate_joined\t\t\t\t= models.DateTimeField(verbose_name='date joined', auto_now_add=True)\n\tlast_login\t\t\t\t= models.DateTimeField(verbose_name='last login', auto_now=True)\n\tis_admin\t\t\t\t= models.BooleanField(default=False)\n\tis_active\t\t\t\t= models.BooleanField(default=True)\n\tis_staff\t\t\t\t= models.BooleanField(default=False)\n\tis_superuser\t\t\t= models.BooleanField(default=False)\n\n\n\tUSERNAME_FIELD = 'email'   # username_field is the one which should be unique and will be compared by django for not creating multiple users with same email.\n\n\tREQUIRED_FIELDS = ['username'] \n\n\tobjects = MyAccountManager()\n\n\tdef __str__(self):\n\t\treturn self.email\n\n\t# For checking permissions. to keep it simple all admin have ALL permissons\n\tdef has_perm(self, perm, obj=None):\n\t\treturn self.is_admin\n\n\t# Does this user have permission to view this app? (ALWAYS YES FOR SIMPLICITY)\n\tdef has_module_perms(self, app_label):\n\t\treturn True\n```\n\nTo tell django we are overwriting the default user model, we do the following\n\nIn `settings.py`\n```python\nAUTH_USER_MODEL = Accounts.MyAccounts\n```\n\nNow we makemigrates to register the model in our database\n\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\nAnd for the model to be visible in admin section we do the following\n\nIn `admin.py`\n```python\nfrom django.contrib import admin\nfrom .models import MyAccount\n\nadmin.site.register(MyAccount) # Register your models here.\n```\n\nFor now the our project is setup. We move to Django Rest Framework setup\n\n## 2. Setup Django Rest Framework with Authentication\n\nInstall dependeny\n``` \nconda install djangorestframework\n```\n\nLike any other app, django rest framework is also an app. so we add it to the list of installed apps. \nWe additionally add authtoken app for user authentication which we are shortly going to intergrate in our CRUD application\n\nIn `settings.py`\n\n```python\nINSTALLED_APPS = [\n    # my apps\n    'Accountsapp.apps.AccountsappConfig',\n    # restframework\n    'rest_framework',\n    'rest_framework.authtoken',\n    ...\n    \n]\n```\n\nWe are going to be using Token Authentication in this application. DRF documentation recommends it as the default. \nLet Us setup the Default authentication class before actually utilising it.\n\nIn `settings.py` \n```python\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        \n    ]\n}\n```\nThe last thing before we actually start writing code is to perform migration. The `rest_framework.authtoken` app provides Django database migrations.\n\nAs done previously on command line\n```\npython manage.py makemigrations\npython manage.py migrate\n```\nWe have completed the logistics for setting up DRF\n\n## 3. Building CRUD application \n\nWe would first create a folder called **api** inside our to seperate codebase for API and vanila CRUD\n\nInside API folder create four files,\n\n- `__init__.py`\n- `serializers.py`\n- `views.py`\n- `urls.py`\n\n\nIn `serializers.py`\n\n```python\nfrom rest_framework import serializers \nfrom Accountsapp.models import MyAccount # import our custom model\n\n\n# provide fields in meta, expression and in MyAccount. for admin page login and edit,  is_admin and is_staff should be true\nclass RegistrationSerializer(serializers.ModelSerializer):\n\n    # additional fields \n\tpassword2 = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n\tis_superuser =serializers.BooleanField(write_only=True)\n\t\n    class Meta:\n\t\tmodel = MyAccount\n        # mention the fields you want to display when request is sent. \n\t\tfields = ['id','email', 'username', 'password', 'password2',  'is_superuser']\n\t\textra_kwargs = {\n\t\t\t\t'password': {'write_only': True},  # tells django to not display the password for others to see\n\t\t}\t\n\n\n\tdef\tsave(self):\n\n\t\taccount = MyAccount(\n\t\t\t\t\temail=self.validated_data['email'],\n\t\t\t\t\tusername=self.validated_data['username'],\n\t\t\t\t\t# is_admin=self.validated_data['is_admin'],\n\t\t\t\t\tis_superuser= self.validated_data['is_superuser'],\n\t\t\t\t)\n\t\tpassword = self.validated_data['password']\n\t\tpassword2 = self.validated_data['password2']\n\t\tif password != password2:\n\t\t\traise serializers.ValidationError({'password': 'Passwords must match.'})\n\t\taccount.set_password(password)\n\t\taccount.save()\n\t\treturn account\n\n\nclass UpdateSerializer(serializers.ModelSerializer):\n\n\tclass Meta:\n\t\tmodel = MyAccount\n\t\t# mention the fields you want to display when request is sent. \n\t\tfields = ['id', 'username', 'email']\n\t\textra_kwargs = {\n\t\t\t\t'password': {'read_only': True},  #  password cannot be edited from here\n\t\t}\n\n\n```\n**Note** : Do not try to update the password from serializers. There is another technique which we will deal with in later section.\n\n> The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.\n\n\nIn `views.py`\n\n```python\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\nfrom django.contrib.auth import authenticate\nfrom rest_framework.authentication import TokenAuthentication\nfrom rest_framework.decorators import api_view, authentication_classes, permission_classes\n\nfrom . import serializers \nfrom Accountsapp.models import MyAccount\nfrom rest_framework.authtoken.models import Token\n\n# user views\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.parsers import JSONParser\nfrom django.core.exceptions import ObjectDoesNotExist\nimport json\n\n# login {built-in django}\nfrom django.contrib.auth import login \nfrom django.contrib.auth.decorators import login_required\n\n\n\n# get all users\n@api_view([\"GET\"])\n@csrf_exempt\n@permission_classes([IsAuthenticated,])\n@authentication_classes([TokenAuthentication])\ndef get_users(request):\n    try:\n        user_profile = MyAccount.objects.all() \n        serializer = serializers.RegistrationSerializer(user_profile, many=True)\n        return Response( {'USER_PROFILE':serializer.data}, status= status.HTTP_200_OK)\n    except ObjectDoesNotExist:\n        return JsonResponse({'Response': 'You do not have authorization to access this page'}, status=status.HTTP_401_UNAUTHORIZED)\n\n\n\n# get given user\n@api_view(['GET'])\n@csrf_exempt\n@permission_classes([IsAuthenticated,])\n@authentication_classes([TokenAuthentication])\ndef get_given_user(request, pk):\n    try:\n        user_profile = MyAccount.objects.get(pk=pk)\n    except ObjectDoesNotExist:\n        return JsonResponse({\"missing\": \"The requested object does not exist\"}, status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':  \n        serializer = serializers.RegistrationSerializer(user_profile)\n        token = Token.objects.get(user=user_profile).key\n        return JsonResponse({'given_user_profile': serializer.data, 'token':token})\n   \n\n\n# add user\n@csrf_exempt\n@api_view(['POST'])\ndef user_add_view(request):\n        serializer = serializers.RegistrationSerializer( data=request.data)\n        if serializer.is_valid():\n            account = serializer.save()\n            token, _ = Token.objects.get_or_create(user=account)\n            return Response(serializer.data, status=status.HTTP_201_CREATED,  headers={'Authorization': 'Token ' + token.key})\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n\n# update user\n@api_view([\"PUT\",'GET'])\n@csrf_exempt\n@permission_classes([IsAuthenticated,])\n@authentication_classes([TokenAuthentication])\ndef update_user(request, pk):\n\n    try:\n        user_profile = MyAccount.objects.get(id=pk)\n    except ObjectDoesNotExist:\n        return Response({'response': \"given object does not exist\"}, status=status.HTTP_404_NOT_FOUND)\n\n    user = request.user\n    try:\n        data =  {i:j for i,j in request.query_params.items()}\n        print(data)\n        serializer = serializers.UpdateSerializer(user_profile, data=data)\n        if serializer.is_valid():\n            user= serializer.save()\n            token, _ = Token.objects.get_or_create(user=user)\n            return Response({\"response\": \"success\", 'data' :serializer.data}, status=status.HTTP_201_CREATED,  headers={'Authorization': 'Token ' + token.key})\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    except ObjectDoesNotExist as e:\n        return JsonResponse({'error': str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)\n    except Exception:\n        return JsonResponse({'error': 'Something terrible went wrong'}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n\n# delete user\n@api_view([\"DELETE\",'GET']) \n@csrf_exempt\n@permission_classes([IsAuthenticated])\n@authentication_classes([TokenAuthentication])\ndef delete_user(request, pk):\n\n    try:\n        user_profile = MyAccount.objects.get(id=pk)\n    except ObjectDoesNotExist:\n        return JsonResponse({'response': \"given object does not exist\"}, safe=False, status=status.HTTP_404_NOT_FOUND)\n\n    user = request.user\n    if user_profile != user: \n        return JsonResponse({'response':\"You don't have permission to delete the record.\"}, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n\n    try:\n        user_profile.delete()  #retuns 1 or 0\n        return JsonResponse({'user_delete': \"record deleted\"}, safe=False, status=status.HTTP_200_OK)\n    except ObjectDoesNotExist as e:\n        return JsonResponse({'error': str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)\n    except Exception:\n        return JsonResponse({'error': 'Something terrible went wrong'}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n\n# login view and get token\n@api_view([\"POST\", ])\ndef drflogin(request):\n\n    email = request.data.get(\"email\")\n    username = request.data.get(\"username\")\n    password = request.data.get(\"password\")\n    account = MyAccount.objects.filter(email=email) | MyAccount.objects.filter(username=username)\n    if not account:\n        return Response({\"error\": \"Login failed\"}, status=status.HTTP_401_UNAUTHORIZED)\n    # authenticate(email=email, password=password)  # returns none if not authenticated\n    account = authenticate(email=account[0].email, password=password)\n    token, _ = Token.objects.get_or_create(user=account)\n    login(request,account)  \n    renderer= Response({\"response\" : \"Successfully authenticated\",  \"pk\": account.pk, \"username\": account.username, \"token\": token.key }, template_name= \"Accountsapp/loginuser.html\", headers={'Authorization': 'Token ' + token.key})\n    return renderer\n```\n\nSetup end points for our API\n\n\nIn `views.py`\n```python\n\nfrom django.urls import path, include\nfrom . import views as drf_views\n\n\napp_name = 'Accountsapp'\n\nurlpatterns = [\n\n    path('drf_users/', drf_views.get_users, name= 'drf_users'),\n    path('drf_user/<int:pk>/', drf_views.get_given_user, name= 'drf_get_user'),\n    path('drf_updateuser/<int:pk>/', drf_views.update_user, name= 'drf_updateusers'),\n    path('drf_deleteuser/<int:pk>/', drf_views.delete_user, name= 'drf_deleteuser'),\n    path('drf_adduser/', drf_views.user_add_view, name= 'drf_adduser'),\n    path('drf_login/', drf_views.drflogin, name='drf_login'),\n\n    \n]\n\n```\n\nWe first create users and then test  delete, update and show users functionality of our API. We will use Postman for timebeing. Later we will built the front-end to perform all these actions. \n\n## <span style= \"color:orange\"> POST </span> REQUEST: **ADD USER**\n\n```\nhttp://127.0.0.1:8000/drf_adduser/\n```\n\n\n![](https://i.imgur.com/Ea8W3Bj.png)\n\n\n## <span style= \"color:green\"> GET </span> REQUEST: **GET USERS**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_users/\n```\n\nUsing curl and passing authorization token\n```\ncurl --location --request GET 'http://127.0.0.1:8000/drf_users/' \\\n--header 'Authorization: Token 92cc8c32edb7bd111b89552a3031f918d2df5613'\n```\n\nUsing postman\n\n![](https://i.imgur.com/dPnv4J4.png)\n\n\n\n## <span style= \"color:RED\"> DEL </span> REQUEST: **DELETE USER**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_deleteuser/<int:pk>\n```\nUsing curl and passing authorization token\n```\ncurl --location --request DELETE 'http://127.0.0.1:8000/drf_deleteuser/21' \\\n--header 'Authorization: Token 1529e77c59999f819649828a5e9174ba44bd6bb4'\n```\nUsing postman\n\n![](https://i.imgur.com/6IFah1s.png)\n\n\n## <span style= \"color:dodgerblue\"> PUT </span> REQUEST: **UPDATE USER**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_updateuser/1/?username=updated_username_here&email=updated_email_here\n```\n\nUsing curl and passing authorization token\n```\ncurl --location --request PUT 'http://127.0.0.1:8000/drf_updateuser/8/?username=rcbfl&email=rcbfl@gmail.com' \\\n--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'\n```\nusing postman\n![](https://i.imgur.com/LhVZ34L.png)\n\n\n## <span style= \"color:green\"> GET </span> REQUEST: **GET USER**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_user/<int:pk>\n```\n\nUsing curl and passing authorization token\n```\ncurl --location --request GET 'http://127.0.0.1:8000/drf_user/8' \\\n--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'\n```\nusing postman\n\n![](https://i.imgur.com/LiPdZIe.png)\n\n\n\n## Front end setup\n\nIn root directory create folder  `templates\\Accountsapp\\` and create `RegiserUser.html` file in it. Create form field in the file as follows\n\n```html\n          <form class=\"form-horizontal\" action=\"\" method=\"post\"  id=\"myForm\" autocomplete=\"off\">\n          \t{% csrf_token %}\n            <!-- Name input-->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"username\">Name</label>\n              <div class=\"col-md-9\">\n                <input id=\"username\" name=\"username\" type=\"text\" placeholder=\"Your username\" class=\"form-control\">\n              </div>\n            </div>\n            <!-- Email input-->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"email\">Your E-mail</label>\n              <div class=\"col-md-9\">\n                <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Your email\" class=\"form-control\">\n              </div>\n            </div>\n            <!-- password body -->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"password\">Password</label>\n              <div class=\"col-md-9\">\n                <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Your password\" class=\"form-control\">\n              </div>\n            </div>\n            <!-- password body -->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"password2\">Password2</label>\n              <div class=\"col-md-9\">\n                <input id=\"password2\" name=\"password2\" type=\"password\" placeholder=\"confirm password\" class=\"form-control\">\n              </div>\n            </div>\n            \n            <!-- superuser input -->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"superuser\">Is superuser</label>\n              <div class=\"col-md-3\">\n                <input id=\"issuperuser\" name=\"issuperuser\" type=\"checkbox\"  class=\"form-control\" >\n              </div>\n            </div>\n \n    \n            <!-- Form actions -->\n            <div class=\"form-group\">\n              <div class=\"col-md-6 text-left\">\n                <button type=\"submit\" class=\"btn btn-primary btn-lg\">Submit</button>\n              </div>\n\n\n            </div>\n          </fieldset>\n          </form>\n\n```\n\nOnce the form is created, we now need to take the input from the form and send to the register user API `drf_adduser/`.\n\nIn `RegisterUser.html`\n```html\n<script type=\"text/javascript\">\n\n\n\t\t\tfunction getCookie(name) {\n\t\t    var cookieValue = null;\n\t\t    if (document.cookie && document.cookie !== '') {\n\t\t        var cookies = document.cookie.split(';');\n\t\t        for (var i = 0; i < cookies.length; i++) {\n\t\t            var cookie = cookies[i].trim();\n\t\t            // Does this cookie string begin with the name we want?\n\t\t            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n\t\t                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n\t\t                break;\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    return cookieValue;\n\t\t}\n\t\tvar csrftoken = getCookie('csrftoken');\n\n\n\nfunction fetchcall(event) {\n\n\t\tevent.preventDefault();\n\t\tconsole.log('form submitted');\n\tvar username = document.getElementById(\"username\").value;\n\tvar email = document.getElementById(\"email\").value;\n\tvar password = document.getElementById(\"password\").value;\n\tvar password2 = document.getElementById(\"password2\").value;\n\tvar issuperuser = document.getElementById(('issuperuser')).checked;\n\tconsole.log(issuperuser)\n\n\t\tvar url = '/drf_adduser/';\n\n\t\t\tfetch(url, {\n\t\t\t\tmethod:'POST',\n\t\t\t\theaders:{\n\t\t\t\t\t'Content-type':'application/json',\n\t\t\t\t\t'X-CSRFToken':csrftoken,\n\t\t\t\t},\n\t\t\t\tbody:JSON.stringify({\n\t\t\t\t\t'email':email,\n\t\t\t\t\t'username':username,\n\t\t\t\t\t\"password\":password,\n\t\t\t\t\t\"password2\":password2,\n\t\t\t\t\t\"is_superuser\": issuperuser\n\t\t\t\t})\n\t\t\t}\n\t\t\t).then(function(response){\n\t\t\t\tstore_response= response;\n\t\t\t\treturn response.json();\n\n\t\t\t}).then(function(data){\n\t\t\t\tstore_data =JSON.stringify(data);\n\t\t\t\tdocument.getElementById(\"message\").innerHTML=  store_data;\n\t\t\t}).catch(function(error){\n\t\t\tconsole.error(error);\n\t\t});\n\n\t}\n\t\t\t\n\tvar myForm = document.getElementById(\"myForm\");\n\n\t\tconsole.log(username, password, myForm);\n\tmyForm.addEventListener('submit', fetchcall);\n\t\n</script>\n```\n\nTo make this work in front-end, we need to register the file to `Accountsapp/views.py` \n```python\ndef register_user(request):\n\t# if request.user.is_authenticated:\n\treturn render(request, \"Accountsapp/RegisterUser.html\", {'Title': \"Register new user\"})\n\n```\n","srcMarkdownNoYaml":"\n\n\n<hr style=\"border:1px solid lightgray\"> </hr>\n\n<br>\n\n## What will you learn\n\n<span style=\"color: grey;font-size: 18px;\">Too Long; Didn't Read </span>\n\nMarkdown | Less \n--- | --- \n**DRF** | Create API end points for CRUD\n**Token Authentication** |  Add security and authorised access\n**Fetch API calls** | Consume API from front-end\n**Password Reset** | Send email to reset your forgotton password\n\n---\n\n## 1. Step one : Basic Django Project setup\n\nCreate virtual environment\n\n```\nconda create --name djangoEnv\n```\n\nActivate the environment\n\n```\nconda activate djangoEnv\n```\nInstall the dependencies\n\n```\nconda install django\n```\nNow, in your command line\n\ncreate project `django-admin startproject tutorial`\n\ncreate app `python manage.py startapp Accountsapp`\n\ncreate superuser `python manage.py createsuperuser`\n\nNow that we have the project and app installed your structure should look like this (insert picture here)\n\nRegister the app in  file as follows\n\nIn `settings.py`\n```python\nInstalled_apps = [ \n    'Accountsapp.apps.AccountsappConfig',\n    ...\n]\n```\n\nWe now create our own custom model named ***MyAccounts***\n\nIn `models.py`\n\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager\n\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom rest_framework.authtoken.models import Token\n\n\nclass MyAccountManager(BaseUserManager):\n\tdef create_user(self, email, username, password=None):\n\t\tif not email:\n\t\t\traise ValueError('Users must have an email address')\n\t\tif not username:\n\t\t\traise ValueError('Users must have a username')\n\n\n\t\tuser = self.model(\n\t\t\temail=self.normalize_email(email),\n\t\t\tusername=username,\n\t\t)\n\n\t\tuser.set_password(password)\n\t\tuser.save(using=self._db)\n\t\treturn user\n\n\tdef create_superuser(self, email, username, password):\n\t\tuser = self.create_user(\n\t\t\temail=self.normalize_email(email),\n\t\t\tpassword=password,\n\t\t\tusername=username,\n\t\t\t\n\t\t)\n\t\tuser.is_admin = True\n\t\tuser.is_staff = True\n\t\tuser.is_superuser = True\n\t\tuser.save(using=self._db)\n\t\treturn user\n\n# creating custom model of \"User\" base model. \nclass MyAccount(AbstractBaseUser):\n\temail \t\t\t\t\t= models.EmailField(verbose_name=\"email\", max_length=60, unique=True)\n\tusername \t\t\t\t= models.CharField(max_length=30, unique=True)\n\tdate_joined\t\t\t\t= models.DateTimeField(verbose_name='date joined', auto_now_add=True)\n\tlast_login\t\t\t\t= models.DateTimeField(verbose_name='last login', auto_now=True)\n\tis_admin\t\t\t\t= models.BooleanField(default=False)\n\tis_active\t\t\t\t= models.BooleanField(default=True)\n\tis_staff\t\t\t\t= models.BooleanField(default=False)\n\tis_superuser\t\t\t= models.BooleanField(default=False)\n\n\n\tUSERNAME_FIELD = 'email'   # username_field is the one which should be unique and will be compared by django for not creating multiple users with same email.\n\n\tREQUIRED_FIELDS = ['username'] \n\n\tobjects = MyAccountManager()\n\n\tdef __str__(self):\n\t\treturn self.email\n\n\t# For checking permissions. to keep it simple all admin have ALL permissons\n\tdef has_perm(self, perm, obj=None):\n\t\treturn self.is_admin\n\n\t# Does this user have permission to view this app? (ALWAYS YES FOR SIMPLICITY)\n\tdef has_module_perms(self, app_label):\n\t\treturn True\n```\n\nTo tell django we are overwriting the default user model, we do the following\n\nIn `settings.py`\n```python\nAUTH_USER_MODEL = Accounts.MyAccounts\n```\n\nNow we makemigrates to register the model in our database\n\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\nAnd for the model to be visible in admin section we do the following\n\nIn `admin.py`\n```python\nfrom django.contrib import admin\nfrom .models import MyAccount\n\nadmin.site.register(MyAccount) # Register your models here.\n```\n\nFor now the our project is setup. We move to Django Rest Framework setup\n\n## 2. Setup Django Rest Framework with Authentication\n\nInstall dependeny\n``` \nconda install djangorestframework\n```\n\nLike any other app, django rest framework is also an app. so we add it to the list of installed apps. \nWe additionally add authtoken app for user authentication which we are shortly going to intergrate in our CRUD application\n\nIn `settings.py`\n\n```python\nINSTALLED_APPS = [\n    # my apps\n    'Accountsapp.apps.AccountsappConfig',\n    # restframework\n    'rest_framework',\n    'rest_framework.authtoken',\n    ...\n    \n]\n```\n\nWe are going to be using Token Authentication in this application. DRF documentation recommends it as the default. \nLet Us setup the Default authentication class before actually utilising it.\n\nIn `settings.py` \n```python\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        \n    ]\n}\n```\nThe last thing before we actually start writing code is to perform migration. The `rest_framework.authtoken` app provides Django database migrations.\n\nAs done previously on command line\n```\npython manage.py makemigrations\npython manage.py migrate\n```\nWe have completed the logistics for setting up DRF\n\n## 3. Building CRUD application \n\nWe would first create a folder called **api** inside our to seperate codebase for API and vanila CRUD\n\nInside API folder create four files,\n\n- `__init__.py`\n- `serializers.py`\n- `views.py`\n- `urls.py`\n\n\nIn `serializers.py`\n\n```python\nfrom rest_framework import serializers \nfrom Accountsapp.models import MyAccount # import our custom model\n\n\n# provide fields in meta, expression and in MyAccount. for admin page login and edit,  is_admin and is_staff should be true\nclass RegistrationSerializer(serializers.ModelSerializer):\n\n    # additional fields \n\tpassword2 = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n\tis_superuser =serializers.BooleanField(write_only=True)\n\t\n    class Meta:\n\t\tmodel = MyAccount\n        # mention the fields you want to display when request is sent. \n\t\tfields = ['id','email', 'username', 'password', 'password2',  'is_superuser']\n\t\textra_kwargs = {\n\t\t\t\t'password': {'write_only': True},  # tells django to not display the password for others to see\n\t\t}\t\n\n\n\tdef\tsave(self):\n\n\t\taccount = MyAccount(\n\t\t\t\t\temail=self.validated_data['email'],\n\t\t\t\t\tusername=self.validated_data['username'],\n\t\t\t\t\t# is_admin=self.validated_data['is_admin'],\n\t\t\t\t\tis_superuser= self.validated_data['is_superuser'],\n\t\t\t\t)\n\t\tpassword = self.validated_data['password']\n\t\tpassword2 = self.validated_data['password2']\n\t\tif password != password2:\n\t\t\traise serializers.ValidationError({'password': 'Passwords must match.'})\n\t\taccount.set_password(password)\n\t\taccount.save()\n\t\treturn account\n\n\nclass UpdateSerializer(serializers.ModelSerializer):\n\n\tclass Meta:\n\t\tmodel = MyAccount\n\t\t# mention the fields you want to display when request is sent. \n\t\tfields = ['id', 'username', 'email']\n\t\textra_kwargs = {\n\t\t\t\t'password': {'read_only': True},  #  password cannot be edited from here\n\t\t}\n\n\n```\n**Note** : Do not try to update the password from serializers. There is another technique which we will deal with in later section.\n\n> The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.\n\n\nIn `views.py`\n\n```python\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\nfrom django.contrib.auth import authenticate\nfrom rest_framework.authentication import TokenAuthentication\nfrom rest_framework.decorators import api_view, authentication_classes, permission_classes\n\nfrom . import serializers \nfrom Accountsapp.models import MyAccount\nfrom rest_framework.authtoken.models import Token\n\n# user views\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.parsers import JSONParser\nfrom django.core.exceptions import ObjectDoesNotExist\nimport json\n\n# login {built-in django}\nfrom django.contrib.auth import login \nfrom django.contrib.auth.decorators import login_required\n\n\n\n# get all users\n@api_view([\"GET\"])\n@csrf_exempt\n@permission_classes([IsAuthenticated,])\n@authentication_classes([TokenAuthentication])\ndef get_users(request):\n    try:\n        user_profile = MyAccount.objects.all() \n        serializer = serializers.RegistrationSerializer(user_profile, many=True)\n        return Response( {'USER_PROFILE':serializer.data}, status= status.HTTP_200_OK)\n    except ObjectDoesNotExist:\n        return JsonResponse({'Response': 'You do not have authorization to access this page'}, status=status.HTTP_401_UNAUTHORIZED)\n\n\n\n# get given user\n@api_view(['GET'])\n@csrf_exempt\n@permission_classes([IsAuthenticated,])\n@authentication_classes([TokenAuthentication])\ndef get_given_user(request, pk):\n    try:\n        user_profile = MyAccount.objects.get(pk=pk)\n    except ObjectDoesNotExist:\n        return JsonResponse({\"missing\": \"The requested object does not exist\"}, status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':  \n        serializer = serializers.RegistrationSerializer(user_profile)\n        token = Token.objects.get(user=user_profile).key\n        return JsonResponse({'given_user_profile': serializer.data, 'token':token})\n   \n\n\n# add user\n@csrf_exempt\n@api_view(['POST'])\ndef user_add_view(request):\n        serializer = serializers.RegistrationSerializer( data=request.data)\n        if serializer.is_valid():\n            account = serializer.save()\n            token, _ = Token.objects.get_or_create(user=account)\n            return Response(serializer.data, status=status.HTTP_201_CREATED,  headers={'Authorization': 'Token ' + token.key})\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n\n# update user\n@api_view([\"PUT\",'GET'])\n@csrf_exempt\n@permission_classes([IsAuthenticated,])\n@authentication_classes([TokenAuthentication])\ndef update_user(request, pk):\n\n    try:\n        user_profile = MyAccount.objects.get(id=pk)\n    except ObjectDoesNotExist:\n        return Response({'response': \"given object does not exist\"}, status=status.HTTP_404_NOT_FOUND)\n\n    user = request.user\n    try:\n        data =  {i:j for i,j in request.query_params.items()}\n        print(data)\n        serializer = serializers.UpdateSerializer(user_profile, data=data)\n        if serializer.is_valid():\n            user= serializer.save()\n            token, _ = Token.objects.get_or_create(user=user)\n            return Response({\"response\": \"success\", 'data' :serializer.data}, status=status.HTTP_201_CREATED,  headers={'Authorization': 'Token ' + token.key})\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    except ObjectDoesNotExist as e:\n        return JsonResponse({'error': str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)\n    except Exception:\n        return JsonResponse({'error': 'Something terrible went wrong'}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n\n# delete user\n@api_view([\"DELETE\",'GET']) \n@csrf_exempt\n@permission_classes([IsAuthenticated])\n@authentication_classes([TokenAuthentication])\ndef delete_user(request, pk):\n\n    try:\n        user_profile = MyAccount.objects.get(id=pk)\n    except ObjectDoesNotExist:\n        return JsonResponse({'response': \"given object does not exist\"}, safe=False, status=status.HTTP_404_NOT_FOUND)\n\n    user = request.user\n    if user_profile != user: \n        return JsonResponse({'response':\"You don't have permission to delete the record.\"}, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n\n    try:\n        user_profile.delete()  #retuns 1 or 0\n        return JsonResponse({'user_delete': \"record deleted\"}, safe=False, status=status.HTTP_200_OK)\n    except ObjectDoesNotExist as e:\n        return JsonResponse({'error': str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)\n    except Exception:\n        return JsonResponse({'error': 'Something terrible went wrong'}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n\n# login view and get token\n@api_view([\"POST\", ])\ndef drflogin(request):\n\n    email = request.data.get(\"email\")\n    username = request.data.get(\"username\")\n    password = request.data.get(\"password\")\n    account = MyAccount.objects.filter(email=email) | MyAccount.objects.filter(username=username)\n    if not account:\n        return Response({\"error\": \"Login failed\"}, status=status.HTTP_401_UNAUTHORIZED)\n    # authenticate(email=email, password=password)  # returns none if not authenticated\n    account = authenticate(email=account[0].email, password=password)\n    token, _ = Token.objects.get_or_create(user=account)\n    login(request,account)  \n    renderer= Response({\"response\" : \"Successfully authenticated\",  \"pk\": account.pk, \"username\": account.username, \"token\": token.key }, template_name= \"Accountsapp/loginuser.html\", headers={'Authorization': 'Token ' + token.key})\n    return renderer\n```\n\nSetup end points for our API\n\n\nIn `views.py`\n```python\n\nfrom django.urls import path, include\nfrom . import views as drf_views\n\n\napp_name = 'Accountsapp'\n\nurlpatterns = [\n\n    path('drf_users/', drf_views.get_users, name= 'drf_users'),\n    path('drf_user/<int:pk>/', drf_views.get_given_user, name= 'drf_get_user'),\n    path('drf_updateuser/<int:pk>/', drf_views.update_user, name= 'drf_updateusers'),\n    path('drf_deleteuser/<int:pk>/', drf_views.delete_user, name= 'drf_deleteuser'),\n    path('drf_adduser/', drf_views.user_add_view, name= 'drf_adduser'),\n    path('drf_login/', drf_views.drflogin, name='drf_login'),\n\n    \n]\n\n```\n\nWe first create users and then test  delete, update and show users functionality of our API. We will use Postman for timebeing. Later we will built the front-end to perform all these actions. \n\n## <span style= \"color:orange\"> POST </span> REQUEST: **ADD USER**\n\n```\nhttp://127.0.0.1:8000/drf_adduser/\n```\n\n\n![](https://i.imgur.com/Ea8W3Bj.png)\n\n\n## <span style= \"color:green\"> GET </span> REQUEST: **GET USERS**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_users/\n```\n\nUsing curl and passing authorization token\n```\ncurl --location --request GET 'http://127.0.0.1:8000/drf_users/' \\\n--header 'Authorization: Token 92cc8c32edb7bd111b89552a3031f918d2df5613'\n```\n\nUsing postman\n\n![](https://i.imgur.com/dPnv4J4.png)\n\n\n\n## <span style= \"color:RED\"> DEL </span> REQUEST: **DELETE USER**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_deleteuser/<int:pk>\n```\nUsing curl and passing authorization token\n```\ncurl --location --request DELETE 'http://127.0.0.1:8000/drf_deleteuser/21' \\\n--header 'Authorization: Token 1529e77c59999f819649828a5e9174ba44bd6bb4'\n```\nUsing postman\n\n![](https://i.imgur.com/6IFah1s.png)\n\n\n## <span style= \"color:dodgerblue\"> PUT </span> REQUEST: **UPDATE USER**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_updateuser/1/?username=updated_username_here&email=updated_email_here\n```\n\nUsing curl and passing authorization token\n```\ncurl --location --request PUT 'http://127.0.0.1:8000/drf_updateuser/8/?username=rcbfl&email=rcbfl@gmail.com' \\\n--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'\n```\nusing postman\n![](https://i.imgur.com/LhVZ34L.png)\n\n\n## <span style= \"color:green\"> GET </span> REQUEST: **GET USER**\n\nAPI end point\n```\nhttp://127.0.0.1:8000/drf_user/<int:pk>\n```\n\nUsing curl and passing authorization token\n```\ncurl --location --request GET 'http://127.0.0.1:8000/drf_user/8' \\\n--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'\n```\nusing postman\n\n![](https://i.imgur.com/LiPdZIe.png)\n\n\n\n## Front end setup\n\nIn root directory create folder  `templates\\Accountsapp\\` and create `RegiserUser.html` file in it. Create form field in the file as follows\n\n```html\n          <form class=\"form-horizontal\" action=\"\" method=\"post\"  id=\"myForm\" autocomplete=\"off\">\n          \t{% csrf_token %}\n            <!-- Name input-->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"username\">Name</label>\n              <div class=\"col-md-9\">\n                <input id=\"username\" name=\"username\" type=\"text\" placeholder=\"Your username\" class=\"form-control\">\n              </div>\n            </div>\n            <!-- Email input-->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"email\">Your E-mail</label>\n              <div class=\"col-md-9\">\n                <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Your email\" class=\"form-control\">\n              </div>\n            </div>\n            <!-- password body -->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"password\">Password</label>\n              <div class=\"col-md-9\">\n                <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Your password\" class=\"form-control\">\n              </div>\n            </div>\n            <!-- password body -->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"password2\">Password2</label>\n              <div class=\"col-md-9\">\n                <input id=\"password2\" name=\"password2\" type=\"password\" placeholder=\"confirm password\" class=\"form-control\">\n              </div>\n            </div>\n            \n            <!-- superuser input -->\n            <div class=\"form-group\">\n              <label class=\"col-md-3 control-label\" for=\"superuser\">Is superuser</label>\n              <div class=\"col-md-3\">\n                <input id=\"issuperuser\" name=\"issuperuser\" type=\"checkbox\"  class=\"form-control\" >\n              </div>\n            </div>\n \n    \n            <!-- Form actions -->\n            <div class=\"form-group\">\n              <div class=\"col-md-6 text-left\">\n                <button type=\"submit\" class=\"btn btn-primary btn-lg\">Submit</button>\n              </div>\n\n\n            </div>\n          </fieldset>\n          </form>\n\n```\n\nOnce the form is created, we now need to take the input from the form and send to the register user API `drf_adduser/`.\n\nIn `RegisterUser.html`\n```html\n<script type=\"text/javascript\">\n\n\n\t\t\tfunction getCookie(name) {\n\t\t    var cookieValue = null;\n\t\t    if (document.cookie && document.cookie !== '') {\n\t\t        var cookies = document.cookie.split(';');\n\t\t        for (var i = 0; i < cookies.length; i++) {\n\t\t            var cookie = cookies[i].trim();\n\t\t            // Does this cookie string begin with the name we want?\n\t\t            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n\t\t                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n\t\t                break;\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    return cookieValue;\n\t\t}\n\t\tvar csrftoken = getCookie('csrftoken');\n\n\n\nfunction fetchcall(event) {\n\n\t\tevent.preventDefault();\n\t\tconsole.log('form submitted');\n\tvar username = document.getElementById(\"username\").value;\n\tvar email = document.getElementById(\"email\").value;\n\tvar password = document.getElementById(\"password\").value;\n\tvar password2 = document.getElementById(\"password2\").value;\n\tvar issuperuser = document.getElementById(('issuperuser')).checked;\n\tconsole.log(issuperuser)\n\n\t\tvar url = '/drf_adduser/';\n\n\t\t\tfetch(url, {\n\t\t\t\tmethod:'POST',\n\t\t\t\theaders:{\n\t\t\t\t\t'Content-type':'application/json',\n\t\t\t\t\t'X-CSRFToken':csrftoken,\n\t\t\t\t},\n\t\t\t\tbody:JSON.stringify({\n\t\t\t\t\t'email':email,\n\t\t\t\t\t'username':username,\n\t\t\t\t\t\"password\":password,\n\t\t\t\t\t\"password2\":password2,\n\t\t\t\t\t\"is_superuser\": issuperuser\n\t\t\t\t})\n\t\t\t}\n\t\t\t).then(function(response){\n\t\t\t\tstore_response= response;\n\t\t\t\treturn response.json();\n\n\t\t\t}).then(function(data){\n\t\t\t\tstore_data =JSON.stringify(data);\n\t\t\t\tdocument.getElementById(\"message\").innerHTML=  store_data;\n\t\t\t}).catch(function(error){\n\t\t\tconsole.error(error);\n\t\t});\n\n\t}\n\t\t\t\n\tvar myForm = document.getElementById(\"myForm\");\n\n\t\tconsole.log(username, password, myForm);\n\tmyForm.addEventListener('submit', fetchcall);\n\t\n</script>\n```\n\nTo make this work in front-end, we need to register the file to `Accountsapp/views.py` \n```python\ndef register_user(request):\n\t# if request.user.is_authenticated:\n\treturn render(request, \"Accountsapp/RegisterUser.html\", {'Title': \"Register new user\"})\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en-GB","fig-responsive":true,"quarto-version":"1.3.450","theme":["sandstone","../../_variables.scss"],"page-layout":"article","fontsize":"1.1em","linestretch":1.7,"fontcolor":"black","author":[{"id":"cvc","number":1,"name":{"given":"Aman","family":"Bagrecha","literal":"Aman Bagrecha","non-dropping-particle":"von"},"orcid":"0000-0003-3131-0864","email":"jainaman588@gmail.com"}],"mermaid":{"theme":"neutral"},"title":"Full Fledged CRUD application using DRF and Token Authentication","date":"25-02-2021","slug":"crud-in-django-rest-framework","categories":["Django"],"tags":["Django"],"subtitle":"","description":"How to perform Create, Read, Update and Delete operations in Django Rest Framework","featured":"no"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}