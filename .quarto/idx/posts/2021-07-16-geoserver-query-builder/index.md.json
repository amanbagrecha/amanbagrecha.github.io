{"title":"Query Geoserver Layer using openlayers","markdown":{"yaml":{"title":"Query Geoserver Layer using openlayers","date":"2021-07-16","slug":"geoserver-query-builder","categories":["Geoserver","OpenLayers"],"tags":["geoserver","openlayers"],"subtitle":"","description":"This blog demonstrates how to display and query all geoserver layers or from a workspace using geoserver REST API. CQL (Common Query Language) filter provided by geoserver is used to query the layer."},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\n\nThis blog demonstrates how to display and query all geoserver layers or from a workspace using geoserver REST API. CQL (Common Query Language) filter provided by geoserver is used to query the layer.\n\nWe create a full stack application, setting up the backend using django and the frontend using vanilla js. The application will later be deployed on aws ec2 instance.\n\n\n\n## Setting up the backend (Django)\n\n\n### Create virtual environment and activate it\n\n```shell\nconda create --name djangoEnv\nconda activate djangoEnv\n```\n\n### Start a new project and create app\n```shell\ndjango-admin startproject DOGP\npython manage.py startapp gisapp\n```\n\n### Setup the database\n\nWe set up postgresql for this exercise. Create a new database and add a postgis extension from it. For more info on how to set up the extension, click here.\n\nOnce the database is set up on the localhost server, we make changes to the settings.py module in our application.\n\n\n```python\n# change database\n\nDATABASES = {\n\t'default': {\n\t\t 'ENGINE': 'django.contrib.gis.db.backends.postgis',\n\t\t 'NAME': 'DOGP', # our new database name\n\t\t 'USER': 'postgres',\n\t\t'PASSWORD': '1234',\n\t\t'HOST': '127.0.0.1',\n\t\t'PORT': '5432',\n\t},\n}\n\n```\n\n### Add installed apps\n```\n\nINSTALLED_APPS = [\n    'gisapp.apps.GisappConfig',\n    'django.contrib.gis',\n]\n\n```\n\nThere are other setups such as setting up login page and authentication, creating media url root and setting up the url which we are not going to deal with in this blog post.\n\nOnce the setup is done, we run migrations to reflect those changes in the admin page.\n\nOn running `python manage.py runserver` you should see this page.\n\n\n<figure>\n\n![](https://i.imgur.com/zSSpoqV.png)\n<figcaption align = \"center\"><b><i>Fig.1 -Page indicating successful installation of Django</i></b></figcaption>\n\n</figure>\n\n\n--- \n\nOur focus will be on the frontend, but the full code can be accessed from [here](https://github.com/amanbagrecha/openlayers-geoserver-query). \n\nFor querying and displaying layers from geoserver, we first need geoserver installed and running. For more info on how to do that can be found [here](https://docs.geoserver.org/master/en/user/installation/win_binary.html).\n\nIn the following steps we setup our basemap layer to be ESRI World Imagery and define an empty vector layer to store the result of query.\n\n```javascript\n// map setup\nvar maplayer = \tnew ol.layer.Tile({\n    source: new ol.source.XYZ({\n\t  attributions: ['Powered by Esri','Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],\n\t  attributionsCollapsible: false,\n\t  url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n\t  maxZoom: 23\n\t}),\n\tzIndex: 0\n  })\n\nvar view = new ol.View({\n\tprojection: 'EPSG:4326',\n\tcenter: [-103.32989447589996, 44.18118547387081],\n\tzoom: 7,\n  });\n  \nvar map = new ol.Map({\n\tlayers: [ maplayer],\n\ttarget: 'map',\n\tview: view,\n  });\n\n// define empty vector layer to store query result later\nvar SearchvectorLayerSource =  new ol.source.Vector({\n\t  \n\t})\nvar SearchvectorLayer = new ol.layer.Vector({\n\tsource:SearchvectorLayerSource\n  });\n  map.addLayer(SearchvectorLayer);\n\n// define headers for authentication and login\nMyHeaders = {'Content-Type': 'application/json', 'Access-Control-Allow-Credentials' : true,\n\t\t\t\t'Access-Control-Allow-Origin':'*',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': 'Basic ' + btoa('admin:geoserver')}\n```\n\nTo access all layers from a particular workspace, the api end point to do that is as follows\n\n```javascript\n// https://docs.geoserver.org/latest/en/api/#1.0.0/layers.yaml\n/workspaces/{workspaceName}/layers\n```\n\nTo see this in action, we display all layers from the `sf` workspace, provided in geoserver by default.\n\n\n\n<figure>\n\n![](https://i.imgur.com/sSjlZkU.png)\n\n<figcaption align = \"center\"><b><i>Fig.2 -Geoserver layers from sf workspace</i></b></figcaption>\n\n</figure>\n\n```javascript\n\nvar layerList = []; // array to store all the layer info\nvar loginInfo = [\"admin\", \"geoserver\"]; // username and password for geoserver\nvar geoserverURL = geoserver_ip + \":\" + geoserver_port  \n\n// make ajax call to access the sf layer\n$.ajax({\n    url: geoserverURL + '/geoserver/rest/workspaces/sf/layers/',\n    type: 'GET',\n    dataType: 'json',\n    contentType: \"application/json\",\n    beforeSend: function(xhr) {\n         xhr.setRequestHeader (\"Authorization\", \"Basic \" + btoa(loginInfo[0] + \":\" + loginInfo[1]));\n    },\n    success: function(data){\n        for (var i = 0; i < data.layers.layer.length; i++) {\n            layerList.push([data.layers.layer[i].name, data.layers.layer[i].href]);\n        }\n\n    },\n    async: false\n});\n```\nThe output of this ajax call returns us a `layerList` array containing all the layer name and the url associated with it of size (:, 2)\n\nThis layer can then be displayed on the frontend by looping over the array and inserting into the div element.\n\n\n<figure>\n\n![](https://i.imgur.com/ZDctdje.jpg)\n<figcaption align = \"center\"><b><i>Fig.3 -The layers of workspace `sf` displayed on the map with some styles applied to it\n</i></b></figcaption>\n\n</figure>\n\n\n---\n\n\nThe next step after displaying all the layers of the workspace is to load the features of the layer on selecting a particular layer.\n\nWhen the layer is ticked we send a request to geoserver to load the features of that layer and add to the map. If the layer is then unticked, we do the opposite and remove the layer from map.\n\n```javascript\n  function toggleLayer(input) {\n\t  if (input.checked) {\n\t\t  wmsLayer = new ol.layer.Image({\n\t\t\tsource: new ol.source.ImageWMS({\n\t\t\t  url: geoserver_ip+ ':'+geoserver_port + \"/geoserver/wms\",\n\t\t\t  imageLoadFunction: tileLoader,\n\t\t\t  params: { LAYERS: input.value },\n\t\t\t  serverType: \"geoserver\",\n\t\t\t}),\n\t\t\tname: input.value,\n\t\t  });\n\n\t\tmap.addLayer(wmsLayer);\n\t\t\t\t\t\n\t  } else {\n\t\t  map.getLayers().forEach(layer => {\n\t\t\t  if (layer.get('name') == input.value) {\n\t\t\t\t map.removeLayer(layer);\n\t\t\t }\n\t\t });\n\t  }\n  }\n```\n\n<figure>\n\n![](https://i.imgur.com/Wgy2YV5.jpg)\n<figcaption align = \"center\"><b><i>Fig.4 -Displaying layer on map</i></b></figcaption>\n\n</figure>\n\n### Query layer\n\nWe start with the querying the layer by their attributes. We load all the attributes (as columns) and display as dropdown. We use `wfs` service and `DescribeFeatureType` request to load the attributes.\n\n```javascript\n  function loadprops(layername) {\n\t  selectedLayer = layername;\n\t  fetch(\n\t\tgeoserver_ip+ ':'+geoserver_port+\"/geoserver/wfs?service=wfs&version=2.0.0&request=DescribeFeatureType&typeNames=\" + \n\t\t  layername +\n\t\t  \"&outputFormat=application/json\",\n\t\t{\n\t\t  method: \"GET\",\n\t\t  headers: MyHeaders,\n\t\t}\n\t  )\n\t\t.then(function (response) {\n\t\t  return response.json();\n\t\t})\n\t\t.then(function (json) {\n\t\t\tvar allprops = json.featureTypes[0].properties;\n\t\t  var ColumnnamesSelect = document.getElementById(\"Columnnames\");\n\t\t\t  ColumnnamesSelect.innerHTML = ''\n\t\t\tfor (i = 0; i < allprops.length; i++){\n\t\t\t\tif (allprops[i].name != 'the_geom') {\n\t\t\t\t\tColumnnamesSelect.innerHTML +=\n\t\t\t\t\t  '<option value=\"' +\n\t\t\t\t\t  allprops[i].name +\n\t\t\t\t\t  '\"> ' +\n\t\t\t\t\t  allprops[i].name +\n\t\t\t\t\t  \"</option>\";\n\t\t\t\t}\n  \n\t\t\t}\n\t\t});\n  }\n  ```\n\nUpto this point we have the layer and its features we want to search for. To query the layer we make a fetch call to ows service protocol and pass in the values of feature and the layer we want to query for. \n\n```javascript\nCQL_filter = column_name + \" = '\" + query_value + \"'\";\n  query_url =geoserver_ip+ ':'+geoserver_port + \"/geoserver/sf/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=\" + selectedLayer +\t\"&CQL_FILTER=\" +\tCQL_filter +  \"&outputFormat=application%2Fjson\";\n    \t\t\n  fetch_search_call(query_url).catch((error) => {\n  CQL_filter = column_name + \"%20\" + \"ILIKE\" + \"%20%27%25\" + query_value + \"%25%27\";\n\t});\n```\n\nWe define a fetch_search_call function which makes a request to ows service and returns a geojson. We can parse the geojson and display it on the map.\n\n```javascript\n  \nfunction fetch_search_call(query_url){\n\n\tfetch_result = fetch(query_url, {\n\t\tmethod: \"GET\",\n\t\theaders: MyHeaders,\n\t  })\n\t\t.then(function (response) {\n\t\t  return response.json();\n\t\t})\n\t\t.then(function (json) {\n\t\t\n\t\t\t\tSearchvectorLayerSource.clear()\n\t\t\t\tSearchvectorLayerSource.addFeatures(\n\t\t\t  new ol.format.GeoJSON({\n\t\t\t  }).readFeatures(json)\n\t\t\t  );\n\t\t\t  if(json.features.length!=0){\n\t\t\t  $('#searchModal').modal('toggle');\n\t\t\t  }\n\n\t\t\tSearchvectorLayer.set('name','search_polygon_layer')\n\t\t\tmap.getView().fit(SearchvectorLayerSource.getExtent(),  { duration: 1590, size: map.getSize(), padding: [10, 10, 13, 15], maxZoom:16});\n\t\t\t\n\t\treturn fetch_result\n  }\n```\n\n\nThe above function queries a feature and adds it to the map as a new layer. If the search is successful, we are zoomed into that location and only the feature queried gets displayed.\nIf the fetch call could not find the match it returns an error which is caught by `catch` and displays the error to the client.\n\n\n<figure>\n\n![](https://i.imgur.com/syqvzq0.gif)\n<figcaption align = \"center\"><b><i>Fig.5 -Displaying Queried layer by attribute value</i></b></figcaption>\n\n</figure>\n\nThis completes the blog on how to query layer and display on the map. Visit the [github page](https://github.com/amanbagrecha/openlayers-geoserver-query) to find the working application.\n\n\n","srcMarkdownNoYaml":"\n\n\n\n## Overview\nThis blog demonstrates how to display and query all geoserver layers or from a workspace using geoserver REST API. CQL (Common Query Language) filter provided by geoserver is used to query the layer.\n\nWe create a full stack application, setting up the backend using django and the frontend using vanilla js. The application will later be deployed on aws ec2 instance.\n\n\n\n## Setting up the backend (Django)\n\n\n### Create virtual environment and activate it\n\n```shell\nconda create --name djangoEnv\nconda activate djangoEnv\n```\n\n### Start a new project and create app\n```shell\ndjango-admin startproject DOGP\npython manage.py startapp gisapp\n```\n\n### Setup the database\n\nWe set up postgresql for this exercise. Create a new database and add a postgis extension from it. For more info on how to set up the extension, click here.\n\nOnce the database is set up on the localhost server, we make changes to the settings.py module in our application.\n\n\n```python\n# change database\n\nDATABASES = {\n\t'default': {\n\t\t 'ENGINE': 'django.contrib.gis.db.backends.postgis',\n\t\t 'NAME': 'DOGP', # our new database name\n\t\t 'USER': 'postgres',\n\t\t'PASSWORD': '1234',\n\t\t'HOST': '127.0.0.1',\n\t\t'PORT': '5432',\n\t},\n}\n\n```\n\n### Add installed apps\n```\n\nINSTALLED_APPS = [\n    'gisapp.apps.GisappConfig',\n    'django.contrib.gis',\n]\n\n```\n\nThere are other setups such as setting up login page and authentication, creating media url root and setting up the url which we are not going to deal with in this blog post.\n\nOnce the setup is done, we run migrations to reflect those changes in the admin page.\n\nOn running `python manage.py runserver` you should see this page.\n\n\n<figure>\n\n![](https://i.imgur.com/zSSpoqV.png)\n<figcaption align = \"center\"><b><i>Fig.1 -Page indicating successful installation of Django</i></b></figcaption>\n\n</figure>\n\n\n--- \n\nOur focus will be on the frontend, but the full code can be accessed from [here](https://github.com/amanbagrecha/openlayers-geoserver-query). \n\nFor querying and displaying layers from geoserver, we first need geoserver installed and running. For more info on how to do that can be found [here](https://docs.geoserver.org/master/en/user/installation/win_binary.html).\n\nIn the following steps we setup our basemap layer to be ESRI World Imagery and define an empty vector layer to store the result of query.\n\n```javascript\n// map setup\nvar maplayer = \tnew ol.layer.Tile({\n    source: new ol.source.XYZ({\n\t  attributions: ['Powered by Esri','Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],\n\t  attributionsCollapsible: false,\n\t  url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n\t  maxZoom: 23\n\t}),\n\tzIndex: 0\n  })\n\nvar view = new ol.View({\n\tprojection: 'EPSG:4326',\n\tcenter: [-103.32989447589996, 44.18118547387081],\n\tzoom: 7,\n  });\n  \nvar map = new ol.Map({\n\tlayers: [ maplayer],\n\ttarget: 'map',\n\tview: view,\n  });\n\n// define empty vector layer to store query result later\nvar SearchvectorLayerSource =  new ol.source.Vector({\n\t  \n\t})\nvar SearchvectorLayer = new ol.layer.Vector({\n\tsource:SearchvectorLayerSource\n  });\n  map.addLayer(SearchvectorLayer);\n\n// define headers for authentication and login\nMyHeaders = {'Content-Type': 'application/json', 'Access-Control-Allow-Credentials' : true,\n\t\t\t\t'Access-Control-Allow-Origin':'*',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': 'Basic ' + btoa('admin:geoserver')}\n```\n\nTo access all layers from a particular workspace, the api end point to do that is as follows\n\n```javascript\n// https://docs.geoserver.org/latest/en/api/#1.0.0/layers.yaml\n/workspaces/{workspaceName}/layers\n```\n\nTo see this in action, we display all layers from the `sf` workspace, provided in geoserver by default.\n\n\n\n<figure>\n\n![](https://i.imgur.com/sSjlZkU.png)\n\n<figcaption align = \"center\"><b><i>Fig.2 -Geoserver layers from sf workspace</i></b></figcaption>\n\n</figure>\n\n```javascript\n\nvar layerList = []; // array to store all the layer info\nvar loginInfo = [\"admin\", \"geoserver\"]; // username and password for geoserver\nvar geoserverURL = geoserver_ip + \":\" + geoserver_port  \n\n// make ajax call to access the sf layer\n$.ajax({\n    url: geoserverURL + '/geoserver/rest/workspaces/sf/layers/',\n    type: 'GET',\n    dataType: 'json',\n    contentType: \"application/json\",\n    beforeSend: function(xhr) {\n         xhr.setRequestHeader (\"Authorization\", \"Basic \" + btoa(loginInfo[0] + \":\" + loginInfo[1]));\n    },\n    success: function(data){\n        for (var i = 0; i < data.layers.layer.length; i++) {\n            layerList.push([data.layers.layer[i].name, data.layers.layer[i].href]);\n        }\n\n    },\n    async: false\n});\n```\nThe output of this ajax call returns us a `layerList` array containing all the layer name and the url associated with it of size (:, 2)\n\nThis layer can then be displayed on the frontend by looping over the array and inserting into the div element.\n\n\n<figure>\n\n![](https://i.imgur.com/ZDctdje.jpg)\n<figcaption align = \"center\"><b><i>Fig.3 -The layers of workspace `sf` displayed on the map with some styles applied to it\n</i></b></figcaption>\n\n</figure>\n\n\n---\n\n\nThe next step after displaying all the layers of the workspace is to load the features of the layer on selecting a particular layer.\n\nWhen the layer is ticked we send a request to geoserver to load the features of that layer and add to the map. If the layer is then unticked, we do the opposite and remove the layer from map.\n\n```javascript\n  function toggleLayer(input) {\n\t  if (input.checked) {\n\t\t  wmsLayer = new ol.layer.Image({\n\t\t\tsource: new ol.source.ImageWMS({\n\t\t\t  url: geoserver_ip+ ':'+geoserver_port + \"/geoserver/wms\",\n\t\t\t  imageLoadFunction: tileLoader,\n\t\t\t  params: { LAYERS: input.value },\n\t\t\t  serverType: \"geoserver\",\n\t\t\t}),\n\t\t\tname: input.value,\n\t\t  });\n\n\t\tmap.addLayer(wmsLayer);\n\t\t\t\t\t\n\t  } else {\n\t\t  map.getLayers().forEach(layer => {\n\t\t\t  if (layer.get('name') == input.value) {\n\t\t\t\t map.removeLayer(layer);\n\t\t\t }\n\t\t });\n\t  }\n  }\n```\n\n<figure>\n\n![](https://i.imgur.com/Wgy2YV5.jpg)\n<figcaption align = \"center\"><b><i>Fig.4 -Displaying layer on map</i></b></figcaption>\n\n</figure>\n\n### Query layer\n\nWe start with the querying the layer by their attributes. We load all the attributes (as columns) and display as dropdown. We use `wfs` service and `DescribeFeatureType` request to load the attributes.\n\n```javascript\n  function loadprops(layername) {\n\t  selectedLayer = layername;\n\t  fetch(\n\t\tgeoserver_ip+ ':'+geoserver_port+\"/geoserver/wfs?service=wfs&version=2.0.0&request=DescribeFeatureType&typeNames=\" + \n\t\t  layername +\n\t\t  \"&outputFormat=application/json\",\n\t\t{\n\t\t  method: \"GET\",\n\t\t  headers: MyHeaders,\n\t\t}\n\t  )\n\t\t.then(function (response) {\n\t\t  return response.json();\n\t\t})\n\t\t.then(function (json) {\n\t\t\tvar allprops = json.featureTypes[0].properties;\n\t\t  var ColumnnamesSelect = document.getElementById(\"Columnnames\");\n\t\t\t  ColumnnamesSelect.innerHTML = ''\n\t\t\tfor (i = 0; i < allprops.length; i++){\n\t\t\t\tif (allprops[i].name != 'the_geom') {\n\t\t\t\t\tColumnnamesSelect.innerHTML +=\n\t\t\t\t\t  '<option value=\"' +\n\t\t\t\t\t  allprops[i].name +\n\t\t\t\t\t  '\"> ' +\n\t\t\t\t\t  allprops[i].name +\n\t\t\t\t\t  \"</option>\";\n\t\t\t\t}\n  \n\t\t\t}\n\t\t});\n  }\n  ```\n\nUpto this point we have the layer and its features we want to search for. To query the layer we make a fetch call to ows service protocol and pass in the values of feature and the layer we want to query for. \n\n```javascript\nCQL_filter = column_name + \" = '\" + query_value + \"'\";\n  query_url =geoserver_ip+ ':'+geoserver_port + \"/geoserver/sf/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=\" + selectedLayer +\t\"&CQL_FILTER=\" +\tCQL_filter +  \"&outputFormat=application%2Fjson\";\n    \t\t\n  fetch_search_call(query_url).catch((error) => {\n  CQL_filter = column_name + \"%20\" + \"ILIKE\" + \"%20%27%25\" + query_value + \"%25%27\";\n\t});\n```\n\nWe define a fetch_search_call function which makes a request to ows service and returns a geojson. We can parse the geojson and display it on the map.\n\n```javascript\n  \nfunction fetch_search_call(query_url){\n\n\tfetch_result = fetch(query_url, {\n\t\tmethod: \"GET\",\n\t\theaders: MyHeaders,\n\t  })\n\t\t.then(function (response) {\n\t\t  return response.json();\n\t\t})\n\t\t.then(function (json) {\n\t\t\n\t\t\t\tSearchvectorLayerSource.clear()\n\t\t\t\tSearchvectorLayerSource.addFeatures(\n\t\t\t  new ol.format.GeoJSON({\n\t\t\t  }).readFeatures(json)\n\t\t\t  );\n\t\t\t  if(json.features.length!=0){\n\t\t\t  $('#searchModal').modal('toggle');\n\t\t\t  }\n\n\t\t\tSearchvectorLayer.set('name','search_polygon_layer')\n\t\t\tmap.getView().fit(SearchvectorLayerSource.getExtent(),  { duration: 1590, size: map.getSize(), padding: [10, 10, 13, 15], maxZoom:16});\n\t\t\t\n\t\treturn fetch_result\n  }\n```\n\n\nThe above function queries a feature and adds it to the map as a new layer. If the search is successful, we are zoomed into that location and only the feature queried gets displayed.\nIf the fetch call could not find the match it returns an error which is caught by `catch` and displays the error to the client.\n\n\n<figure>\n\n![](https://i.imgur.com/syqvzq0.gif)\n<figcaption align = \"center\"><b><i>Fig.5 -Displaying Queried layer by attribute value</i></b></figcaption>\n\n</figure>\n\nThis completes the blog on how to query layer and display on the map. Visit the [github page](https://github.com/amanbagrecha/openlayers-geoserver-query) to find the working application.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../_variables.scss"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en-GB","fig-responsive":true,"quarto-version":"1.3.450","theme":["sandstone"],"page-layout":"article","fontsize":"1.1em","linestretch":1.7,"fontcolor":"black","author":[{"id":"cvc","number":1,"name":{"given":"Aman","family":"Bagrecha","literal":"Aman Bagrecha","non-dropping-particle":"von"},"orcid":"0000-0003-3131-0864","email":"jainaman588@gmail.com"}],"mermaid":{"theme":"neutral"},"title":"Query Geoserver Layer using openlayers","date":"2021-07-16","slug":"geoserver-query-builder","categories":["Geoserver","OpenLayers"],"tags":["geoserver","openlayers"],"subtitle":"","description":"This blog demonstrates how to display and query all geoserver layers or from a workspace using geoserver REST API. CQL (Common Query Language) filter provided by geoserver is used to query the layer."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}