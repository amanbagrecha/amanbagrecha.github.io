{"title":"Django rest framework PDF creation and email via gmail SMTP and reportLab","markdown":{"yaml":{"title":"Django rest framework PDF creation and email via gmail SMTP and reportLab","date":"2021-05-24","slug":"pdf-and-email-creation","categories":["Django"],"tags":[],"subtitle":"","description":"In this blog we create PDF using `Report Lab` and email it to the user using gmail SMTP service. All actions are performed in Django."},"headingText":"Overview","containsRefs":false,"markdown":"\n\nEver wanted to send email with attachements that too in django? And have the attachments created from the user input? This post tries to solve exactly that.\n\n## Main steps\nIn this blog we create PDF using `Report Lab` and email it to the user using gmail SMTP service. All actions are performed in Django. \n\n## Step 1 : create django view to serialize data\n\nTo begin with, we create a view `CreatePDF` which accepts `POST` request and the data gets passed onto `CreatePDFSerializer` which serializes our data and validates it. If our data is valid, we generate PDF using `generate_pdf` function and email to the recipent (`emailaddress` of the users) using the `sendPDF` function. If everything does not execute properly, we return an error response else a success.\n\nThe local variable `myresponse` is a dictionary which helps us manage the response for each `return` statement in the correct format as expected by `response` method.\n\n\n```python\n\nSUCCESS = 'success'\nERROR = 'error'\nmessage_list = ['response', 'status', 'message'] # eg: [\"success\", 201, \"successfully upload the file\"]\n\n@csrf_exempt\n@api_view(['POST',])\ndef CreatePDF(request):\n    myresponse = {k: [] for k in message_list}\n\n    try:\n        myData = request.data\n        # serialier the data\n        serializer = serializers.CreatePDFSerializer(data=myData)  \n        if serializer.is_valid():\n            try:\n                sendPDF(**myData.dict())  # create pdf and send email\n            except Exception as e:\n                RequestResponse(\n                    myresponse,\n                    ERROR,\n                    status.HTTP_400_BAD_REQUEST,\n                    {\"Email\": [\"Could not send mail!\"]},\n                )\n                return Response(data=myresponse)\n            \n            account = serializer.save()\n            RequestResponse(\n                myresponse,\n                SUCCESS,\n                status.HTTP_201_CREATED,\n                {\"Success\": [f\"Inspection Report e-mailed to {account.EmailAddress}!\"]},\n            )\n            return Response(data=myresponse)\n\n        RequestResponse(\n            myresponse, ERROR, status.HTTP_400_BAD_REQUEST, serializer.errors\n        )\n        return Response(data=myresponse)\n    \n    except Exception as e:\n        print(e)\n        RequestResponse(\n            myresponse,\n            ERROR,\n            status.HTTP_500_INTERNAL_SERVER_ERROR,\n            {\"Error\": [\"Internal Server Error\"]},\n        )\n        return Response(data=myresponse)\n\n```\n\n## step 2: Generate PDF using Report Lab\n\nIn `views.py` we create a function to generate pdf using `Report Lab` package. This allows us to define the page size and line strings with text placement to be included.\n```python\ndef generate_pdf(**Mydata):\n    y = 700\n    buffer = io.BytesIO()  # in memory create pdf\n    p = canvas.Canvas(buffer, pagesize=letter)\n    p.setFont('Helvetica', 14)\n    p.drawString(220, y, Mydata['Title'])\n    p.drawString(450, y, 'Date:' + timezone.now().strftime('%Y-%b-%d'))\n    p.line(30, 675, 550, 675)\n    p.drawString(220, y - 300, 'Time'\n                 + str(Mydata['time']))\n    p.showPage()\n    p.save()\n    pdf = buffer.getvalue()\n    buffer.close()\n    return pdf\n\n```\n\n## step 3: Send Email via SMTP backend\n\nIn `views.py`, we create `sendPDF` function which calls the `generate_pdf`to generate PDF and attaches the pdf to the email using the `EmailMessage` class method `attach`. We additionally need to setup backend for smtp service and host user which is to be done in `settings.py`.\n```python\n# views.py\ndef sendPDF(**Mydata):\n\tpdf = generate_pdf(**Mydata)\n\tmsg = EmailMessage(Mydata['Title'], \" Your Report is ready! \", settings.EMAIL_HOST_USER, to=[Mydata['EmailAddress']])\n\tmsg.attach(f\"{Mydata['Title']}.pdf\", pdf, 'application/pdf')\n\tmsg.content_subtype = \"html\"\n\tresp = msg.send()\n\tprint(\"resp:\" , resp)\n```\n\nIn `settings.py`\n```python\n# settings.py\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'your_email@gmail.com'\nEMAIL_HOST_PASSWORD = 'your_password'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n```\n\nAt this point we have been able to successfully setup and send email with attachment. \n\n","srcMarkdownNoYaml":"\n\n## Overview\nEver wanted to send email with attachements that too in django? And have the attachments created from the user input? This post tries to solve exactly that.\n\n## Main steps\nIn this blog we create PDF using `Report Lab` and email it to the user using gmail SMTP service. All actions are performed in Django. \n\n## Step 1 : create django view to serialize data\n\nTo begin with, we create a view `CreatePDF` which accepts `POST` request and the data gets passed onto `CreatePDFSerializer` which serializes our data and validates it. If our data is valid, we generate PDF using `generate_pdf` function and email to the recipent (`emailaddress` of the users) using the `sendPDF` function. If everything does not execute properly, we return an error response else a success.\n\nThe local variable `myresponse` is a dictionary which helps us manage the response for each `return` statement in the correct format as expected by `response` method.\n\n\n```python\n\nSUCCESS = 'success'\nERROR = 'error'\nmessage_list = ['response', 'status', 'message'] # eg: [\"success\", 201, \"successfully upload the file\"]\n\n@csrf_exempt\n@api_view(['POST',])\ndef CreatePDF(request):\n    myresponse = {k: [] for k in message_list}\n\n    try:\n        myData = request.data\n        # serialier the data\n        serializer = serializers.CreatePDFSerializer(data=myData)  \n        if serializer.is_valid():\n            try:\n                sendPDF(**myData.dict())  # create pdf and send email\n            except Exception as e:\n                RequestResponse(\n                    myresponse,\n                    ERROR,\n                    status.HTTP_400_BAD_REQUEST,\n                    {\"Email\": [\"Could not send mail!\"]},\n                )\n                return Response(data=myresponse)\n            \n            account = serializer.save()\n            RequestResponse(\n                myresponse,\n                SUCCESS,\n                status.HTTP_201_CREATED,\n                {\"Success\": [f\"Inspection Report e-mailed to {account.EmailAddress}!\"]},\n            )\n            return Response(data=myresponse)\n\n        RequestResponse(\n            myresponse, ERROR, status.HTTP_400_BAD_REQUEST, serializer.errors\n        )\n        return Response(data=myresponse)\n    \n    except Exception as e:\n        print(e)\n        RequestResponse(\n            myresponse,\n            ERROR,\n            status.HTTP_500_INTERNAL_SERVER_ERROR,\n            {\"Error\": [\"Internal Server Error\"]},\n        )\n        return Response(data=myresponse)\n\n```\n\n## step 2: Generate PDF using Report Lab\n\nIn `views.py` we create a function to generate pdf using `Report Lab` package. This allows us to define the page size and line strings with text placement to be included.\n```python\ndef generate_pdf(**Mydata):\n    y = 700\n    buffer = io.BytesIO()  # in memory create pdf\n    p = canvas.Canvas(buffer, pagesize=letter)\n    p.setFont('Helvetica', 14)\n    p.drawString(220, y, Mydata['Title'])\n    p.drawString(450, y, 'Date:' + timezone.now().strftime('%Y-%b-%d'))\n    p.line(30, 675, 550, 675)\n    p.drawString(220, y - 300, 'Time'\n                 + str(Mydata['time']))\n    p.showPage()\n    p.save()\n    pdf = buffer.getvalue()\n    buffer.close()\n    return pdf\n\n```\n\n## step 3: Send Email via SMTP backend\n\nIn `views.py`, we create `sendPDF` function which calls the `generate_pdf`to generate PDF and attaches the pdf to the email using the `EmailMessage` class method `attach`. We additionally need to setup backend for smtp service and host user which is to be done in `settings.py`.\n```python\n# views.py\ndef sendPDF(**Mydata):\n\tpdf = generate_pdf(**Mydata)\n\tmsg = EmailMessage(Mydata['Title'], \" Your Report is ready! \", settings.EMAIL_HOST_USER, to=[Mydata['EmailAddress']])\n\tmsg.attach(f\"{Mydata['Title']}.pdf\", pdf, 'application/pdf')\n\tmsg.content_subtype = \"html\"\n\tresp = msg.send()\n\tprint(\"resp:\" , resp)\n```\n\nIn `settings.py`\n```python\n# settings.py\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'your_email@gmail.com'\nEMAIL_HOST_PASSWORD = 'your_password'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n```\n\nAt this point we have been able to successfully setup and send email with attachment. \n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en-GB","fig-responsive":true,"quarto-version":"1.3.450","theme":["sandstone","../../_variables.scss"],"page-layout":"article","fontsize":"1.1em","linestretch":1.7,"fontcolor":"black","author":[{"id":"cvc","number":1,"name":{"given":"Aman","family":"Bagrecha","literal":"Aman Bagrecha","non-dropping-particle":"von"},"orcid":"0000-0003-3131-0864","email":"jainaman588@gmail.com"}],"mermaid":{"theme":"neutral"},"title":"Django rest framework PDF creation and email via gmail SMTP and reportLab","date":"2021-05-24","slug":"pdf-and-email-creation","categories":["Django"],"tags":[],"subtitle":"","description":"In this blog we create PDF using `Report Lab` and email it to the user using gmail SMTP service. All actions are performed in Django."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}