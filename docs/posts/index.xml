<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aman Bagrecha</title>
<link>https://amanbagrecha.github.io/posts/</link>
<atom:link href="https://amanbagrecha.github.io/posts/index.xml" rel="self" type="application/rss+xml"/>
<description>Aman is a geospatial scientist at Galaxeye Space and runs a geospatial community Lets Talk Spatial</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Tue, 04 Jul 2023 18:30:00 GMT</lastBuildDate>
<item>
  <title>My first FOSS4G experience</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/first-foss4g/</link>
  <description><![CDATA[ 




<p>I embarked on a journey to attend the esteemed geospatial conference, FOSS4G 2023, held in Prizren. As I reflect, it was an event that left a profound impact on me, and I want to treasure these memories forever.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://amanbagrecha.github.io/posts/first-foss4g/first-day.jpeg" class="img-fluid figure-img"></p>
<figcaption>Entering the exhibition center at ITP</figcaption>
</figure>
</div>
<p>Just a couple of months ago, I had my doubts about attending FOSS4G, as I had never traveled to a foreign country before and the host country was not very well known. The logistics to get visa and planning the round-trip seemed daunting, and I wasn’t sure if it would be worth the investment and energy. However, to my delight, I discovered that there were other indians planning their travel too, making the planning process much smoother.</p>
<p>So, there I was, hopping on the plane to Pristina, Kosovo, and thinking to myself, “Did I really make the right call by shelling out a ton of money for this conference?” But, looking back now, I have to say, it was totally worth it! All the energy and effort I put into being a part of this event, it paid off big time. I’m filled with a sense of contentment right now.</p>
<p>During my time at foss4g, I got to hang out with the cool, nerdy core developers, authors, organizers, professors, and users of geospatial technology. I made some awesome new friends and dove headfirst into the wild nightlife of that stunning city. The experience was overwhelming, and it demanded an extra surge of energy.</p>
<p>With dense knowledge delivered within every conference room, I had to decide to let go one talk over another. Thankfully the talks are recorded, and will be shared freely and openly, adhering the spirit of foss4g!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://amanbagrecha.github.io/posts/first-foss4g/geonerds.jpeg" class="img-fluid figure-img"></p>
<figcaption>Day5: Presenting my work to a room full of geonerds</figcaption>
</figure>
</div>
<p>Not only was this my first foss4g, but also the first time I presented my work. I was thrilled to receive positive feedback after my talk and to connect with individuals who shared my passion and interests. It was like finding my tribe!</p>
<p>These ten days in Kosovo were one of the most remarkable days of my life. The local people I met, both from Kosovo and Albania, made me feel right at home and added to the incredible experience. I’m back home, with a fresh perspective on life, a bunch of goals to accomplish, and a trove of memories that I will cherish forever.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://amanbagrecha.github.io/posts/first-foss4g/friends-day-out.jpeg" class="img-fluid figure-img"></p>
<figcaption>Random day: City tour with friends</figcaption>
</figure>
</div>
<p>Little did I know, a “mere” conference could dive deep into technical know-how, forge bonds for a lifetime, question my views on status quo, understand cultural differences, and also make me feel blessed to be part of this community!</p>
<p>I cannot fathom the sheer knowledge I gained during these 10 days! From learning about state of the art innovation in geospatial, to learning life lessons to think beyond technology! I hope to have the opportunity to attend again next year and reunite with the friends I made along the way.</p>
<p>Thank you foss4g community, the people of Kosovo and to the organizers who made this extraordinary event possible!</p>
<p>Fingers crossed, hope to meet again next year in Brazil!</p>
<p><em>PS: This post is a glimpse of what transpired during the conference! Highly encourage everybody to attend this event and experience it yourself!</em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://amanbagrecha.github.io/posts/first-foss4g/prizren.jpeg" class="img-fluid figure-img"></p>
<figcaption>Everyday visit: Stunning landscape of Prizren city, Kosovo</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://amanbagrecha.github.io/posts/first-foss4g/stickers.png" class="img-fluid figure-img"></p>
<figcaption>Saving some stickers for Lets Talk Spatial community! Grab them at next meetup :)</figcaption>
</figure>
</div>



 ]]></description>
  <category>foss4g</category>
  <guid>https://amanbagrecha.github.io/posts/first-foss4g/</guid>
  <pubDate>Tue, 04 Jul 2023 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/first-foss4g/featured.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Understanding Jason-3 satellite: Data and its Applications</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/understanding-jason-3-satellite-data-and-its-applications/</link>
  <description><![CDATA[ 




<section id="what-is-jason-3" class="level3">
<h3 class="anchored" data-anchor-id="what-is-jason-3">What is Jason-3?</h3>
<p>Jason-3 is a satellite which measures topographic height of the entire earth once every ~10 days since the year 2016 and is used in applications such as sea level rise, ocean circulation, and climate change. - It has an <strong>altimeter</strong> which measures the two-way travel time from the Earth’s surface to satellite. - It emits a pulse (radar pulse in this case) at a certain frequency to measure time. Thus it can also penetrate clouds.</p>
<figure class="figure">
<iframe width="100%" height="450" frameborder="0" title="Felt Map" src="https://felt.com/embed/map/Jason-3-pass-vgfiMu1mRpaWz6BZqg9Cx4D?lat=-6.478218&amp;lon=16.823646&amp;zoom=6.366">
</iframe>
<figcaption align="center">
<b><i>Fig.1 - Jason-3 ground track visualised on felt. Each point represents a measurement. The distance between two measurements depends on specific product type. </i></b>
</figcaption>
</figure>
<blockquote class="blockquote">
<p>The data format of this satellite is Vector Points, distributed as netCDF4 file format.</p>
</blockquote>
</section>
<section id="understanding-jason-3-family-of-products" class="level3">
<h3 class="anchored" data-anchor-id="understanding-jason-3-family-of-products">Understanding Jason-3 Family of products</h3>
<p>Jason-3 is processed to level-2 from telemetry data (level-0) and is available online for users to download via NOAA, EUMETSAT and CNES. <strong>Jason-3 level-2 product</strong> has 3 family of products depending on their <strong>latency</strong>. The near real time data with latency of 3-5 hours is categorised under Operational Geophysical Data Record (<strong>OGDR</strong>) product family, with latency of 1-2 days under Interim geophysical data record (<strong>IGDR</strong>) product family, and with latency of 60 days under geophysical data record (<strong>GDR</strong>) product family.</p>
<blockquote class="blockquote">
<p>Note: Higher the latency, more accurate the measurements since GDR products, unlike OGDR and IGDR products, are fully validated and calibrated.</p>
</blockquote>
<p>Under each family, they are categorised with <strong>reduced</strong>, <strong>native</strong> and <strong>sensor</strong> product. The difference between them is in the amount and type of data included, as described in the figure below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/216826096-35712afa-a141-4bb5-8dcd-1f2f8eed1365.png" class="img-fluid figure-img"></p>
<figcaption>Describing Jason-3 Product Family and its childs. Reduced product only contains data with 1Hz frequency. Native product contains data with 1Hz + 20Hz. Sensor contains 1Hz + 20Hz + waveforms. GDR product is fully validated and has highest accuracy.</figcaption>
</figure>
</div>
</section>
<section id="which-jason-3-data-product-should-i-use" class="level3">
<h3 class="anchored" data-anchor-id="which-jason-3-data-product-should-i-use">Which Jason-3 data product should I use?</h3>
<p>The answer depends on 3 key factors: 1. Latency, spatial resolution, spectral resolution.</p>
<p>I’ve already mentioned the latency difference between three parent products (see above section). Depending on user requirements and accuracy, one of the three families can be selected.</p>
<p>Let us now look at two other factors which will help you decide which data product to choose.</p>
<p>Spatial resolution here is the distance between two measurements, while spectral resolution is the richness of data. <strong>sensor product</strong> contains information about the photon signals (waveforms) and might not be useful for certain applications, while <strong>reduced product</strong> has sparsely spaced measurements, i.e, number of total measurements are less and it does not contain waveform information.</p>
<p>To illustrate which product to choose among the 8 products from 3 family, let us look at few real world use cases to help with our selection -</p>
<ul>
<li><p>If I aim to create a DEM for a large scale area which has relatively relatively terrain surface and do not require near real time data, I’d prefer using <strong>reduced product</strong> from <em>GDR family</em>. While if the surface is undulating, I’d prefer <strong>native product</strong>, which has measurements at better spatial resolution.</p></li>
<li><p>If I am working on a climate variable, say, looking at atmospheric correction which requires raw photon signals as well, I’d use <strong>sensor product</strong> from <em>IGDR family</em> or <em>GDR family</em> depending on requirement.</p></li>
<li><p>If I am working on mission critical problem, and require near real time data with good spatial resolution, but do not need waveform data, I’d use <strong>native product</strong> from <em>OGDR family</em>.</p></li>
</ul>
<hr>
<blockquote class="blockquote">
<p>Earthdata hosts a product called <strong>GPS OGDR SSHA</strong> which is delivered near real time (8-10 hours) as <strong>reduced product</strong> (1Hz only). This product is more accurate than <strong>OGDR SSHA</strong> from the OGDR family described above due to it being processed against GPS orbit rather than DORIS orbit ( which is used for all other products described in figure 2). Though <strong>GPS OGDR SSHA</strong> product is only available from 2020 october onwards.</p>
</blockquote>
<p>Now that we know which product to download, let us look how and where to download them.</p>
<p><strong>Manual Download</strong></p>
<ul>
<li><a href="https://search.earthdata.nasa.gov/search/granules?p=C2205122298-POCLOUD">Earthdata Search JASON3 GPS OGDR</a>: It only allows you to visualise the ground track of the product you are going to download.</li>
<li><a href="https://www.ncei.noaa.gov/data/oceans/jason3/">NCEI NOAA JASON3</a>: It has a GUI to check out the available products for each family, cycle and pass. Each family is suffixed with the version number.</li>
<li><a href="https://cmr.earthdata.nasa.gov/virtual-directory/collections/C2205122298-POCLOUD">CMR API virtual Directory JASON3 GPS OGDR</a>: It is same as NCEI NOAA, but only 1 product is available through CMR API virtual directory</li>
</ul>
<p><strong>Programmatic download Links</strong></p>
<ul>
<li><a href="https://archive.podaac.earthdata.nasa.gov/s3credentialsREADME">PODAAC S3 access</a>: Direct S3 access to only <em>GPS OGDR SSHA</em> <strong>reduced product</strong>. To know about bucket information, see <a href="https://podaac.jpl.nasa.gov/dataset/JASON_3_L2_OST_OGDR_GPS">here</a></li>
<li><a href="https://cmr.earthdata.nasa.gov/search/granules.json?collection_concept_id=C2205122298-POCLOUD">CMR API JASON3 GPS OGDR</a>: CMI API access to only <em>GPS OGDR SSHA</em> <strong>reduced product</strong>. More details on how to use this API is described below.</li>
<li><a href="ftp://ftp-oceans.ncei.noaa.gov">FTP NCEI NOAA JASON3</a>: This FTP server hosts all the data described in figure 2. More information on how to download it is given below.</li>
</ul>
<blockquote class="blockquote">
<p>Data hosted by NCEI NOAA has all the data available for download, but NASA earthdata only hosts <em>GPS OGDR SSHA</em> <strong>reduced product</strong>.</p>
</blockquote>
</section>
<section id="download-from-cmr-api" class="level3">
<h3 class="anchored" data-anchor-id="download-from-cmr-api">Download from CMR API</h3>
<p>The code for downloading jason-3 data using CMR API can be found <a href="https://github.com/amanbagrecha/jason3/blob/main/jason3_script.py">here</a>. Broadly, The code sends a request to CMR Search API https://cmr.earthdata.nasa.gov/search/granules.json along with parameters to filter by date, region and number of products required. The result is passed to authenticate with earthdata credentials and the file is downloaded to the local machine.</p>
</section>
<section id="download-from-ftp-server" class="level3">
<h3 class="anchored" data-anchor-id="download-from-ftp-server">Download from FTP server</h3>
<p>The entire code for downloading jason-3 data using FTP Server can be found <a href="https://github.com/amanbagrecha/jason3/blob/main/jason3_ftp_script.py">here</a>. In this code, the FTP directory is fetched for a specific product. To know which parent family folder to choose, we need to understand family versions for the Jason-3 product.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/216826675-886e72bd-bb71-4727-ac76-86d7accd830d.png" class="img-fluid figure-img"></p>
<figcaption>Jason-3 products grouped according to model version as seen in NOAA server directory at ncei.noaa.gov/data/oceans/jason3/.</figcaption>
</figure>
</div>
<p>The Jason-3 family product is versioned based on whether the product is in calibration/validation phase or intended to be used by the end user. If <strong><code>T</code></strong> is suffixed with the name of the parent folder, it means cal/val phase otherwise it is for end user. Product families with no suffix, combines all the versioned family product, keeping the latest for each cycle. It has data for all cycles till the latest available date.</p>
<blockquote class="blockquote">
<p>Since September 2018, all data products associated with <strong><code>gdr</code></strong> family have been moved to version <strong><code>f</code></strong>. If you require historcal jason3 data, it is a no-brainer to use GDR family products since it is at the most accurate among all the families and also has been updated with the latest model version <strong><code>f</code></strong>.</p>
</blockquote>
<p>References</p>
<ul>
<li><a href="https://www.ospo.noaa.gov/Products/documents/hdbk_j3.pdf">Jason-3 Product Handbook</a></li>
<li><a href="https://podaac.jpl.nasa.gov/dataset/JASON_3_L2_OST_OGDR_GPS">PODAAC JPL NASA</a></li>
</ul>


</section>

 ]]></description>
  <category>Python</category>
  <category>Remote Sensing</category>
  <guid>https://amanbagrecha.github.io/posts/understanding-jason-3-satellite-data-and-its-applications/</guid>
  <pubDate>Wed, 25 Jan 2023 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/understanding-jason-3-satellite-data-and-its-applications/featured.png" medium="image" type="image/png" height="123" width="144"/>
</item>
<item>
  <title>Cloud Native Composite, Subset and Processing of Satellite Imagery with STAC and Stackstac</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2023-01-14-cloud-native-composite-subset-and-processing-of-satellite-imagery-with-stac-and-stackstac/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>If you wanted to collect all Sentinel satellite data for a given region of interest (ROI), say, for a given day or time frame - is there any simple way to do it? That means: Without having to download all the full images manually and cropping the ROI subset manually as well afterwards?</p>
</blockquote>
<p>This, well articulated question, was the one which I was facing and made me ponder to think if we could do this using STAC and Python.</p>
<hr>
<p>I had a road network layer over which I needed satellite imagery. The problem with my road network is that it has a large spatial extent, causing a single satellite imagery to not cover it entirely. Moreover, because of this large extent, I need two adjacent tiles to be in the same Coordinate Reference System.</p>
<figure class="figure">
<img src="https://i.imgur.com/FHLQbBo.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.1 - Road network (in red) spanning multiple UTM Zones. Basemap from OSM.</i></b>
</figcaption>
</figure>
<p>What I needed was, - A way to aggregate all the adjacent tiles for a single day - Convert to a single CRS on the fly - Subset the data to my region - Create a composite (merge) and perform analysis on the fly</p>
<p>It turns out Python (and its ecosystem of great geospatial packages) along with STAC allows us to do just that.</p>
<p>What is STAC? &gt; STAC (SpatioTemporal Asset Catalog) is an open-source specification for describing satellite imagery and the associated metadata.</p>
<p>We will use <code>stackstac</code>, which is a Python package for efficiently managing and analysing large amounts of satellite imagery data in a cloud computing environment.</p>
<p>First, we search through the sentinel-2 collection for our area of interest from element84 provided STAC endpoint.</p>
<pre><code>from pystac_client import Client

URL = 'https://earth-search.aws.element84.com/v0/'

client = Client.open(URL)</code></pre>
<pre><code>search = client.search(
    max_items = 10,
    collections = "sentinel-s2-l2a-cogs",
    intersects = aoi_as_multiline,
    datetime = '2022-01-01/2022-01-24'
)</code></pre>
<p>The resultant <code>search</code> object is passed to <code>stack</code> method on <code>stackstac</code> along with providing the destination CRS, the region of bounds and the assets required.</p>
<pre><code>import stackstac

ds = stackstac.stack(search.get_all_items() ,  epsg=4326, assets=["B04", "B03", "B05"],
bounds_latlon= aoi_as_multiline.bounds )
</code></pre>
<p>The above line does a lot of things under the hood. It transforms the CRS of each tile from their native CRS to EPSG:4326. It also clips the tiles to our AOI. It also filters only 3 bands out of the possible 15 sentinel-2 bands. The output <code>ds</code> is a <code>xarray.DataArray</code> object and it is a known fact how much is possible with very little code in xarray.</p>
<p>As such, we can group by a date and mosaic those tiles very easily using xarray as shown below.</p>
<pre><code>dsf = ds.groupby("time.date").median()</code></pre>
<figure class="figure">
<img src="https://i.imgur.com/BLCu4xs.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.2 - Our DataArray is 3.37GB with 4 dimensions (time, bands, x, y) respectively.</i></b>
</figcaption>
</figure>
<p>Since xarray loads lazily, we did not perform any computation so far. But we can see how much data we are going to end up storing as shown in Figure 2.</p>
<p>When I run the <code>compute</code> method on the output, it does the computation in 4 minutes (here) i.e, processing ~3.5GB in 4 mins and computing the median across the dates.</p>
<pre><code>res = dsf.compute()</code></pre>
<p>At the end of this process, I have 4 images for each of the 4 dates, clipped to my region of interest in the CRS that I desire.</p>
<hr>
<p>The above method of processing large volume data is super handy and can be scaled very easily with cloud infrastructure. What is unique about this approach is that I did not have to download data, convert or know the CRS of each tile, worrying about the bounds of my region of interest. Read more about how stackstac works <a href="https://stackstac.readthedocs.io/">here</a>.</p>
<p>The code can be found <a href="https://colab.research.google.com/drive/1NcwW7S58PkZFnrGaCyOcA5uLTxymdbZl?usp=sharing">here</a>.</p>



 ]]></description>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/2023-01-14-cloud-native-composite-subset-and-processing-of-satellite-imagery-with-stac-and-stackstac/</guid>
  <pubDate>Fri, 13 Jan 2023 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2023-01-14-cloud-native-composite-subset-and-processing-of-satellite-imagery-with-stac-and-stackstac/featured.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Full Fledged CRUD application using DRF and Token Authentication</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-crud-in-django-rest-framework/</link>
  <description><![CDATA[ 




<hr style="border:1px solid lightgray">

<p><br></p>
<section id="what-will-you-learn" class="level2">
<h2 class="anchored" data-anchor-id="what-will-you-learn">What will you learn</h2>
<p><span style="color: grey;font-size: 18px;">Too Long; Didn’t Read </span></p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Markdown</th>
<th>Less</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>DRF</strong></td>
<td>Create API end points for CRUD</td>
</tr>
<tr class="even">
<td><strong>Token Authentication</strong></td>
<td>Add security and authorised access</td>
</tr>
<tr class="odd">
<td><strong>Fetch API calls</strong></td>
<td>Consume API from front-end</td>
</tr>
<tr class="even">
<td><strong>Password Reset</strong></td>
<td>Send email to reset your forgotton password</td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="step-one-basic-django-project-setup" class="level2">
<h2 class="anchored" data-anchor-id="step-one-basic-django-project-setup">1. Step one : Basic Django Project setup</h2>
<p>Create virtual environment</p>
<pre><code>conda create --name djangoEnv</code></pre>
<p>Activate the environment</p>
<pre><code>conda activate djangoEnv</code></pre>
<p>Install the dependencies</p>
<pre><code>conda install django</code></pre>
<p>Now, in your command line</p>
<p>create project <code>django-admin startproject tutorial</code></p>
<p>create app <code>python manage.py startapp Accountsapp</code></p>
<p>create superuser <code>python manage.py createsuperuser</code></p>
<p>Now that we have the project and app installed your structure should look like this (insert picture here)</p>
<p>Register the app in file as follows</p>
<p>In <code>settings.py</code></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">Installed_apps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ </span>
<span id="cb4-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accountsapp.apps.AccountsappConfig'</span>,</span>
<span id="cb4-3">    ...</span>
<span id="cb4-4">]</span></code></pre></div>
<p>We now create our own custom model named <strong><em>MyAccounts</em></strong></p>
<p>In <code>models.py</code></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.db <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> models</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.auth.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AbstractBaseUser, BaseUserManager</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.conf <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> settings</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.db.models.signals <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> post_save</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.dispatch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> receiver</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.authtoken.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Token</span>
<span id="cb5-8"></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyAccountManager(BaseUserManager):</span>
<span id="cb5-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_user(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, email, username, password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> email:</span>
<span id="cb5-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Users must have an email address'</span>)</span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> username:</span>
<span id="cb5-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Users must have a username'</span>)</span>
<span id="cb5-16"></span>
<span id="cb5-17"></span>
<span id="cb5-18">        user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(</span>
<span id="cb5-19">            email<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize_email(email),</span>
<span id="cb5-20">            username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username,</span>
<span id="cb5-21">        )</span>
<span id="cb5-22"></span>
<span id="cb5-23">        user.set_password(password)</span>
<span id="cb5-24">        user.save(using<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._db)</span>
<span id="cb5-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> user</span>
<span id="cb5-26"></span>
<span id="cb5-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_superuser(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, email, username, password):</span>
<span id="cb5-28">        user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.create_user(</span>
<span id="cb5-29">            email<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize_email(email),</span>
<span id="cb5-30">            password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password,</span>
<span id="cb5-31">            username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username,</span>
<span id="cb5-32">            </span>
<span id="cb5-33">        )</span>
<span id="cb5-34">        user.is_admin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-35">        user.is_staff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-36">        user.is_superuser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-37">        user.save(using<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._db)</span>
<span id="cb5-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> user</span>
<span id="cb5-39"></span>
<span id="cb5-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating custom model of "User" base model. </span></span>
<span id="cb5-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyAccount(AbstractBaseUser):</span>
<span id="cb5-42">    email                   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.EmailField(verbose_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-43">    username                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.CharField(max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-44">    date_joined             <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.DateTimeField(verbose_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date joined'</span>, auto_now_add<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-45">    last_login              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.DateTimeField(verbose_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last login'</span>, auto_now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-46">    is_admin                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.BooleanField(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-47">    is_active               <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.BooleanField(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-48">    is_staff                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.BooleanField(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-49">    is_superuser            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.BooleanField(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-50"></span>
<span id="cb5-51"></span>
<span id="cb5-52">    USERNAME_FIELD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'email'</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># username_field is the one which should be unique and will be compared by django for not creating multiple users with same email.</span></span>
<span id="cb5-53"></span>
<span id="cb5-54">    REQUIRED_FIELDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>] </span>
<span id="cb5-55"></span>
<span id="cb5-56">    objects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccountManager()</span>
<span id="cb5-57"></span>
<span id="cb5-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.email</span>
<span id="cb5-60"></span>
<span id="cb5-61">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For checking permissions. to keep it simple all admin have ALL permissons</span></span>
<span id="cb5-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> has_perm(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, perm, obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_admin</span>
<span id="cb5-64"></span>
<span id="cb5-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does this user have permission to view this app? (ALWAYS YES FOR SIMPLICITY)</span></span>
<span id="cb5-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> has_module_perms(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, app_label):</span>
<span id="cb5-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>To tell django we are overwriting the default user model, we do the following</p>
<p>In <code>settings.py</code></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">AUTH_USER_MODEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Accounts.MyAccounts</span></code></pre></div>
<p>Now we makemigrates to register the model in our database</p>
<pre><code>python manage.py makemigrations
python manage.py migrate</code></pre>
<p>And for the model to be visible in admin section we do the following</p>
<p>In <code>admin.py</code></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> admin</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> .models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MyAccount</span>
<span id="cb8-3"></span>
<span id="cb8-4">admin.site.register(MyAccount) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Register your models here.</span></span></code></pre></div>
<p>For now the our project is setup. We move to Django Rest Framework setup</p>
</section>
<section id="setup-django-rest-framework-with-authentication" class="level2">
<h2 class="anchored" data-anchor-id="setup-django-rest-framework-with-authentication">2. Setup Django Rest Framework with Authentication</h2>
<p>Install dependeny</p>
<pre><code>conda install djangorestframework</code></pre>
<p>Like any other app, django rest framework is also an app. so we add it to the list of installed apps. We additionally add authtoken app for user authentication which we are shortly going to intergrate in our CRUD application</p>
<p>In <code>settings.py</code></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">INSTALLED_APPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># my apps</span></span>
<span id="cb10-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accountsapp.apps.AccountsappConfig'</span>,</span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># restframework</span></span>
<span id="cb10-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rest_framework'</span>,</span>
<span id="cb10-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rest_framework.authtoken'</span>,</span>
<span id="cb10-7">    ...</span>
<span id="cb10-8">    </span>
<span id="cb10-9">]</span></code></pre></div>
<p>We are going to be using Token Authentication in this application. DRF documentation recommends it as the default. Let Us setup the Default authentication class before actually utilising it.</p>
<p>In <code>settings.py</code></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">REST_FRAMEWORK&nbsp;<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>&nbsp;{</span>
<span id="cb11-2">&nbsp;&nbsp;&nbsp;&nbsp;<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT_AUTHENTICATION_CLASSES'</span>:&nbsp;[</span>
<span id="cb11-3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rest_framework.authentication.TokenAuthentication'</span>,</span>
<span id="cb11-4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<span id="cb11-5">&nbsp;&nbsp;&nbsp;&nbsp;]</span>
<span id="cb11-6">}</span></code></pre></div>
<p>The last thing before we actually start writing code is to perform migration. The&nbsp;<code>rest_framework.authtoken</code>&nbsp;app provides Django database migrations.</p>
<p>As done previously on command line</p>
<pre><code>python manage.py makemigrations
python manage.py migrate</code></pre>
<p>We have completed the logistics for setting up DRF</p>
</section>
<section id="building-crud-application" class="level2">
<h2 class="anchored" data-anchor-id="building-crud-application">3. Building CRUD application</h2>
<p>We would first create a folder called <strong>api</strong> inside our to seperate codebase for API and vanila CRUD</p>
<p>Inside API folder create four files,</p>
<ul>
<li><code>__init__.py</code></li>
<li><code>serializers.py</code></li>
<li><code>views.py</code></li>
<li><code>urls.py</code></li>
</ul>
<p>In <code>serializers.py</code></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> serializers </span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> Accountsapp.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MyAccount <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import our custom model</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># provide fields in meta, expression and in MyAccount. for admin page login and edit,  is_admin and is_staff should be true</span></span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RegistrationSerializer(serializers.ModelSerializer):</span>
<span id="cb13-7"></span>
<span id="cb13-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># additional fields </span></span>
<span id="cb13-9">    password2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializers.CharField(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password'</span>}, write_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-10">    is_superuser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>serializers.BooleanField(write_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-11">    </span>
<span id="cb13-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Meta:</span>
<span id="cb13-13">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount</span>
<span id="cb13-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mention the fields you want to display when request is sent. </span></span>
<span id="cb13-15">        fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'email'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password2'</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_superuser'</span>]</span>
<span id="cb13-16">        extra_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-17">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'write_only'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>},  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tells django to not display the password for others to see</span></span>
<span id="cb13-18">        }   </span>
<span id="cb13-19"></span>
<span id="cb13-20"></span>
<span id="cb13-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> save(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-22"></span>
<span id="cb13-23">        account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount(</span>
<span id="cb13-24">                    email<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validated_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'email'</span>],</span>
<span id="cb13-25">                    username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validated_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>],</span>
<span id="cb13-26">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is_admin=self.validated_data['is_admin'],</span></span>
<span id="cb13-27">                    is_superuser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validated_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_superuser'</span>],</span>
<span id="cb13-28">                )</span>
<span id="cb13-29">        password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validated_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password'</span>]</span>
<span id="cb13-30">        password2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validated_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password2'</span>]</span>
<span id="cb13-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> password2:</span>
<span id="cb13-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> serializers.ValidationError({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passwords must match.'</span>})</span>
<span id="cb13-33">        account.set_password(password)</span>
<span id="cb13-34">        account.save()</span>
<span id="cb13-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> account</span>
<span id="cb13-36"></span>
<span id="cb13-37"></span>
<span id="cb13-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> UpdateSerializer(serializers.ModelSerializer):</span>
<span id="cb13-39"></span>
<span id="cb13-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Meta:</span>
<span id="cb13-41">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount</span>
<span id="cb13-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mention the fields you want to display when request is sent. </span></span>
<span id="cb13-43">        fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'email'</span>]</span>
<span id="cb13-44">        extra_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-45">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read_only'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>},  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  password cannot be edited from here</span></span>
<span id="cb13-46">        }</span>
<span id="cb13-47"></span></code></pre></div>
<p><strong>Note</strong> : Do not try to update the password from serializers. There is another technique which we will deal with in later section.</p>
<blockquote class="blockquote">
<p>The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.</p>
</blockquote>
<p>In <code>views.py</code></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> status</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.response <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Response</span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.permissions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IsAuthenticated, IsAdminUser</span>
<span id="cb14-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.auth <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> authenticate</span>
<span id="cb14-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.authentication <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TokenAuthentication</span>
<span id="cb14-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> api_view, authentication_classes, permission_classes</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> . <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> serializers </span>
<span id="cb14-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> Accountsapp.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MyAccount</span>
<span id="cb14-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.authtoken.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Token</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># user views</span></span>
<span id="cb14-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.http <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JsonResponse</span>
<span id="cb14-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.views.decorators.csrf <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csrf_exempt</span>
<span id="cb14-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rest_framework.parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JSONParser</span>
<span id="cb14-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.core.exceptions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ObjectDoesNotExist</span>
<span id="cb14-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb14-18"></span>
<span id="cb14-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># login {built-in django}</span></span>
<span id="cb14-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.auth <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> login </span>
<span id="cb14-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.auth.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> login_required</span>
<span id="cb14-22"></span>
<span id="cb14-23"></span>
<span id="cb14-24"></span>
<span id="cb14-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get all users</span></span>
<span id="cb14-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GET"</span>])</span>
<span id="cb14-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@csrf_exempt</span></span>
<span id="cb14-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@permission_classes</span>([IsAuthenticated,])</span>
<span id="cb14-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@authentication_classes</span>([TokenAuthentication])</span>
<span id="cb14-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_users(request):</span>
<span id="cb14-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb14-32">        user_profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount.objects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>() </span>
<span id="cb14-33">        serializer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializers.RegistrationSerializer(user_profile, many<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response( {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'USER_PROFILE'</span>:serializer.data}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> status.HTTP_200_OK)</span>
<span id="cb14-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> ObjectDoesNotExist:</span>
<span id="cb14-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Response'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You do not have authorization to access this page'</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_401_UNAUTHORIZED)</span>
<span id="cb14-37"></span>
<span id="cb14-38"></span>
<span id="cb14-39"></span>
<span id="cb14-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get given user</span></span>
<span id="cb14-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GET'</span>])</span>
<span id="cb14-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@csrf_exempt</span></span>
<span id="cb14-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@permission_classes</span>([IsAuthenticated,])</span>
<span id="cb14-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@authentication_classes</span>([TokenAuthentication])</span>
<span id="cb14-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_given_user(request, pk):</span>
<span id="cb14-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb14-47">        user_profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount.objects.get(pk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pk)</span>
<span id="cb14-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> ObjectDoesNotExist:</span>
<span id="cb14-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The requested object does not exist"</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_404_NOT_FOUND)</span>
<span id="cb14-50"></span>
<span id="cb14-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> request.method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GET'</span>:  </span>
<span id="cb14-52">        serializer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializers.RegistrationSerializer(user_profile)</span>
<span id="cb14-53">        token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Token.objects.get(user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user_profile).key</span>
<span id="cb14-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'given_user_profile'</span>: serializer.data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token'</span>:token})</span>
<span id="cb14-55">   </span>
<span id="cb14-56"></span>
<span id="cb14-57"></span>
<span id="cb14-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add user</span></span>
<span id="cb14-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@csrf_exempt</span></span>
<span id="cb14-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POST'</span>])</span>
<span id="cb14-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> user_add_view(request):</span>
<span id="cb14-62">        serializer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializers.RegistrationSerializer( data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>request.data)</span>
<span id="cb14-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> serializer.is_valid():</span>
<span id="cb14-64">            account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializer.save()</span>
<span id="cb14-65">            token, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Token.objects.get_or_create(user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>account)</span>
<span id="cb14-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response(serializer.data, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_201_CREATED,  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Authorization'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> token.key})</span>
<span id="cb14-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response(serializer.errors, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_400_BAD_REQUEST)</span>
<span id="cb14-68"></span>
<span id="cb14-69"></span>
<span id="cb14-70"></span>
<span id="cb14-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update user</span></span>
<span id="cb14-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PUT"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GET'</span>])</span>
<span id="cb14-73"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@csrf_exempt</span></span>
<span id="cb14-74"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@permission_classes</span>([IsAuthenticated,])</span>
<span id="cb14-75"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@authentication_classes</span>([TokenAuthentication])</span>
<span id="cb14-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_user(request, pk):</span>
<span id="cb14-77"></span>
<span id="cb14-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb14-79">        user_profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount.objects.get(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pk)</span>
<span id="cb14-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> ObjectDoesNotExist:</span>
<span id="cb14-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"given object does not exist"</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_404_NOT_FOUND)</span>
<span id="cb14-82"></span>
<span id="cb14-83">    user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.user</span>
<span id="cb14-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb14-85">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  {i:j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> request.query_params.items()}</span>
<span id="cb14-86">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(data)</span>
<span id="cb14-87">        serializer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializers.UpdateSerializer(user_profile, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span>
<span id="cb14-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> serializer.is_valid():</span>
<span id="cb14-89">            user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializer.save()</span>
<span id="cb14-90">            token, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Token.objects.get_or_create(user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user)</span>
<span id="cb14-91">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span> :serializer.data}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_201_CREATED,  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Authorization'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> token.key})</span>
<span id="cb14-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response(serializer.errors, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_400_BAD_REQUEST)</span>
<span id="cb14-93"></span>
<span id="cb14-94">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> ObjectDoesNotExist <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb14-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_404_NOT_FOUND)</span>
<span id="cb14-96">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb14-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Something terrible went wrong'</span>}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_500_INTERNAL_SERVER_ERROR)</span>
<span id="cb14-98"></span>
<span id="cb14-99"></span>
<span id="cb14-100"></span>
<span id="cb14-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete user</span></span>
<span id="cb14-102"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DELETE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GET'</span>]) </span>
<span id="cb14-103"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@csrf_exempt</span></span>
<span id="cb14-104"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@permission_classes</span>([IsAuthenticated])</span>
<span id="cb14-105"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@authentication_classes</span>([TokenAuthentication])</span>
<span id="cb14-106"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> delete_user(request, pk):</span>
<span id="cb14-107"></span>
<span id="cb14-108">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb14-109">        user_profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount.objects.get(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pk)</span>
<span id="cb14-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> ObjectDoesNotExist:</span>
<span id="cb14-111">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"given object does not exist"</span>}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_404_NOT_FOUND)</span>
<span id="cb14-112"></span>
<span id="cb14-113">    user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.user</span>
<span id="cb14-114">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> user_profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> user: </span>
<span id="cb14-115">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You don't have permission to delete the record."</span>}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_401_UNAUTHORIZED)</span>
<span id="cb14-116"></span>
<span id="cb14-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb14-118">        user_profile.delete()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#retuns 1 or 0</span></span>
<span id="cb14-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_delete'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"record deleted"</span>}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_200_OK)</span>
<span id="cb14-120">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> ObjectDoesNotExist <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb14-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_404_NOT_FOUND)</span>
<span id="cb14-122">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb14-123">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> JsonResponse({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Something terrible went wrong'</span>}, safe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_500_INTERNAL_SERVER_ERROR)</span>
<span id="cb14-124"></span>
<span id="cb14-125"></span>
<span id="cb14-126"></span>
<span id="cb14-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># login view and get token</span></span>
<span id="cb14-128"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POST"</span>, ])</span>
<span id="cb14-129"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> drflogin(request):</span>
<span id="cb14-130"></span>
<span id="cb14-131">    email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>)</span>
<span id="cb14-132">    username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>)</span>
<span id="cb14-133">    password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>)</span>
<span id="cb14-134">    account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyAccount.objects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(email<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>email) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> MyAccount.objects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username)</span>
<span id="cb14-135">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> account:</span>
<span id="cb14-136">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Login failed"</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>status.HTTP_401_UNAUTHORIZED)</span>
<span id="cb14-137">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># authenticate(email=email, password=password)  # returns none if not authenticated</span></span>
<span id="cb14-138">    account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> authenticate(email<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>account[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].email, password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password)</span>
<span id="cb14-139">    token, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Token.objects.get_or_create(user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>account)</span>
<span id="cb14-140">    login(request,account)  </span>
<span id="cb14-141">    renderer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully authenticated"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk"</span>: account.pk, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>: account.username, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span>: token.key }, template_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accountsapp/loginuser.html"</span>, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Authorization'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> token.key})</span>
<span id="cb14-142">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> renderer</span></code></pre></div>
<p>Setup end points for our API</p>
<p>In <code>views.py</code></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.urls <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> path, include</span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> . <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> views <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> drf_views</span>
<span id="cb15-4"></span>
<span id="cb15-5"></span>
<span id="cb15-6">app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accountsapp'</span></span>
<span id="cb15-7"></span>
<span id="cb15-8">urlpatterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb15-9"></span>
<span id="cb15-10">    path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_users/'</span>, drf_views.get_users, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_users'</span>),</span>
<span id="cb15-11">    path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_user/&lt;int:pk&gt;/'</span>, drf_views.get_given_user, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_get_user'</span>),</span>
<span id="cb15-12">    path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_updateuser/&lt;int:pk&gt;/'</span>, drf_views.update_user, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_updateusers'</span>),</span>
<span id="cb15-13">    path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_deleteuser/&lt;int:pk&gt;/'</span>, drf_views.delete_user, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_deleteuser'</span>),</span>
<span id="cb15-14">    path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_adduser/'</span>, drf_views.user_add_view, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_adduser'</span>),</span>
<span id="cb15-15">    path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_login/'</span>, drf_views.drflogin, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drf_login'</span>),</span>
<span id="cb15-16"></span>
<span id="cb15-17">    </span>
<span id="cb15-18">]</span></code></pre></div>
<p>We first create users and then test delete, update and show users functionality of our API. We will use Postman for timebeing. Later we will built the front-end to perform all these actions.</p>
</section>
<section id="post-request-add-user" class="level2">
<h2 class="anchored" data-anchor-id="post-request-add-user"><span style="color:orange"> POST </span> REQUEST: <strong>ADD USER</strong></h2>
<pre><code>http://127.0.0.1:8000/drf_adduser/</code></pre>
<p><img src="https://i.imgur.com/Ea8W3Bj.png" class="img-fluid"></p>
</section>
<section id="get-request-get-users" class="level2">
<h2 class="anchored" data-anchor-id="get-request-get-users"><span style="color:green"> GET </span> REQUEST: <strong>GET USERS</strong></h2>
<p>API end point</p>
<pre><code>http://127.0.0.1:8000/drf_users/</code></pre>
<p>Using curl and passing authorization token</p>
<pre><code>curl --location --request GET 'http://127.0.0.1:8000/drf_users/' \
--header 'Authorization: Token 92cc8c32edb7bd111b89552a3031f918d2df5613'</code></pre>
<p>Using postman</p>
<p><img src="https://i.imgur.com/dPnv4J4.png" class="img-fluid"></p>
</section>
<section id="del-request-delete-user" class="level2">
<h2 class="anchored" data-anchor-id="del-request-delete-user"><span style="color:RED"> DEL </span> REQUEST: <strong>DELETE USER</strong></h2>
<p>API end point</p>
<pre><code>http://127.0.0.1:8000/drf_deleteuser/&lt;int:pk&gt;</code></pre>
<p>Using curl and passing authorization token</p>
<pre><code>curl --location --request DELETE 'http://127.0.0.1:8000/drf_deleteuser/21' \
--header 'Authorization: Token 1529e77c59999f819649828a5e9174ba44bd6bb4'</code></pre>
<p>Using postman</p>
<p><img src="https://i.imgur.com/6IFah1s.png" class="img-fluid"></p>
</section>
<section id="put-request-update-user" class="level2">
<h2 class="anchored" data-anchor-id="put-request-update-user"><span style="color:dodgerblue"> PUT </span> REQUEST: <strong>UPDATE USER</strong></h2>
<p>API end point</p>
<pre><code>http://127.0.0.1:8000/drf_updateuser/1/?username=updated_username_here&amp;email=updated_email_here</code></pre>
<p>Using curl and passing authorization token</p>
<pre><code>curl --location --request PUT 'http://127.0.0.1:8000/drf_updateuser/8/?username=rcbfl&amp;email=rcbfl@gmail.com' \
--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'</code></pre>
<p>using postman <img src="https://i.imgur.com/LhVZ34L.png" class="img-fluid"></p>
</section>
<section id="get-request-get-user" class="level2">
<h2 class="anchored" data-anchor-id="get-request-get-user"><span style="color:green"> GET </span> REQUEST: <strong>GET USER</strong></h2>
<p>API end point</p>
<pre><code>http://127.0.0.1:8000/drf_user/&lt;int:pk&gt;</code></pre>
<p>Using curl and passing authorization token</p>
<pre><code>curl --location --request GET 'http://127.0.0.1:8000/drf_user/8' \
--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'</code></pre>
<p>using postman</p>
<p><img src="https://i.imgur.com/LiPdZIe.png" class="img-fluid"></p>
</section>
<section id="front-end-setup" class="level2">
<h2 class="anchored" data-anchor-id="front-end-setup">Front end setup</h2>
<p>In root directory create folder <code>templates\Accountsapp\</code> and create <code>RegiserUser.html</code> file in it. Create form field in the file as follows</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb25-1">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">form</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-horizontal"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> action</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> method</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">  id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myForm"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> autocomplete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-2">            {% csrf_token %}</span>
<span id="cb25-3">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- Name input--&gt;</span></span>
<span id="cb25-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-5">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-3 control-label"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Name<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-6">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-9"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-7">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> placeholder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your username"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-control"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-8">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-10">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- Email input--&gt;</span></span>
<span id="cb25-11">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-12">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-3 control-label"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Your E-mail<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-13">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-9"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-14">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> placeholder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your email"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-control"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-15">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- password body --&gt;</span></span>
<span id="cb25-18">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-19">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-3 control-label"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Password<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-20">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-9"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-21">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> placeholder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your password"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-control"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-22">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-23">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- password body --&gt;</span></span>
<span id="cb25-25">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-26">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-3 control-label"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password2"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Password2<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-27">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-9"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-28">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password2"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password2"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> placeholder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"confirm password"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-control"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-29">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-30">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-31">            </span>
<span id="cb25-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- superuser input --&gt;</span></span>
<span id="cb25-33">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-34">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-3 control-label"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superuser"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Is superuser<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-35">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-3"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-36">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"issuperuser"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"issuperuser"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checkbox"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">  class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-control"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-37">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-38">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-39"> </span>
<span id="cb25-40">    </span>
<span id="cb25-41">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- Form actions --&gt;</span></span>
<span id="cb25-42">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-43">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-md-6 text-left"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-44">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submit"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn btn-primary btn-lg"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Submit<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-45">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-46"></span>
<span id="cb25-47"></span>
<span id="cb25-48">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-49">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fieldset</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-50">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">form</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Once the form is created, we now need to take the input from the form and send to the register user API <code>drf_adduser/</code>.</p>
<p>In <code>RegisterUser.html</code></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb26-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/javascript"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb26-2"></span>
<span id="cb26-3"></span>
<span id="cb26-4">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getCookie</span>(name) {</span>
<span id="cb26-5">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> cookieValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cookie</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cookie</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) {</span>
<span id="cb26-7">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> cookies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cookie</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cookies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb26-9">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> cookie <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cookies[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trim</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-10">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Does this cookie string begin with the name we want?</span></span>
<span id="cb26-11">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (cookie<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substring</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> (name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'='</span>)) {</span>
<span id="cb26-12">                        cookieValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">decodeURIComponent</span>(cookie<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substring</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-13">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-14">                    }</span>
<span id="cb26-15">                }</span>
<span id="cb26-16">            }</span>
<span id="cb26-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cookieValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-18">        }</span>
<span id="cb26-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> csrftoken <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getCookie</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csrftoken'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-20"></span>
<span id="cb26-21"></span>
<span id="cb26-22"></span>
<span id="cb26-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetchcall</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">event</span>) {</span>
<span id="cb26-24"></span>
<span id="cb26-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">event</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preventDefault</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'form submitted'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> password2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password2"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> issuperuser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issuperuser'</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">checked</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(issuperuser)</span>
<span id="cb26-33"></span>
<span id="cb26-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/drf_adduser/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-35"></span>
<span id="cb26-36">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {</span>
<span id="cb26-37">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">method</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POST'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-38">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">headers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>{</span>
<span id="cb26-39">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Content-type'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-40">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-CSRFToken'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>csrftoken<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-41">                }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-42">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">body</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">JSON</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stringify</span>({</span>
<span id="cb26-43">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'email'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>email<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-44">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-45">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-46">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>password2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-47">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_superuser"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> issuperuser</span>
<span id="cb26-48">                })</span>
<span id="cb26-49">            }</span>
<span id="cb26-50">            )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(response){</span>
<span id="cb26-51">                store_response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-52">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-53"></span>
<span id="cb26-54">            })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data){</span>
<span id="cb26-55">                store_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">JSON</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stringify</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-56">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  store_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-57">            })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">catch</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(error){</span>
<span id="cb26-58">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span>(error)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-59">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-60"></span>
<span id="cb26-61">    }</span>
<span id="cb26-62">            </span>
<span id="cb26-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> myForm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myForm"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-64"></span>
<span id="cb26-65">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> myForm)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-66">    myForm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'submit'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fetchcall)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-67">    </span>
<span id="cb26-68"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>To make this work in front-end, we need to register the file to <code>Accountsapp/views.py</code></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> register_user(request):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if request.user.is_authenticated:</span></span>
<span id="cb27-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> render(request, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accountsapp/RegisterUser.html"</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Register new user"</span>})</span></code></pre></div>


</section>

 ]]></description>
  <category>Django</category>
  <guid>https://amanbagrecha.github.io/posts/2021-crud-in-django-rest-framework/</guid>
  <pubDate>Sun, 01 Jan 2023 18:30:00 GMT</pubDate>
</item>
<item>
  <title>How hard can it be to create 30 Maps?</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2022-12-21-how-hard-can-it-be-to-create-30-maps/</link>
  <description><![CDATA[ 




<p>I participated in the <a href="https://twitter.com/search?q=%2330DayMapChallenge&amp;src=typeahead_click">#30DayMapChallenge</a> for the first time. I found the experience to be both challenging and rewarding wherein I was able to create a variety of maps using different techniques and tools. I got to use felt, blender, kepler, python and QGIS for my maps.</p>
<p>Though I did not complete all of them, I realised how vital and hard it is to effectively communicate information through maps and how to use maps to make informed decisions. Hope to complete all 30 next year. Compiled all my maps for the year 2022 below -</p>
<p>Read more about the challenge <a href="https://30daymapchallenge.com/">here</a></p>
<p>Day1: <a href="https://twitter.com/aman_bagrecha/status/1587517568197480448">Points</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/208978036-69dbbc2c-0edd-4933-bf59-d2cfba3fa7a1.png" class="img-fluid figure-img"></p>
<figcaption>day1-points</figcaption>
</figure>
</div>
<p>Day2: <a href="https://twitter.com/aman_bagrecha/status/1587837563150028800">Lines</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/208978064-800324d6-b53f-4769-870f-1f3069e8e808.png" class="img-fluid figure-img"></p>
<figcaption>day2-lines</figcaption>
</figure>
</div>
<p>Day3: <a href="https://twitter.com/aman_bagrecha/status/1588268637038661633">Polygons</a> <img src="https://user-images.githubusercontent.com/76432265/208979145-f943c337-1306-4720-8b95-22ccd8f7917d.png" class="img-fluid" alt="day3-polygon"></p>
<p>Day4: <a href="https://twitter.com/aman_bagrecha/status/1588610806077599744">Colour Friday: Green</a> <img src="https://user-images.githubusercontent.com/76432265/208979100-a31db1ca-47be-46ee-a2e0-35d5b9be07da.jpg" class="img-fluid" alt="day4-greenday"></p>
<p>Day5: <a href="https://twitter.com/aman_bagrecha/status/1588961594414927873">Ukraine</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/208979052-05237f71-549f-4279-a733-2347af076160.jpeg" class="img-fluid figure-img"></p>
<figcaption>day5-ukraine</figcaption>
</figure>
</div>
<p>Day6: <a href="https://twitter.com/aman_bagrecha/status/1589194185642762240">Network</a> <img src="https://user-images.githubusercontent.com/76432265/208979247-34f780d5-7e39-4650-8ccf-9026f85eb458.jpeg" class="img-fluid" alt="day6-network"></p>
<p>Day7: <a href="https://twitter.com/aman_bagrecha/status/1589677794841489408">Raster</a> <img src="https://user-images.githubusercontent.com/76432265/208979297-933d9403-053e-492a-9e6c-cedd16adbbe0.jpeg" class="img-fluid" alt="day7-raster"></p>
<p>Day8: <a href="https://twitter.com/aman_bagrecha/status/1590047409337692161">Data: OpenStreetMap</a> <img src="https://user-images.githubusercontent.com/76432265/208979342-94f48a98-a7bb-4ef2-ac19-e6e660b79f8a.jpeg" class="img-fluid" alt="day8-osm"></p>
<p>Day10: <a href="https://twitter.com/aman_bagrecha/status/1590766714782126080">A bad map</a> <img src="https://user-images.githubusercontent.com/76432265/208979386-62a6ac59-4c9a-4cbe-8eea-adfdebe7f207.jpeg" class="img-fluid" alt="day10-badmap"></p>
<p>Day11: <a href="https://twitter.com/aman_bagrecha/status/1591145003061239809">Colour Friday: Red</a> <img src="https://user-images.githubusercontent.com/76432265/208979429-f2ddf0cd-2f9b-4f78-8e38-75143b487081.jpeg" class="img-fluid" alt="day11-red"></p>
<p>Day12: <a href="https://twitter.com/aman_bagrecha/status/1591503001671602177">Scale</a> <img src="https://user-images.githubusercontent.com/76432265/208979708-2ef22e06-76ac-4a3f-a603-c7901ebd2186.jpg" class="img-fluid" alt="day12-scale"></p>
<p>Day13: <a href="https://twitter.com/aman_bagrecha/status/1591847798609436672">5 minute map</a> <img src="https://user-images.githubusercontent.com/119618422/208980231-2689d22d-3e83-42af-9f7d-4b9ed49e8b6e.png" class="img-fluid" alt="image"> Day14: <a href="https://twitter.com/aman_bagrecha/status/1592231783864860672">Hexagons</a> <img src="https://user-images.githubusercontent.com/119618422/208980692-37a90bf0-c82e-45a6-b765-f248a6af40fb.jpeg" class="img-fluid" alt="day14-hex"> Day16: <a href="https://twitter.com/aman_bagrecha/status/1592953349523271680">Minimal</a> <img src="https://user-images.githubusercontent.com/76432265/208980908-7eb66d2f-6f01-4681-880a-99a31d56051d.png" class="img-fluid" alt="day16-ss"></p>
<p>Day21: <a href="https://twitter.com/aman_bagrecha/status/1594746083330379776">Data: Kontur Population Dataset</a> <img src="https://user-images.githubusercontent.com/76432265/208980823-154fcbfb-e02d-42e6-a466-977f26a4142c.jpeg" class="img-fluid" alt="day21-image"></p>
<p>Day23: <a href="https://twitter.com/aman_bagrecha/status/1595495715983089664">Movement</a> <img src="https://user-images.githubusercontent.com/76432265/208981041-f0d338e3-aa31-4a45-9f72-646e24950eae.gif" class="img-fluid" alt="day23-gif"></p>
<p>Day25: <a href="https://twitter.com/aman_bagrecha/status/1596213863266996225">Two Colors</a> <img src="https://user-images.githubusercontent.com/76432265/208981134-c2fd8ed9-9769-4612-8db7-167d07b61697.jpeg" class="img-fluid" alt="day25-map"></p>
<p>The data I used for this challenge is archived on <a href="https://github.com/amanbagrecha/30DayMapChallenge">GitHub</a></p>



 ]]></description>
  <category>QGIS</category>
  <guid>https://amanbagrecha.github.io/posts/2022-12-21-how-hard-can-it-be-to-create-30-maps/</guid>
  <pubDate>Tue, 20 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2022-12-21-how-hard-can-it-be-to-create-30-maps/featured.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Import CSV and OSM data into PostgreSQL using ogr2ogr</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2022-09-18-import-csv-and-osm-data-into-postgresql-using-ogr2ogr/</link>
  <description><![CDATA[ 




<p><a href="https://gdal.org/programs/ogr2ogr.html">ogr2ogr</a> is the swiss knife for vector geometry conversion. You can import CSV with latitude and longitude columns as Point geometry into PostgreSQL. This tool also makes it easy to import OSM data to be imported into PostgreSQL with a lot of flexibility.</p>
<section id="insert-csv-to-postgresql" class="level2">
<h2 class="anchored" data-anchor-id="insert-csv-to-postgresql">1. Insert CSV to PostgreSQL</h2>
<p>Our CSV contains information about retail food stores including cafes, restaurants, grocery information with the location and name. Download the data <a href="https://github.com/amanbagrecha/amanbagrecha.github.io/files/9592312/filter_all_cat_data.csv">here</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/190896961-cc985bf1-0b5b-4665-b53a-bcb9eadf50eb.png" class="img-fluid figure-img"></p>
<figcaption>image</figcaption>
</figure>
</div>
<p>We first read the metadata of the CSV using ogrinfo</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ogrinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-so</span> filter_all_cat_data.csv filter_all_cat_data</span></code></pre></div>
<p>Assuming you have a database already (<code>postgres</code> here), we run the following command to create <code>postgis</code> extension for <code>postgres</code> database. The connection string is of the format as described <a href="https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING">here</a></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">psql</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create extension postgis;"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql://postgres:1234@localhost:5432/postgres"</span></span></code></pre></div>
<p>Finally, we insert the CSV into PostgreSQL table named <strong>cat_data_copy</strong> and assign CRS of EPSG:4326.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ogr2ogr</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> PostgreSQL PG:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"host=localhost user=postgres dbname=postgres password=1234"</span> filter_all_cat_data.csv <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-oo</span> X_POSSIBLE_NAMES=long_url <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-oo</span> Y_POSSIBLE_NAMES=lat_url <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-nlt</span> POINT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-nln</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat_data_copy"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sql</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select name,city,lat_url,long_url,type from filter_all_cat_data"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a_srs</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:4326”</span></span></code></pre></div>
<p>The following explains few of the flags</p>
<ul>
<li><p><code>-oo</code>: <code>X_POSSIBLE_NAMES</code> and <code>Y_POSSIBLE_NAMES</code> allows us to specify geometry columns from CSV</p></li>
<li><p><code>-nlt</code>: Define the geometry type for the table</p></li>
<li><p><code>-nln</code>: alternate Table name (defaults to name of the file)</p></li>
<li><p><code>-sql</code>: write SQL to insert only selected columns into the table</p></li>
</ul>
<hr>
</section>
<section id="insert-osm-data-to-postgresql" class="level2">
<h2 class="anchored" data-anchor-id="insert-osm-data-to-postgresql">2. Insert OSM data to PostgreSQL</h2>
<p>Our OSM data is of Bahamas downloaded from geofabrik. You can download it from <a href="https://download.geofabrik.de/central-america/bahamas-latest.osm.pbf">here</a></p>
<p>We first read the metadata of the OSM data using ogrinfo</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ogrinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-so</span> bahamas-latest.osm.pbf multipolygons</span></code></pre></div>
<p>We find about the geometry column, CRS and columns in the data. This will be used when inserting the data into the database.</p>
<p>Next we create postgis and hstore extensions in our <code>postgres</code> database.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">psql</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create extension hstore; create extension postgis"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql://postgres:1234@localhost:5432/postgres"</span></span></code></pre></div>
<p>Finally we insert the data into PostgreSQL with table name as <strong>bahamas_mpoly</strong> with only multipolygons. We convert the <code>other_tags</code> column into <code>hstore</code> and insert only those rows where the <code>name</code> column does not contain a null value. We also clip our data to a bounding box and promote our polygons to multipolygons to avoid error.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ogr2ogr</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> PostgreSQL PG:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbname=postgres host=localhost port=5432 user=postgres password=1234"</span> bahamas-latest.osm.pbf multipolygons <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-nln</span> bahamas_mpoly <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lco</span> COLUMN_TYPES=other_tags=hstore <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-overwrite</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-skipfailures</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-where</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name is not null"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-clipsrc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-78</span> 23 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-73</span> 27 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-nlt</span> PROMOTE_TO_MULTI</span></code></pre></div>
<hr>
<section id="video-version-of-the-blog-can-be-found-here" class="level4">
<h4 class="anchored" data-anchor-id="video-version-of-the-blog-can-be-found-here">Video version of the blog can be found <a href="https://youtu.be/87liLpASYPI">here</a></h4>


</section>
</section>

 ]]></description>
  <guid>https://amanbagrecha.github.io/posts/2022-09-18-import-csv-and-osm-data-into-postgresql-using-ogr2ogr/</guid>
  <pubDate>Sat, 17 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2022-09-18-import-csv-and-osm-data-into-postgresql-using-ogr2ogr/featured.png" medium="image" type="image/png" height="55" width="144"/>
</item>
<item>
  <title>Merging Rasters using Rasterio</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2022-07-31-merge-rasters-the-modern-way-using-python/</link>
  <description><![CDATA[ 




<p>In this blog, we’ll examine how to merge or mosaic rasters using Python, the modern way. Additionally, we would look at a few nuances and internal workings of rasterio’s merge functionality along with saving your rasters in-memory.</p>
<p>By “modern way”, it is implied that you have an improved workflow and data management. And that you can experiment with various scenarios quickly and efficiently.</p>
<p>The traditional way to mosaic data is by downloading multiple intersecting tileset in its entirety. Downloading an entire tileset is itself a cost prohibitive task, added to already lost time in searching desired satellite imagery on GUI.</p>
<p>To overcome these traditional challenges, there has been significant improvement in storing metadata of satellite imagery (namely <a href="https://stacspec.org/en">STAC</a>) which has enabled querying them much smoother and made it imagery-provider agnostic.</p>
<section id="tldr" class="level3">
<h3 class="anchored" data-anchor-id="tldr">TL;DR</h3>
<p>We would perform the following task in this blog — - Use pystac to query items over our AOI - Plot the tiles on map using hvplot - Merge tiles without data download on local machine - Save the merged tile in-memory using rasterio’s MemoryFile - Internals of rasterio’s merge methods</p>
<hr>
</section>
<section id="problem-at-hand" class="level3">
<h3 class="anchored" data-anchor-id="problem-at-hand">Problem at hand</h3>
<p>I wish to access sentinel-2 True Color Image for the month of January over my area of interest (AOI), which is a highway network across Karnataka and Andhra Pradesh (Figure 1).</p>
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/183255775-352d47fb-515c-4d72-ba4e-e32ac5bebf42.png" class="img-fluid figure-img"></p>
<figcaption>bokeh_plot</figcaption>
</figure>
</div>
<figcaption align="center">
<b><i>Fig.1 - Highway Network as our Region of Interest&lt;/ href&gt; </i></b>
</figcaption>
</figure>
<p>We start by fetching sentinel-2 tiles over our AOI from <code>sentinel-s2-l2a-cogs</code> STAC catalog using <a href="https://github.com/stac-utils/pystac-client">pystac-client</a>. This library allows us to crawl STAC catalog and enables rapid access to the metadata we need.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STAC API root URL</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Thanks to element84 for hosting the API for sentinel-2 catalog.</span></span>
<span id="cb1-3">URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://earth-search.aws.element84.com/v0/'</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(URL)</span>
<span id="cb1-6"></span>
<span id="cb1-7">search <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.search(</span>
<span id="cb1-8">    max_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb1-9">    collections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentinel-s2-l2a-cogs"</span>,</span>
<span id="cb1-10">    bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.total_bounds, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geodataframe for our region of study</span></span>
<span id="cb1-11">    datetime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-01/2022-01-24'</span></span>
<span id="cb1-12">)</span></code></pre></div>
<p>In the above code, we search for 10 sentinel-s2-l2a-cogs over our AOI for the date between January 1 and 24 of 2022.</p>
<p>Now we need to know which of our 10 queried images covers our area of interest in its entirety. To do that, we can plot all the search results on the map and visually inspect.</p>
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/183255939-121e585e-79dc-4ceb-b61e-7e08709de926.png" class="img-fluid figure-img"></p>
<figcaption>bokeh_plot</figcaption>
</figure>
</div>
<figcaption align="center">
<b><i>Fig.2 - Sentinel-2 tiles overlaid on Region of Interest&lt;/ href&gt; </i></b>
</figcaption>
</figure>
<p>We see that our AOI is not covered by a single tile in entirety, and that there is a need to merge adjacent tiles.</p>
<blockquote class="blockquote">
<p>Note that we have so far only queried the metadata of our desired imagery</p>
</blockquote>
<p>We use rasterio’s <a href="https://rasterio.readthedocs.io/en/latest/api/rasterio.merge.html">merge</a> functionality, which would enable us to combine all of them seamlessly.</p>
<p>First, we get all the tiles for a single day and look for True Color Image (TCI) band</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retrieve the items as dictionaries, rather than Item objects</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">items</span> = list<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search.items_as_dicts()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert found items to a GeoDataFrame</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">items_gdf</span> = items_to_geodataframe<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tiles_single_day</span> = items_gdf.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-23'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets.visual.href"</span>]</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(tiles_single_day)</span></span>
<span id="cb2-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">properties.datetime</span></span>
<span id="cb2-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2022-01-23</span> 05:25:14+00:00    https://sentinel-cogs.s3.us-west-2.amazonaws.c...</span>
<span id="cb2-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2022-01-23</span> 05:25:11+00:00    https://sentinel-cogs.s3.us-west-2.amazonaws.c...</span>
<span id="cb2-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2022-01-23</span> 05:24:59+00:00    https://sentinel-cogs.s3.us-west-2.amazonaws.c...</span>
<span id="cb2-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2022-01-23</span> 05:24:56+00:00    https://sentinel-cogs.s3.us-west-2.amazonaws.c...</span>
<span id="cb2-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name:</span> assets.visual.href, dtype: object</span></code></pre></div>
<p>Next, read the remote files via the URL in the above output using <code>rasterio.open</code> and save the returned file handlers as a list. This is the first instance where we are dealing with the actual imagery. Although, we are not reading the values stored in the data just yet.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open images stored on s3</span></span>
<span id="cb3-2">file_handler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rasterio.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(row) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tiles_single_day]</span></code></pre></div>
<p>Finally we can merge all of the tiles and get the clipped raster stored in memory.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rasterio.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MemoryFile</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rasterio.merge <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> merge</span>
<span id="cb4-3"></span>
<span id="cb4-4">memfile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MemoryFile()</span>
<span id="cb4-5"></span>
<span id="cb4-6">merge(datasets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>file_handler, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of dataset objects opened in 'r' mode</span></span>
<span id="cb4-7">    bounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(gdf.set_crs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:4326"</span>).to_crs(file_handler[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].crs).total_bounds), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tuple</span></span>
<span id="cb4-8">    nodata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># float</span></span>
<span id="cb4-9">    dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint16'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dtype</span></span>
<span id="cb4-10">    resampling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resampling.nearest,</span>
<span id="cb4-11">    method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># strategy to combine overlapping rasters</span></span>
<span id="cb4-12">    dst_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>memfile.name, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># str or PathLike to save raster</span></span>
<span id="cb4-13">    dst_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blockysize'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blockxsize'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary</span></span>
<span id="cb4-14">  )</span></code></pre></div>
<p>There are really interesting things to look at in the above code. Overall, the code above returns a <code>MemoryFile</code> object which contains a <code>uint16</code> raster with bounds of our AOI and blocksize of 512. The attribute <code>dst_path</code> allows us to specify a path to save the output as a raster. What is interesting is we can not only pass a file path to save on local disk but also a virtual path and save the merged raster <strong>in-memory</strong>, avoiding clutter of additional files on disk.</p>
<p>To define a virtual path, we use rasterio’s <code>MemoryFile</code> class. When we create a <code>MemoryFile</code> object, it has a <code>name</code> attribute which gives us a virtual path, thus treating it as a real file (using GDALs <a href="https://gdal.org/user/virtual_file_systems.html#vsimem-in-memory-files">vsimem</a> internally). This MemoryFile object (<code>memfile</code> here) provides us all the methods and attributes of rasterio’s file handler, which is extremely helpful.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(memfile.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>().profile)</span>
<span id="cb5-2"></span>
<span id="cb5-3">{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'driver'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GTiff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dtype'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint16'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodata'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4110</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3211</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'crs'</span>: CRS.from_epsg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32643</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transform'</span>: Affine(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">788693.4700669964</span>,</span>
<span id="cb5-4">       <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500674.3670768766</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blockxsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blockysize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tiled'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'compress'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'deflate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interleave'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pixel'</span>}</span></code></pre></div>
<p>The <code>method='first'</code> tells us the strategy used to determine the value of the pixel where the rasters overlap. In this case, the pixel value from the first imagery of the overlapping region in the list, is used as the value for the output raster.</p>
<p>The entire algorithm to merge rasters is illustrated in the figure below by taking an example of combining two rasters with <code>method=first</code>.</p>
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/183279200-05b96cd5-f0a7-48e0-9b37-480792756d16.jpg" class="img-fluid figure-img"></p>
<figcaption>merge-rasterio-with-laberl_merging-rasters</figcaption>
</figure>
</div>
<figcaption align="center">
<b><i>Fig.3 - Internal working of rasterio’s merge functionality. src1 and src2 are two overlapping raster.&lt;/ href&gt; </i></b>
</figcaption>
</figure>
<p>From the above figure, for each raster in the list: - it finds the intersection with the <strong>Output Bounds</strong> (named <code>region</code> in the figure)</p>
<ul>
<li><p>next, it gets a boolean mask of invaild pixel over the <code>region</code> (named <code>region_mask</code> in the figure).</p></li>
<li><p>next, it copies over all the existing values from the raster for the <code>region</code> to an array (named <code>temp</code> in the figure)</p></li>
<li><p>It gets a boolean mask for the valid pixels in the <code>temp</code> array. (named <code>temp_mask</code> in the figure)</p></li>
<li><p>With these four arrays, it runs the <code>method=first</code>, which is to</p>
<ul>
<li>create the same shaped array as that of <code>region</code> and fill values with negation of <code>region_mask</code> (named <code>A</code> in the figure)</li>
<li>create a filter by combining <code>region_mask</code> and <code>A</code> with a AND gate (named <code>B</code> in the figure)</li>
<li>copy over the values from <code>temp</code> to <code>region</code> using <code>B</code> as the filter</li>
</ul></li>
</ul>
<p>These series of steps are performed for all the rasters in the list. Finally, the output at the end of each iteration is combined to produce <code>dest</code> raster.</p>
<blockquote class="blockquote">
<p>Notice the dark strip bands for each array which represents the overlapping region. Also notice that values from the dark strip in step <strong><code>1</code></strong> did not change at the end of step <strong><code>2</code></strong></p>
</blockquote>
<hr>
</section>
<section id="custom-combining-strategy-for-overlapping-regions" class="level3">
<h3 class="anchored" data-anchor-id="custom-combining-strategy-for-overlapping-regions">Custom combining strategy for overlapping regions</h3>
<p>We can have arbitrary conditions on how to combine the overlapping region. By default rasterio uses values of the first overlapping raster from the list of Input files as pixel values for the output raster file. It has several other options in its utility such as <code>min</code>, <code>max</code>, <code>sum</code>, <code>count</code>, <code>last</code>.</p>
<p>To define our custom method, say in this case, I want to take the average of all the pixel values over my overlapping region and copy them to the output file. To do that, we can override the method by defining our custom method. Let us see how —</p>
<p>We take a look at the source code of built-in methods which make use of two or more rasters to make decisions on the output pixel values. Few such methods which do that are <code>copy_sum</code>, <code>copy_min</code>, <code>copy_max</code>, <code>copy_count</code>.</p>
<p>Looking at the <a href="https://github.com/rasterio/rasterio/blob/main/rasterio/merge.py#L40">copy_min</a> from source code, we see that it performs two logical operations each before and after the custom logic we wish to apply.</p>
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/76432265/183279064-f2437364-b4bd-4761-8b99-2aa3bc65bc42.png" class="img-fluid figure-img"></p>
<figcaption>image</figcaption>
</figure>
</div>
<figcaption align="center">
<b><i>Fig.4 - copy_min function copies minimum value from overlapping region to the output raster&lt;/ href&gt; </i></b>
</figcaption>
</figure>
<p>We would replace our custom logic of averaging with that of <code>minimum</code> in the above code and that is all there is to it. We can now use this function to manipulate the values of overlapping region!</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> custom_method_avg(merged_data, new_data, merged_mask, new_mask, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the average value pixel."""</span></span>
<span id="cb6-3">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty_like(merged_mask, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bool"</span>)</span>
<span id="cb6-4">    np.logical_or(merged_mask, new_mask, out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask)</span>
<span id="cb6-5">    np.logical_not(mask, out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask)</span>
<span id="cb6-6">    np.nanmean([merged_data, new_data], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>merged_data, where<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask)</span>
<span id="cb6-7">    np.logical_not(new_mask, out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask)</span>
<span id="cb6-8">    np.logical_and(merged_mask, mask, out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask)</span>
<span id="cb6-9">    np.copyto(merged_data, new_data, where<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask, casting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unsafe"</span>)</span></code></pre></div>
<hr>
</section>
<section id="endnote" class="level3">
<h3 class="anchored" data-anchor-id="endnote">Endnote</h3>
<p>The modern approach to merge rasters in python is to only stream the data for your region of interest, process and perform analysis on the raster in memory. This would save you a huge cost and time. This is possible because of <a href="https://www.cogeo.org/">COGs</a> and <a href="https://stacspec.org/en">STAC</a>.</p>
<p>We looked at the merge method in depth and also explored the techniques used to combine the overlapping data. Finally, we created a custom method for merging rasters by modifying the existing code to suit our requirements. The code associated with this post can be found <a href="https://colab.research.google.com/drive/1iMYdNmAEr0JuKzPnDH0qC4rDsYkvwMk0?usp=sharing">here</a>.</p>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/2022-07-31-merge-rasters-the-modern-way-using-python/</guid>
  <pubDate>Sat, 06 Aug 2022 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2022-07-31-merge-rasters-the-modern-way-using-python/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Download MODIS data using CMR API in Python</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2022-07-28-download-modis-data-using-cmr-api-in-python/</link>
  <description><![CDATA[ 




<p>If you have ever used USGS Earth Explorer to download / explore data, you’d notice that the manual process is cumbersome and not scalable. That is why we require a programmatic way to download satellite data.</p>
<p>In this blog we’d see how to download MODIS data using Python. We use a Python package called <a href="https://github.com/fraymio/modis-tools">modis-tools</a> to perform our task. This package internally uses <a href="https://cmr.earthdata.nasa.gov/search/">NASA CMR</a> (Common Metadata Repository) API which lets us search and query catalogs of various satellite dataset including MODIS.</p>
<p>We focus on the MODIS dataset in this blog, but with little modification, we could extend for various other datasets.</p>
<p>Before you move ahead, make sure you have an earthdata account. We would require the username and password to download the data. Register <a href="https://urs.earthdata.nasa.gov/users/new">here</a> if not done so.</p>
<hr>
<p>To download the data we ask ourselves the following questions:</p>
<ol type="1">
<li>Which dataset specifically do I need? — Define <em>Dataset Name</em></li>
<li>What area do I need the data for? — Define our <em>Region of Interest</em></li>
<li>What time period of data do I require? — Define <em>Start and End Date</em></li>
</ol>
<p>Here, I wish to download MODIS Surface Reflectance 8-Day L3 Global 250 m SIN Grid data for Nigeria from 29 December, 2019 to 31st December, 2019.</p>
<p>Let us install and use the Python package <code>modis-tools</code> to download the data on our local machine by performing the following steps</p>
<ol type="1">
<li>Create a virtual environment.</li>
<li>Install the <code>modis-tools</code> package.</li>
<li>Write the code.</li>
</ol>
<section id="to-create-a-new-environment" class="level3">
<h3 class="anchored" data-anchor-id="to-create-a-new-environment">To create a new environment</h3>
<p>Create virtual environment <code>.modis-tools</code> using Python’s <code>venv</code></p>
<pre><code>aman@AMAN-JAIN:~$ python3 -m venv .modis-tools</code></pre>
<p>Activate the environment.</p>
<pre><code>aman@AMAN-JAIN:~$ source .modis-tools/bin/activate</code></pre>
<p><strong>Note</strong>: The above command is for linux. For Windows use .<code>modis-tools\Scripts\activate</code> instead.</p>
</section>
<section id="install-the-modis-tools-package" class="level3">
<h3 class="anchored" data-anchor-id="install-the-modis-tools-package">Install the modis-tools package</h3>
<pre><code>(.modis-tools) aman@AMAN-JAIN:~$ pip install modis-tools</code></pre>
</section>
<section id="insert-the-below-code" class="level3">
<h3 class="anchored" data-anchor-id="insert-the-below-code">Insert the below code</h3>
<p>Paste the code in a python file named <code>download.py</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download_modis.py</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) connect to earthdata</span></span>
<span id="cb4-4">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ModisSession(username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username, password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) Query the MODIS catalog for collections</span></span>
<span id="cb4-7">collection_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CollectionApi(session<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>session)</span>
<span id="cb4-8">collections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collection_client.query(short_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MOD09GQ"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"061"</span>)</span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Query the selected collection for granules</span></span>
<span id="cb4-10">granule_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GranuleApi.from_collection(collections[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], session<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>session)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3) Filter the selected granules via spatial and temporal parameters</span></span>
<span id="cb4-13">nigeria_bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1448863675</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.002583177</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.289420717</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.275061098</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format [x_min, y_min, x_max, y_max]</span></span>
<span id="cb4-14">nigeria_granules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> granule_client.query(start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-29"</span>, end_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-31"</span>, bounding_box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nigeria_bbox)</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4) Download the granules</span></span>
<span id="cb4-17">GranuleHandler.download_from_granules(nigeria_granules, session, threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>In the above code, change the <code>username</code>, <code>password</code>, <code>nigeria_box</code> and <code>start_date</code> &amp; <code>end_date</code> according to your requirements.</p>
<p>To explain the above code —</p>
<ul>
<li><p>First we create a session, which makes a connection to earthdata and registers a session. Next three lines we search for MODIS Surface Reflectance 8-Day L3 Global 250 m SIN Grid dataset using <code>short_name</code> and <code>version</code>.</p></li>
<li><p>Now we filter the region spatially and temporally we want our data to be downloaded. In this example, we filter for the nigeria region with a bounding box (<code>bounding_box</code>) and the two days of december of 2019 (<code>start_date</code>, <code>end_date</code>).</p></li>
<li><p>Lastly, we download the data (granules) using multithreading, since we asked to use all threads. (<code>threads=-1</code> is all threads).</p></li>
</ul>
</section>
<section id="how-to-get-short_name-and-version-for-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="how-to-get-short_name-and-version-for-the-dataset">How to get <code>short_name</code> and <code>version</code> for the dataset?</h3>
<p>The <a href="https://cmr.earthdata.nasa.gov/search/site/collections/">collection endpoint</a> of the CMR API contains a directory of all dataset catalogs hosted by various organizations with its short name and version number. For MODIS data, LPDAAC_ECS hosts and maintains it. Under the <code>/collections/directory</code> endpoint, look for <code>LPDAAC_ECS</code> and search for the MODIS dataset you want to download. Each dataset has a short name and version associated with it as shown in the picture below. In our case we found <code>MOD09Q1</code> short name with version <code>061</code>.</p>
<p><img src="https://i.imgur.com/x9aT290.png" class="img-fluid"></p>
<hr>
<p>Now it is time to run the code to see our data being downloaded.</p>
<p>In your terminal, run —</p>
<pre><code>(.modis-tools) aman@AMAN-JAIN:~$ python download_modis.py
Downloading: 100%|██████████████████████████████████████████████████████| 3/3 [00:10&lt;00:00,  3.67s/file]</code></pre>
<p>A progress bar would let you see the download progress and the files would be downloaded to your local disk. If you wish to download the data to a specific directory, use the path parameter in download_from_granules classmethod.</p>
<p>Endnote This short post on downloading MODIS data originated when I wanted to set up and deploy a pipeline. I did find other packages but they were quite old and did not use the state of the art specifications. Since the solution presented here uses CMR API, which has a very good documentation, I preferred it over other tools.</p>
<p>You can find the video version of this blog <a href="https://youtu.be/3K1yl79Mhow">here</a></p>
<hr>
</section>
<section id="for-the-curious-advanced" class="level3">
<h3 class="anchored" data-anchor-id="for-the-curious-advanced">For the curious (Advanced)</h3>
<p>The base url for the CMR API is —</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://cmr.earthdata.nasa.gov/search</span></span></code></pre></div>
<p>Internally, CMR API first finds the collection for our dataset —</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://cmr.earthdata.nasa.gov/search/collections.json?short_name=MOD09GQ</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>061</span></code></pre></div>
<p>After that the package queries the granules endpoint to find individual granules matching our query parameters —</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://cmr.earthdata.nasa.gov/search/granules.json?downloadable=true</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">scroll</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">page_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2000<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sort_key</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>-start_date<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">concept_id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>C1621091662-LPDAAC_ECS<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temporal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2019-12-01T00%3A00%3A00Z%2C2019-12-31T00%3A00%3A00Z<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bounding_box</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2.1448863675%2C3.002583177%2C4.289420717%2C4.275061098</span></code></pre></div>
<p>Note that most parameters are autogenerated by the python package depending on the <code>short_name</code> and <code>version</code> you provide (downloadable, scroll, page_size, sort_key, concept_id). The other parameters are user defined (temporal, bounding_box)</p>
<p>There are many more additional parameters which can be passed. A complete list is present in the <a href="https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html">documentation</a>. One such useful parameter that you can try out is <code>cloud_cover</code>. All you need to do is pass this parameter name with value to the <code>query</code> method in the above code.</p>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/2022-07-28-download-modis-data-using-cmr-api-in-python/</guid>
  <pubDate>Wed, 27 Jul 2022 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2022-07-28-download-modis-data-using-cmr-api-in-python/featured.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Download and preprocess NASA GPM IMERG Data using Python and wget</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/gpm-imerg-xarray/</link>
  <description><![CDATA[ 




<p>We are going to work with <a href="https://disc.gsfc.nasa.gov/datasets/GPM_3IMERGHHL_06/summary">GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree x 0.1 degree V06 (GPM_3IMERGHHL)</a> data provided by NASA which gives half-hourly precipitation values for entire globe.</p>
<section id="pre-requisites" class="level3">
<h3 class="anchored" data-anchor-id="pre-requisites">Pre-requisites</h3>
<ul>
<li>You must have an Earthdata Account</li>
<li>Link GES DISC with your account</li>
</ul>
<p>Refer to <a href="https://daac.gsfc.nasa.gov/earthdata-login">this</a> page on how to Link GES DISC to your account.</p>
<p><em>First method</em> - We would be downloading netCDF data using the <code>requests</code> module and preprocessing the file using <code>xarray</code>.</p>
<p><em>Second method</em> - To download netCDF file using wget and using <code>xarray</code> to preprocess and visualise the data.</p>
</section>
<section id="downloading-link-list" class="level3">
<h3 class="anchored" data-anchor-id="downloading-link-list">Downloading link list</h3>
<p>We first select the region for which we want to download the data by visiting the <a href="https://disc.gsfc.nasa.gov/datasets/GPM_3IMERGHHL_06/summary">GPM IMERG</a> website and clicking on <strong>subset/ Get Data</strong> link at right corner. <img src="https://i.imgur.com/3RH1ot2.png" class="img-fluid" alt="GPM IMERG GES DESC website"></p>
<p>In the popup, select 1. <strong>Download Method</strong> as <code>Get File Subsets using OPeNDAP</code> 2. <strong>Refine Date Range</strong> as the date you want the data for. In my case, I choose 10 days of data. 3. <strong>Refine Region</strong> to subset data for your area of interest. In my case I choose <code>77.45,12.85,77.75,13.10</code> 4. Under <strong>Variables</strong>, select <code>precipitationCal</code>. 5. For <strong>file format</strong>, we choose <code>netCDF</code> and click the <strong>Get Data</strong> button.</p>
<p><img src="https://i.imgur.com/xCp8Shs.png" class="img-fluid"></p>
<p>This will download a text file, containing all the links to download individual half hourly data for our area of interest in netCDF file format.</p>
<p>Now we move to Google Colaboratory, to download the data in netCDF file format. We use Google Colaboratory as it has many libraries pre-loaded and saves the hassle to install them.</p>
<p>If you’re area of interest (or) the timeframe of download is large, please use local machine as Google Colaboratory only offers ~60 GB of free storage.</p>
</section>
<section id="method-1-using-python-to-read-and-preprocess-the-data-inside-google-colaboratory." class="level3">
<h3 class="anchored" data-anchor-id="method-1-using-python-to-read-and-preprocess-the-data-inside-google-colaboratory.">Method 1: Using Python to read and preprocess the data inside Google Colaboratory.</h3>
<p>Open a new google Colab notebook and upload the downloaded text file. Our uploaded text file looks like the following.</p>
<p><img src="https://i.imgur.com/njlFhPT.png" class="img-fluid"></p>
<p>As one last requirement, NASA requires authentication to access the data and thus we have to create a <code>.netrc</code> file and save it at specified location (under <code>/root</code> dir in our case).</p>
</section>
<section id="creating-.netrc-file" class="level3">
<h3 class="anchored" data-anchor-id="creating-.netrc-file">Creating <code>.netrc</code> file</h3>
<p>Open your notepad and type in the following text. Make sure to replace <code>your_login_username</code> and <code>your_password</code> with your earthdata credentials. Now save it as <code>.netrc</code> file.</p>
<pre><code>machine urs.earthdata.nasa.gov login your_login_username password your_password</code></pre>
<p>Upload the <code>.netrc</code> file to Colab under <code>root</code> directory as shown in the figure below.</p>
<p><img src="https://i.imgur.com/oZLeJuY.png" class="img-fluid"></p>
<p>Now we have all the setup done and are ready to code.</p>
<p>We first load the required libraries. Then, read the text file and loop over every line in it to download from the URL using the <code>requests</code> module. Finally, we save the file to Colab’s hard drive. If you do not see the files after running code, make sure to wait for at least a day after registering to earthdata to make your account activated. I was late to read about it and had wasted a long time debugging it.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xarray <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xr</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests </span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataframe to read the text file which contains all the download links</span></span>
<span id="cb2-7">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/subset_GPM_3IMERGHH_06_20210611_142330.txt'</span>, header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not forget to add .netrc file in the root dir of Colab. printing `result` should return status code 200</span></span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds)): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skip first 2 rows as they contain metadata files</span></span>
<span id="cb2-11">  URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>]</span>
<span id="cb2-12">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(URL)</span>
<span id="cb2-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-14">    result.raise_for_status()</span>
<span id="cb2-15">    filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.nc'</span></span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-17">        f.write(result.content)</span>
<span id="cb2-18"></span>
<span id="cb2-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb2-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'requests.get() returned an error code '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(result.status_code))</span>
<span id="cb2-21"></span>
<span id="cb2-22">xr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.open_mfdataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test*.nc'</span>)</span>
<span id="cb2-23"></span>
<span id="cb2-24">xr_df.mean(dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lon'</span>]).to_dataframe().to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'results.csv'</span>)</span></code></pre></div>
<p>In the above snippet, what is interesting is the method <code>open_mfdataset</code> which takes in all the <code>netCDF</code> files and gives us a nice, compact output from which we can subset and further process our data. Here, we take the average of all the values (precipitation) and convert it into a new dataframe. We are ready to export it as CSV.</p>
</section>
<section id="method-2-using-wget-to-download-and-then-preprocess-using-xarray" class="level3">
<h3 class="anchored" data-anchor-id="method-2-using-wget-to-download-and-then-preprocess-using-xarray">Method 2: Using wget to download and then preprocess using xarray</h3>
<p>In this method, we download all the netCDF files using <code>wget</code>. These files are then read using xarray which makes it really easy to process and get the information we require.</p>
<p>Running the following shell command in Google Colab will download all the data from the text file URLs. Make sure to replace <code>your_user_name</code> , <code>&lt;url text file&gt;</code> within the command. It will ask for password of your earthdata account on running the cell.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--load-cookies</span> /.urs_cookies <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--save-cookies</span> /root/.urs_cookies <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--auth-no-challenge</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>on <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>your_user_name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ask-password</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--content-disposition</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>url text file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Once the above shell command is run on Colab, the following 2 lines of code will give a nice dataframe which can be exported to csv for further analysis.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xarray <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xr</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb4-3"></span>
<span id="cb4-4">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.open_mfdataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test*.nc'</span>)</span>
<span id="cb4-5">ds.precipitationCal.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lon'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat'</span>)).plot() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the average precipitation on a half-hourly basis.</span></span></code></pre></div>
</section>
<section id="final-comments" class="level3">
<h3 class="anchored" data-anchor-id="final-comments">Final Comments</h3>
<p>In this post we looked into how to download and preprocess netCDF data provided by <a href="https://disc.gsfc.nasa.gov/datasets/GPM_3IMERGHHL_06/summary">NASA GES DISC</a>. We looked at two methods, one with pure Python and the other with wget and xarray. All performed on google Colab. It is to be noted that, there is a significant setup required i.e, to create a new <code>.netrc</code> file and store inside the root directory of Colab else it returns an authorisation error. We looked at how easy it is to process netCDF data in xarray and how wget commands can be run on Colab.</p>
<p>Watch the video tutorial <a href="https://www.youtube.com/watch?v=T_Us4hJxSeI">here</a>. The notebook for reference is located <a href="https://Colab.research.google.com/drive/1VIKun8K3RT8VvcPJ7DE5uDDC10i10k1T?usp=sharing">here</a>.</p>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/gpm-imerg-xarray/</guid>
  <pubDate>Tue, 19 Apr 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>How to Upload Multiple Geotagged Images in Django</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-django-image-upload/</link>
  <description><![CDATA[ 




<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>In this post, we look into how to upload multiple geo-tagged/non-geotagged images to aws s3 using plain Django and spatialite as databbase. We use GeoDjango to store the latitude, longitude extracted from geo-tagged images into the database.</p>
<br>
<hr>
<section id="project-setup" class="level3">
<h3 class="anchored" data-anchor-id="project-setup">Project setup</h3>
<p>create django project</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">django-admin</span> startproject login_boiler_plate</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> app python manage.py startapp GisMap</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> superuser python manage.py createsuperuser</span></code></pre></div>
<p>In <code>settings.py</code> add the app to <code>installed_app</code> list and setup the default location for media storage.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">INSTALLED_APPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-2">    ...</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GisMap'</span>,</span>
<span id="cb2-4">]</span>
<span id="cb2-5"></span>
<span id="cb2-6">MEDIA_ROOT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  os.path.join(BASE_DIR, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'media'</span>) </span>
<span id="cb2-7">MEDIA_URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/media/'</span></span></code></pre></div>
</section>
<section id="setup-the-database-backend-to-postgis-extenstion-of-postgresql." class="level3">
<h3 class="anchored" data-anchor-id="setup-the-database-backend-to-postgis-extenstion-of-postgresql."><strong>Setup the database backend to postgis extenstion of postgresql.</strong></h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in settings.py file</span></span>
<span id="cb3-2">DATABASES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>: {</span>
<span id="cb3-4">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENGINE'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'django.contrib.gis.db.backends.postgis'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#imp</span></span>
<span id="cb3-5">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NAME'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'database_name_here'</span>,</span>
<span id="cb3-6">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'USER'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'postgres'</span>,</span>
<span id="cb3-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PASSWORD'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'password_here'</span>,</span>
<span id="cb3-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HOST'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'localhost'</span>,</span>
<span id="cb3-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PORT'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5432'</span>,</span>
<span id="cb3-10">    },</span>
<span id="cb3-11">}</span></code></pre></div>
<p>In <code>models.py</code>, create model for uploading images. <code>DateTimeField</code> and <code>user</code> are not necessary.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.db <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> models</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.auth.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> User</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ImageUpload(models.Model):</span>
<span id="cb4-6">    user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.ForeignKey(User, null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, on_delete<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.CASCADE)</span>
<span id="cb4-7">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.ImageField( null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, blank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, upload_to <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/'</span>)</span>
<span id="cb4-8">    date_created <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.DateTimeField(auto_now_add<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user.username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" uploaded: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.name</span></code></pre></div>
<p>In <code>forms.py</code>, refer to the ImageUpload model for input.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">  </span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.forms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ModelForm</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.auth.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> User</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> .models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ImageUpload</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ImageForm(ModelForm):</span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Meta:</span>
<span id="cb5-8">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageUpload</span>
<span id="cb5-9">        fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>,)</span></code></pre></div>
<p>In <code>home.html</code>, create the form to accept image upload.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb6-1">                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- Modal --&gt;</span></span>
<span id="cb6-2">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">form</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> method </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> enctype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multipart/form-data"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-3">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal fade"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exampleModal"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> tabindex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-1"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> role</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dialog"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> aria-labelledby</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exampleModalLabel"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> aria-hidden</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-4">                    {% csrf_token %}</span>
<span id="cb6-5">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal-dialog"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> role</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"document"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal-content"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-7">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal-header"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-8">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">h5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal-title"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exampleModalLabel"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Upload Image<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">h5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-9">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"close"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> data-dismiss</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> aria-label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Close"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-10">                            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">span</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> aria-hidden</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">&amp;times;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">span</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-11">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-12">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-13">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal-body"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-14">                          {{ image_form.image }}</span>
<span id="cb6-15">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-16">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal-footer"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-17">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn btn-secondary"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> data-dismiss</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modal"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Close<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-18">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submit"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn btn-primary"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Save Image<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-19">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-20">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-21">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-22">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-23">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">form</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>In <code>views.py</code>, accept the HTTP POST request and save to the database. We will alter this to extract latitude, longitude later.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@login_required</span>(login_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'login'</span>)</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> home_page(request):</span>
<span id="cb7-3"></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> request.method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POST'</span>:</span>
<span id="cb7-5">        form <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageForm(request.POST , request.FILES)</span>
<span id="cb7-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(form)</span>
<span id="cb7-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> form.is_valid():</span>
<span id="cb7-8">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is valid"</span>)</span>
<span id="cb7-9">            obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> form.save(commit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-10">            obj.user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.user</span>
<span id="cb7-11">            obj.save()</span>
<span id="cb7-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> redirect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home'</span>)</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-14">        Imageform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageForm()</span>
<span id="cb7-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> render(request, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GisMap/home.html"</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Home Page"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_form"</span>: ImageForm})</span></code></pre></div>
</section>
<section id="get-lat-lon-from-image-meta-deta-exchangeable-image-file-format-exif" class="level3">
<h3 class="anchored" data-anchor-id="get-lat-lon-from-image-meta-deta-exchangeable-image-file-format-exif">Get Lat, lon from image meta deta (Exchangeable image file format [EXIF] )</h3>
<ol type="1">
<li>Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional. These include- GDAL, PROJ, GEOS, PostGIS. These can be downloaded from osgeo4W which bundles all these libraries. Then application can be added to apps in settings with <code>django.contrib.gis</code> to the installed apps.</li>
</ol>
<p>By default geodjango is not installed in the apps list and thus we do it ourself.</p>
<pre><code>pip install django-geo</code></pre>
<p>NOTE- ensure os4geo is installed: install from <a href="https://qgis.org/en/site/forusers/download.html">here</a> if not done. And make the following changes in <code>settings.py</code>.</p>
<p>An additional setting is required, which is to locate osgeo4w directory in django. If you install osgeo4w in default directory, you need to put the following code within the settings.py file.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">INSTALLED_APPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-2">...</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'django.contrib.gis'</span>,</span>
<span id="cb9-4">]</span>
<span id="cb9-5"></span>
<span id="cb9-6"></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> posixpath</span>
<span id="cb9-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nt'</span>:</span>
<span id="cb9-11">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> platform</span>
<span id="cb9-12">    OSGEO4W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"C:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">OSGeo4W"</span></span>
<span id="cb9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'64'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> platform.architecture()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb9-14">        OSGEO4W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"64"</span></span>
<span id="cb9-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> os.path.isdir(OSGEO4W), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Directory does not exist: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OSGEO4W</span>
<span id="cb9-16">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OSGEO4W_ROOT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OSGEO4W</span>
<span id="cb9-17">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GDAL_DATA'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OSGEO4W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">hare</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">gdal"</span></span>
<span id="cb9-18">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PROJ_LIB'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OSGEO4W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">hare</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">proj"</span></span>
<span id="cb9-19">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PATH'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OSGEO4W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\b</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">in;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PATH'</span>]</span></code></pre></div>
<p>In <code>models.py</code>, add a PointField which can store geospatial information (lat,lon)</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.gis.db <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> models</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ImageUpload():</span>
<span id="cb10-3">  ...  </span>
<span id="cb10-4">  geom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.PointField( null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<p>In <code>views.py</code>, define functions to extract meta data from image and convert into right format for GeoDjango to understand it. Courtesy of <a href="https://developer.here.com/blog/getting-started-with-geocoding-exif-image-metadata-in-python3">Jayson DeLancey</a></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb11-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.request <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlopen</span>
<span id="cb11-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL.ExifTags <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GPSTAGS</span>
<span id="cb11-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL.ExifTags <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TAGS</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_decimal_from_dms(dms, ref):</span>
<span id="cb11-12"></span>
<span id="cb11-13">    degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dms[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-14">    minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dms[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60.0</span></span>
<span id="cb11-15">    seconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dms[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600.0</span></span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ref <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'S'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'W'</span>]:</span>
<span id="cb11-18">        degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>degrees</span>
<span id="cb11-19">        minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>minutes</span>
<span id="cb11-20">        seconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>seconds</span>
<span id="cb11-21"></span>
<span id="cb11-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seconds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb11-23"></span>
<span id="cb11-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_coordinates(geotags):</span>
<span id="cb11-25">    lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_decimal_from_dms(geotags[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPSLatitude'</span>], geotags[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPSLatitudeRef'</span>])</span>
<span id="cb11-26"></span>
<span id="cb11-27">    lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_decimal_from_dms(geotags[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPSLongitude'</span>], geotags[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPSLongitudeRef'</span>])</span>
<span id="cb11-28"></span>
<span id="cb11-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (lon, lat)</span>
<span id="cb11-30"></span>
<span id="cb11-31"></span>
<span id="cb11-32"></span>
<span id="cb11-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_geotagging(exif):</span>
<span id="cb11-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> exif:</span>
<span id="cb11-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No EXIF metadata found"</span>)</span>
<span id="cb11-36"></span>
<span id="cb11-37">    geotagging <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb11-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (idx, tag) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> TAGS.items():</span>
<span id="cb11-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPSInfo'</span>:</span>
<span id="cb11-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> exif:</span>
<span id="cb11-41">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No EXIF geotagging found"</span>)</span>
<span id="cb11-42"></span>
<span id="cb11-43">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (key, val) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> GPSTAGS.items():</span>
<span id="cb11-44">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> exif[idx]:</span>
<span id="cb11-45">                    geotagging[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exif[idx][key]</span>
<span id="cb11-46"></span>
<span id="cb11-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> geotagging</span>
<span id="cb11-48"></span>
<span id="cb11-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#_______________________________________________________________________________________________________________________________________#</span></span>
<span id="cb11-50"></span></code></pre></div>
<p>In <code>views.py</code>, update home_page function to extract meta data and save the image to database.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.contrib.gis.geos <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Point</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@login_required</span>(login_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'login'</span>)</span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> home_page(request):</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> request.method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POST"</span>:</span>
<span id="cb12-6">        form <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageForm(request.POST, request.FILES)</span>
<span id="cb12-7">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(request.FILES.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>))</span>
<span id="cb12-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> form.is_valid():</span>
<span id="cb12-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb12-10">                obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> form.save(commit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-11">                obj.user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.user</span>
<span id="cb12-12">                obj.image_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj.image.url</span>
<span id="cb12-13">                geotags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geotagging(img._getexif())</span>
<span id="cb12-14">                obj.geom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(</span>
<span id="cb12-15">                    get_coordinates(geotags)</span>
<span id="cb12-16">                )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X is longitude, Y is latitude, Point(X,Y)</span></span>
<span id="cb12-17">                obj.save()</span>
<span id="cb12-18">                messages.success(request, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"image uploaded succesfully"</span>)</span>
<span id="cb12-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb12-20">                messages.warning(request, e)</span>
<span id="cb12-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-22">            messages.warning(request, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Invalid image type"</span>)</span>
<span id="cb12-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> redirect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>)</span>
<span id="cb12-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-25">        Imageform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageForm()</span>
<span id="cb12-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> render(</span>
<span id="cb12-27">            request, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GisMap/home.html"</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Home Page"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_form"</span>: ImageForm}</span>
<span id="cb12-28">        )</span></code></pre></div>
</section>
</section>
<section id="upload-to-s3-bucket" class="level2">
<h2 class="anchored" data-anchor-id="upload-to-s3-bucket">Upload to S3 bucket</h2>
<p>Install boto3 package and django-storages. Add to installed packages. Additionally, provide Key:Value AWS credentials to access the bucket and change the default file storage to S3.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install django-storages</span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install boto3</span></code></pre></div>
<p>in <code>settings.py</code></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">INSTALLED_APPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-2">    ...</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'storages'</span>,</span>
<span id="cb14-4">]</span>
<span id="cb14-5"></span>
<span id="cb14-6">AWS_ACCESS_KEY_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb14-7">AWS_SECRET_ACCESS_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb14-8">AWS_STORAGE_BUCKET_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">AWS_S3_FILE_OVERWRITE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-11">AWS_DEFAULT_ACL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-12"></span>
<span id="cb14-13">DEFAULT_FILE_STORAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'storages.backends.s3boto3.S3Boto3Storage'</span></span>
<span id="cb14-14"></span>
<span id="cb14-15">AWS_QUERYSTRING_AUTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> removes the query string</span></code></pre></div>
<p><strong>NOTE: Make the bucket public to be able to make HTTP request</strong></p>
<p>Provide policy to make our s3 bucket public. By default, the bucket is private and no read/wrtie access is provided for user from outside the s3 page. There are other ways to access private bucket by either Limiting access to specific IP addresses or Restricting access to a specific HTTP referer. For simplicity we make the bucket public.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-17"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Statement"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PublicRead"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Principal"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s3:GetObject"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s3:GetObjectVersion"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-9">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:s3:::DOC-EXAMPLE-BUCKET/*"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-11">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="accept-non-geotagged-images" class="level2">
<h2 class="anchored" data-anchor-id="accept-non-geotagged-images">Accept non-geotagged images</h2>
<p>At this point, we should be able to upload geotagged images to s3 bucket. Non-geotagged images are not yet accepted by the model and thus we create seperate model for it.</p>
<p><a href="https://stackoverflow.com/questions/34006994/how-to-upload-multiple-images-to-a-blog-post-in-django">Additional resource</a></p>
<p>We now make separate model for accepting non-geotagged images similar to <code>ImageUpload</code> model but without <code>PointField</code>.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Photos(models.Model):</span>
<span id="cb16-2"></span>
<span id="cb16-3">    user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.ForeignKey(User, null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, on_delete<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.CASCADE)</span>
<span id="cb16-4">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.ImageField(upload_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'photos/'</span>,null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,blank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-5">    date_created <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.DateTimeField(auto_now_add<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-6">    image_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.URLField(max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, null<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, blank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-7"></span>
<span id="cb16-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Meta:</span>
<span id="cb16-9">        verbose_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Photo'</span></span>
<span id="cb16-10">        verbose_name_plural <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Photos'</span></span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb16-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user.username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" uploaded image "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.name</span></code></pre></div>
<p>In <code>views.py</code> file, extend the home_page function to add a fallback for non-geotagged images.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> request.method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POST"</span>:</span>
<span id="cb17-2"></span>
<span id="cb17-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># images will be in request.FILES</span></span>
<span id="cb17-4">    post_request, files_request <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.POST, request.FILES</span>
<span id="cb17-5"></span>
<span id="cb17-6">    form <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PhotoForm(post_request <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, files_request <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb17-7">    files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.FILES.getlist(</span>
<span id="cb17-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"images"</span></span>
<span id="cb17-9">    )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns files: [&lt;InMemoryUploadedFile: Image_name.jpg (image/jpeg)&gt;, &lt;InMemoryUploadedFile: Image_name.jpg (image/jpeg)&gt;]</span></span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> form.is_valid():</span>
<span id="cb17-11">        user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.user</span>
<span id="cb17-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb17-13"></span>
<span id="cb17-14">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=480x360 at 0x1ED0CCC6280&gt;</span></span>
<span id="cb17-15">            img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(f)  </span>
<span id="cb17-16">            </span>
<span id="cb17-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb17-18">                geotags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geotagging(img._getexif())</span>
<span id="cb17-19">                geoimage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageUpload(user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user, image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>f)</span>
<span id="cb17-20">                geoimageimg_upload.image_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geoimage.image.url</span>
<span id="cb17-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X is longitude, Y is latitude, Point(X,Y) ; returns eg SRID=4326;POINT (11.88454 43.46708)</span></span>
<span id="cb17-22">                geoimage.geom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(get_coordinates(geotags))</span>
<span id="cb17-23">                geoimage.save()</span>
<span id="cb17-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb17-25">                nongeoimage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Photos(user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user, image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>f)</span>
<span id="cb17-26">                nongeoimage.image_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nongeoimage.image.url</span>
<span id="cb17-27">                nongeoimage.save()</span>
<span id="cb17-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Form invalid"</span>)</span>
<span id="cb17-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> redirect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>)</span>
<span id="cb17-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-32">    Imageform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PhotoForm()</span>
<span id="cb17-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> render(</span>
<span id="cb17-34">        request, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GisMap/home.html"</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Home Page"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_form"</span>: ImageForm}</span>
<span id="cb17-35">    )</span></code></pre></div>
</section>
<section id="accept-multiple-images" class="level2">
<h2 class="anchored" data-anchor-id="accept-multiple-images">Accept multiple images</h2>
<p>Make a new form which accepts multiple image files to be uploaded at once.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PhotoForm(forms.ModelForm):</span>
<span id="cb18-2">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forms.FileField(widget<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>forms.ClearableFileInput(attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiple'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>}))</span>
<span id="cb18-3"></span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Meta:</span>
<span id="cb18-5">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Photos</span>
<span id="cb18-6">        fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>,)</span></code></pre></div>
<p>In <code>home.html</code>, add <code>multiple</code> attribute to allow for multiple selection of images at once.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb19-1">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-group"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-2">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-image"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-3">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"images"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"form-control-file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-image"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> multiple</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-4">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</section>
<section id="final-note" class="level2">
<h2 class="anchored" data-anchor-id="final-note">Final Note:</h2>
<p>At this point, you should be able to upload multiple Images to the AWS S3 bucket and have coordinates extracted the geo-tagged images and segregate non-geotagged images.</p>
<p>You learnt-</p>
<ul>
<li>How to Setup GeoDjango</li>
<li>How to Setup AWS S3 bucket</li>
<li>How to Extract meta data from Image and store in database using PointField</li>
</ul>
<blockquote class="blockquote">
<p>These steps will ensure you have multiple images uploaded at once and all the geolocation information can be stored in database, which later can be import to QGIS for data visualisation. Although both postgresql and django admin allows users to visualise the data.</p>
</blockquote>


</section>

 ]]></description>
  <category>Django</category>
  <guid>https://amanbagrecha.github.io/posts/2021-django-image-upload/</guid>
  <pubDate>Sat, 02 Apr 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>COGs as the Stand-in Replacement for GeoTIFFs</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2022-03-06-what-is-a-block-tile-overview-pyramids-and-cogs-an-experiment/</link>
  <description><![CDATA[ 




<p>I decided to write this blog when my twitter feed was buzzing with the usefulness of Cloud Optimized GeoTIFF (COGs) and how it is a paradigm shift in the way we serve raster on any client application. I also look at potential gotchas when creating COGs and when it might end up <strong>not</strong> being useful.</p>
<p>So, this post will mostly focus on COGs and why I would use them over plain GeoTIFFs. Also, we would look at associated jargons when you want to create a COG. I aim to dump my thoughts once and for all and hopefully help others on the way.</p>
<section id="table-of-content" class="level3">
<h3 class="anchored" data-anchor-id="table-of-content">Table of Content</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>What is a block ?</strong></td>
<td>Understand what is a Block in raster</td>
</tr>
<tr class="even">
<td><strong>What is an overview?</strong></td>
<td>What are Overviews and how are they useful to us</td>
</tr>
<tr class="odd">
<td><strong>Overview levels</strong></td>
<td>How does Block and Overview affect me</td>
</tr>
<tr class="even">
<td><strong>Experiments</strong></td>
<td>Playing around with JP2000 format</td>
</tr>
<tr class="odd">
<td><strong>COGs</strong></td>
<td>COGs as Stand-in replacement</td>
</tr>
</tbody>
</table>
<p>While looking at “How to generate a COG”, I encountered some fancy jargons — Block, Tile, Overview and Pyramid. Understanding them is essential to get the most out of COGs. Although I had known about them from when I started my GIS career, but you truly understand anything only when you apply it, don’t you?</p>
<p>To comprehend the above terms, let us take an example and experiment with it. I have a sentinel-2 L2A band 03 downloaded from <a href="https://scihub.copernicus.eu/dhus/">scihub</a>. The data is in JPEG2000 format (which is not a cloud optimized format).</p>
<p>On performing <code>gdalinfo ./T43PHP_20210123T051121_B03_20m.jp2</code>, the output gives a detailed description of the dataset. We focus on last few lines,</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Band</span> 1 Block=640x640 Type=UInt16, ColorInterp=Gray</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Overviews:</span> 2745x2745, 1373x1373, 687x687, 344x344</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Overviews:</span> arbitrary</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Image</span> Structure Metadata:</span>
<span id="cb1-5">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">COMPRESSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>JPEG2000</span>
<span id="cb1-6">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">NBITS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>15</span></code></pre></div>
<p>The <code>block</code> parameter represents the shape of tile (width x height) in the raster image. For example a <code>Block=640x640</code> represents a tile of width of 640 and height of 640 pixels. <strong>Fig. 1</strong> illustrates a tile as displayed on a web application.</p>
<figure class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/03/Tiled_web_map_Stevage.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.1 - Example of Web Map Tiles. The squares represent a <b>block</b>.&lt;/ href&gt; </i></b>
</figcaption>
</figure>
</section>
<section id="what-is-a-block" class="level3">
<h3 class="anchored" data-anchor-id="what-is-a-block">What is a <code>block</code> ?</h3>
<blockquote class="blockquote">
<p>A block corresponds to a rectangular subpart of the raster. The first value is the width of the block and the second value its height. Typical block shapes are lines or group of lines (in which case the block width is the raster width) or tiles (typically squares), such as here. Knowing the block size is important when efficient reading of a raster is needed. In the case of tiles, this means reading rasters from the left-most tile of the raster to the right-most of the upper lines and progressing that way downward to the bottom of the image. <em><a href="https://download.osgeo.org/gdal/workshop/foss4ge2015/workshop_gdal.pdf">Source</a></em></p>
</blockquote>
<p>So one thing is clear, Block and Tile are synonyms.</p>
<p>Also notice the output contains <code>Overviews: 2745x2745, 1372x1372, 686x686, 343x343</code>. What are these numbers? Let’s find out!</p>
<hr>
</section>
<section id="what-is-an-overview" class="level3">
<h3 class="anchored" data-anchor-id="what-is-an-overview">What is an overview?</h3>
<p>Overviews are reduced/downsampled versions of the raster. Overviews can also be termed interchangeably with <strong>pyramids</strong> in GIS. When you want to pan, zoom around the raster, it helps to have overviews. The concept is to reduce the dimension of the raster to facilitate faster rendering of Raster on our application. Each overview is a half the size of its previous dimension. They can be built both externally and internally. Having an external overview would generate an <code>.ovr</code> file which contains the information about the downsampled raster. While internal overviews alter the existing file permanently.</p>
<p>The above numbers for overviews (<code>2745x...</code>) tells us that the sentinel-2 image we are using here has internal overviews and tiling baked in it. Interestingly enough I found that it is not possible to build external overviews for <code>.jp2</code> (JPEG2000) format.</p>
<p><img src="https://i.imgur.com/reoTn79.png" class="img-fluid"></p>
</section>
<section id="overview-levels" class="level3">
<h3 class="anchored" data-anchor-id="overview-levels">Overview levels</h3>
<p>The numbers we see for overviews are also termed as levels. Overviews can be built at many levels (typically from level 1-18). When you have a large raster image (drone shots etc), these levels facilitate faster rendering.</p>
<figure class="figure">
<p><img src="https://2rct3i2488gxf9jvb1lqhek9-wpengine.netdna-ssl.com/wp-content/uploads/2018/07/TilePyramid.jpg" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.2 - Higher the pyramid level you move (zoom in), more detailed information from the raster you get, requiring more tiles to be generated. Image courtesy: <href src="https://www.azavea.com/blog/2018/08/06/generating-pyramided-tiles-from-a-geotiff-using-geotrellis/tilepyramid/">Azavea &lt;/ href&gt; </href></i></b>
</figcaption>
</figure>
<p>In <strong>Fig.2</strong> above, it should be clear that <code>tiling</code> is splitting up the raster into multiple blocks, while <code>overview</code> is reducing the resolution (downsampling) of the raster. Both overview levels and tile size has to be tuned to improve the performance for serving/rendering raster on our application.</p>
<p>Using a large tile size might reduce the overall number of GET requests but it will also mean more data transfer per request. Moreover, having many pyramid levels (overviews) can reduce the response time but the data overhead to create these overviews can turn out to be quite expensive (about 33% for each additional level).</p>
</section>
<section id="cogs-as-stand-in-replacement" class="level3">
<h3 class="anchored" data-anchor-id="cogs-as-stand-in-replacement">COGs as Stand-in replacement</h3>
<p>With the aim to create COGs, I ended up experimenting with GeoTIFF and JP2000 formats.</p>
<p>On converting our <code>.jp2</code> to <code>.tif</code> by running <code>gdal_translate -of GTiff ./T43PHP_20210123T051121_B03_20m.jp2 b03.tif</code> and then <code>gdalinfo ./b03.tif</code>, it resulted in file size = 58 MB, and</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Band</span> 1 Block=5490x1 Type=UInt16, ColorInterp=Gray</span></code></pre></div>
<p>You’d notice that the file size of the <code>.tif</code> is much higher than that of <code>.jp2</code>. Additionally we do not see any overviews for the <code>.tif</code> file.</p>
<hr>
<p>On running the command <code>gdaladdo -r average ./b03.tif</code> to add internal overview to my raster, and then <code>gdalinfo b03.tif</code>, the output file size of the resulted raster is 78 MB, and</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Band</span> 1 Block=5490x1 Type=UInt16, ColorInterp=Gray</span>
<span id="cb3-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Overviews:</span> 2745x2745, 1373x1373, 687x687, 344x344, 172x172</span></code></pre></div>
<p>The point I am trying to convey here is that when you add an overview to the raster, there is an additional cost in terms of storage. In my opinion, the reason sentinel-2 images are stored with <code>.jp2</code> format is because of lower file size since they do not have to serve the raster on the web but instead let users download them in entirety. This would save them a huge cost on storing the data.</p>
</section>
<section id="cloud-optimized-geotiff-cog" class="level3">
<h3 class="anchored" data-anchor-id="cloud-optimized-geotiff-cog">Cloud Optimized GeoTIFF (COG)</h3>
<blockquote class="blockquote">
<p>With the COG, you’ll be able to load the image faster and zoom in and out much smoother than you would if you were working with a regular GeoTIFF. With the GeoTIFF, the entire image needs to finish downloading before the tiles can be generated for viewing.</p>
</blockquote>
<p>Cloud Optimized GeoTIFFs (COGs) are great! I use them in my work and they allow for easy and rendering of rasters on-the-fly. What makes it great is that it supports HTTP Range requests. This allows you to only fetch data where you are requesting it.</p>
<p>To create COGs using GDAL, it is as simple as typing</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gdalwarp</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-of</span> COG ./b03.tif b03_cog.tif</span></code></pre></div>
<p>The result from the above command results in a file size of 87 MB and,</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Band</span> 1 Block=512x512 Type=UInt16, ColorInterp=Gray</span>
<span id="cb5-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Overviews:</span> 2745x2745, 1373x1373, 687x687, 344x344, 172x172</span></code></pre></div>
<p>By default, internal overviews and tiles are created for us. We can tune both Block size and Overview parameters if needed. See <a href="https://gdal.org/drivers/raster/cog.html">here</a></p>
<hr>
<p>You can see from previous experiments that creating COGs can be a costly in terms of its size, but you should not leave it there. The true potential of COG is realized only when you pass in additional options (compression, tile size, overviews etc).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gdalwarp</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-of</span> COG <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-co</span> COMPRESS=DEFLATE ./b03_cog.tif b03_cog_deflate.tif</span></code></pre></div>
<p>The result from the above command results in a file size of 57 MB and,</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Band</span> 1 Block=512x512 Type=UInt16, ColorInterp=Gray</span>
<span id="cb7-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Overviews:</span> 2745x2745, 1373x1373, 687x687, 344x344, 172x172</span></code></pre></div>
<hr>
</section>
<section id="description" class="level2">
<h2 class="anchored" data-anchor-id="description">description</h2>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Filename</th>
<th>Size</th>
<th style="text-align: center;">Remarks</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>T43PHP_20210123T051121_B03_20m.jp2</td>
<td>33 Mb</td>
<td style="text-align: center;">Original size</td>
</tr>
<tr class="even">
<td>b03.tif</td>
<td>58 Mb</td>
<td style="text-align: center;">convert jp2 to tif</td>
</tr>
<tr class="odd">
<td>b03.tif</td>
<td>78 Mb</td>
<td style="text-align: center;">add overviews</td>
</tr>
<tr class="even">
<td>b03_cog.tif</td>
<td>87 Mb</td>
<td style="text-align: center;">convert to COG</td>
</tr>
<tr class="odd">
<td>b03_cog_deflate.tif</td>
<td>57 Mb</td>
<td style="text-align: center;">COG with deflate</td>
</tr>
</tbody>
</table>
<p>By this comparison you can see that, if you do not compress the file, it would ingress a huge cost to store them.</p>
<p>If your aim is to serve rasters on the browser or let users download the data, start using COGs with <strong>additional options</strong> and you won’t notice any difference but only save money in the long run.</p>


</section>

 ]]></description>
  <guid>https://amanbagrecha.github.io/posts/2022-03-06-what-is-a-block-tile-overview-pyramids-and-cogs-an-experiment/</guid>
  <pubDate>Sat, 05 Mar 2022 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2022-03-06-what-is-a-block-tile-overview-pyramids-and-cogs-an-experiment/featured1.png" medium="image" type="image/png" height="104" width="144"/>
</item>
<item>
  <title>How to save Earth Engine Image directly to your local machine</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2022-02-07-how-to-save-earth-engine-image-directly-to-your-local-machine/</link>
  <description><![CDATA[ 




<p>Oftentimes you are required to download satellite images for your Area of Interest (AOI) and Google Earth Engine is probably a good place to avail processed satellite images for free and more importantly, only for the area you need.</p>
<p>One hindrance when you download from earth engine is that the images get saved in google drive, which can fill up fast for large numbers of downloads. To avoid this additional step, there is a hacky trick to download images directly.</p>
<p>Note: Earth Engine does provide getDownloadURL option, but is limited in the size of download and thus not feasible in this case. Pixel grid dimensions for <a href="https://developers.google.com/earth-engine/apidocs/ee-image-getdownloadurl">getDownloadURL</a> must be less than or equal to 10000 i.e, you can have a maximum of 100 x 100 pixel size images.</p>
<p>In this post I show a trick which can let you download upto 100 times larger size images, directly to your local machine. Spoiler: <a href="https://developers.google.com/earth-engine/apidocs/ee-imagecollection-getregion">getRegion</a> method plays a significant role to help accomplish this task. Added to that, creating a gridded bounding box for our AOI, with spacing equivalent to the pixel size will aid in our task.</p>
<p>We will utilize earth engine python client so that all the geopython goodies can be simultaneously utilised.</p>
<p>To begin with, I have a geopackage containing a polygon, which is our AOI. We aim to download sentinel-2 B4 band for the region. The ideal way would be to use the in-built <code>Export</code> option, but in our case we would use the <a href="https://developers.google.com/earth-engine/apidocs/ee-imagecollection-getregion">getRegion</a> method along with creating a point grid over our AOI with spacing equivalent to the pixel size.</p>
<figure class="figure">
<p><img src="https://i.imgur.com/IA5OTuN.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.1 -Left: Our Area of Interest over which to download satellite data. Right: Grid points over AOI bounding box at pixel spacing</i></b>
</figcaption>
</figure>
<p>To accomplish creation of points at spacing equal to pixel width and height, we use the following function</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate points</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> xcor(y_pt, crs):</span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> wrap(x_each):</span>
<span id="cb1-4">        feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ee.FeatureCollection(y_pt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> y_each: ee.Feature(</span>
<span id="cb1-5">            ee.Geometry.Point([x_each, y_each], ee.Projection(crs)))))</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> feat</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> wrap</span></code></pre></div>
<p>The above code can be interpreted as a nested loop.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pseudo code</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x_pt:</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_pt:</span>
<span id="cb2-4">        create_Point(each_x, each_y)</span></code></pre></div>
<p>x_pt and y_pt are generated from the geopackage (AOI) using GeoPandas library as follows</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generatePoints(file_name, pixel_size):</span>
<span id="cb3-2"></span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read the farm and convert to geojson</span></span>
<span id="cb3-4">    feature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(file_name).__geo_interface__</span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract bounds</span></span>
<span id="cb3-6">    minx, miny, maxx, maxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>]</span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a list with spacing equal to pixel_size</span></span>
<span id="cb3-8">    x_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ee.List.sequence(minx, maxx, pixel_size)</span>
<span id="cb3-9">    y_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ee.List.sequence(miny, maxy, pixel_size)</span>
<span id="cb3-10">   </span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x_pt, y_pt, minx, maxy</span></code></pre></div>
<p>Here we are basically creating a new <code>Point</code> feature for each x and y point.</p>
<p>Once we have the grid over our AOI, we can go ahead and call <code>getRegion</code> method</p>
<p>The documentation does a good job in explaining what <code>getRegion</code> is all about</p>
<blockquote class="blockquote">
<p>Output an array of values for each [pixel, band, image] tuple in an ImageCollection. The output contains rows of id, lon, lat, time, and all bands for each image that intersects each pixel in the given region. Attempting to extract more than 1048576 values will result in an error.</p>
</blockquote>
<p>The limit 1048576 results in a max tile width and height of 1024 x 1024 pixels. By combining the previously created grid and <code>getRegion</code>, we could potentially get 100 times more pixels than getDownloadURL. Let us do that!</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">len_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_pt.getInfo())</span>
<span id="cb4-2">len_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_pt.getInfo())</span>
<span id="cb4-3"></span>
<span id="cb4-4">imgCollection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ee.ImageCollection(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COPERNICUS/S2_SR"</span>).filters(filters_to_add)</span>
<span id="cb4-5">geometry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ee.FeatureCollection(x_pt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(xcor(y_pt, CRS))).flatten()</span>
<span id="cb4-6">input_bands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B4"</span></span>
<span id="cb4-7">pixel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dataframe(imgCollection, geometry, input_bands, CRS )</span>
<span id="cb4-10">data_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[input_bands].values.reshape(len_y, len_x)</span>
<span id="cb4-11">data_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.flip(data_matrix, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-12">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rasterio.transform.from_origin(minx, maxy, pixel_size, pixel_size)</span>
<span id="cb4-13">save_tiff(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output.tif"</span>, data_matrix, transform, CRS)</span></code></pre></div>
<p>The above code first gets the count of points in each of the 2-dimensions followed by fetching the dataframe which contains the lat, lon and pixel value as shown in the image.</p>
<figure class="figure">
<p><img src="https://i.imgur.com/5SjjW0E.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.2 -Output of getRegion results in lat, lon, pixel value in sequential order</i></b>
</figcaption>
</figure>
<p>Now we reshape the dataframe and flip it to make the pixel arrange in image format. Lastly, we save the image by passing the transformation of the image. Make sure to have an imageCollection for the <code>getRegion</code> method to work. Currently, the above code can only download 1 band at a time, but with simple modification to the <code>getDataframe</code> function, that too can be changed.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> getDataframe(img_col, feature, input_band, crs):</span>
<span id="cb5-2">   </span>
<span id="cb5-3">    imgcol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ee.ImageCollection(img_col).select(input_band)</span>
<span id="cb5-4">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(imgcol.getRegion(feature.geometry(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, crs).getInfo())</span>
<span id="cb5-5">    df, df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-6">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> saveTiff(output_name, data_array, transform, crs):</span>
<span id="cb5-11"></span>
<span id="cb5-12">    options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"driver"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gtiff"</span>,</span>
<span id="cb5-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>: data_array.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb5-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>: data_array.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb5-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dtype"</span>: np.float32,</span>
<span id="cb5-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crs"</span>: crs,</span>
<span id="cb5-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transform"</span>: transform</span>
<span id="cb5-20">    }</span>
<span id="cb5-21"></span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>options) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> src:</span>
<span id="cb5-23">        src.write(data_array, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-24"></span>
<span id="cb5-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<p>The output of the exercise is that you have a raster directly downloaded to your local machine, without google drive/ cloud intermediaries. One thing worth pointing out, is for extremely large images, you are better off downloading via the specified steps in docs. This hacky way is to simplify things and avoid google drive (which is never empty for me).</p>
<p><img src="https://i.imgur.com/Z8DEJHh.jpg" class="img-fluid"></p>
<p>The full code can be accessed <a href="https://github.com/amanbagrecha/ee-image-direct-download">here</a></p>



 ]]></description>
  <category>earth-engine</category>
  <guid>https://amanbagrecha.github.io/posts/2022-02-07-how-to-save-earth-engine-image-directly-to-your-local-machine/</guid>
  <pubDate>Sun, 06 Feb 2022 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2022-02-07-how-to-save-earth-engine-image-directly-to-your-local-machine/featured.png" medium="image" type="image/png" height="64" width="144"/>
</item>
<item>
  <title>Vector tiles and Docker using pg_tilerserv</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-12-22-vector-tiles-and-docker-using-pg-tilerserv/</link>
  <description><![CDATA[ 




<p>In this blog we look at how to serve your geospatial data as vector tiles using pg_tileserv in a docker container.</p>
<section id="what-are-vector-tiles" class="level2">
<h2 class="anchored" data-anchor-id="what-are-vector-tiles">What are vector tiles?</h2>
<p>Vector Tiles are similar to raster tiles, but instead of serving images, vector tiles serve geospatial data which are vectors themselves and not images. This allows for reduced data transfer over a network, faster loading while allowing client side rendering. Moreover, vector tiles allow for flexible styling of your geospatial data since it renders on the client side. All this is not possible with raster tiles and hence vector tiles have gained traction in the last few years.</p>
<p>One of the most popular specifications to serve vector tiles is mapbox vector tiles, utilized by many open source tile servers.</p>
<p>Because PostGIS can create mapbox vector tiles from vector data, it becomes easy to serve them over the web. Many tileservers use the power of this postGIS functionality to serve vector tiles over the web.</p>
<p>As for a visual understanding as to what is different between vector and raster tiles, the following image illustrates that. The red bounding box is the response to clients request to serve vector tiles. Notice the format is <code>pbf</code> as opposed to <code>png</code> for raster tiles.</p>
<p><img src="https://i.imgur.com/S5uzLpN.png" class="img-fluid"></p>
</section>
<section id="why-use-docker-for-this" class="level2">
<h2 class="anchored" data-anchor-id="why-use-docker-for-this">Why use docker for this?</h2>
<p>Using docker would expedite the process of starting and “actually” using the applications. It is like sharing your machine with others so that they do not have to install anything to get started. For this reason, it makes complete sense to use docker for moderate to high complexity projects.</p>
</section>
<section id="what-is-pg_tileserve" class="level2">
<h2 class="anchored" data-anchor-id="what-is-pg_tileserve">What is pg_tileserve?</h2>
<p>To create vector tiles, and serve them on the web, you need a middleware that can talk to the database and also serve them on the web. Since pg_tileserve uses a postgis function under the hood, it becomes a default choice to add a lightweight service to serve vector tiles. pg_tileserv returns Mapbox Vector tiles on input of vector geometry. In addition to reading tables from the database, it can handle complex functions to meet our needs.</p>
<p>ST_asMVT, an aggregate function which is used under the hood for pg_tileserv, returns mapbox vector tile format based on google protobuf. While there are other formats such as MBtiles which is sqlite based binary file (can be opened in sqlite), Mapbox Vector Tile format seems to be winning this race and is thus the most popular format currently.</p>
<section id="to-get-started-with-serving-your-vector-data-to-the-web-using-pg_tileserv-we-follow-the-below-mentioned-steps" class="level3">
<h3 class="anchored" data-anchor-id="to-get-started-with-serving-your-vector-data-to-the-web-using-pg_tileserv-we-follow-the-below-mentioned-steps">To get started with serving your vector data to the web using pg_tileserv, we follow the below mentioned steps</h3>
<ol type="1">
<li>Download <a href="https://github.com/CrunchyData/pg_tileserv">pg_tileserv</a> folder from <a href="https://downgit.github.io/#/home">down-git</a> website and save it to your local directory. <img src="https://i.imgur.com/QkF6OF9.png" class="img-fluid"></li>
</ol>
<p>The folder contains all the files required to start a docker container and serve vector tiles.</p>
<pre><code>└───data/  — would contain all your vector data
└───load-data.sh — shell script to load data into PostgreSQL
└───pg_tileserv.env — database URL to connect
└───docker-compose.yml — 
└───pg.env — environment variable for database
└───cleanup.sh — assemble multiple containers
└───README — guide to setup docker by Just van den Broecke</code></pre>
<ol start="2" type="1">
<li>Next, Modify <code>docker-compose.yml</code> file under <strong>build-&gt;context</strong> to point to the docker file https://github.com/CrunchyData/pg_tileserv.git. Since we did not clone the repository, we specify the Dockerfile using the git link.</li>
</ol>
<p><img src="https://i.imgur.com/AzclY3c.png" class="img-fluid"></p>
<ol start="3" type="1">
<li><p>Dump all your geospatial data into <code>data</code> dir. This directory will be <em>mounted</em> to the container, once we start it.</p></li>
<li><p>Change the <code>pg_tileserv.env</code> environment file as you wish, to specify the name and password of your database.</p></li>
</ol>
<p>Notes on env files: - <code>pg_tilerserv.env</code> file contains the database url which is of the format <code>postgres://your-username:your-password@localhost:5432/your-database-name</code> while <code>pg.env</code> contains credentials for postgres database.</p>
<p>Notes on docker-compose file - We are mounting <code>data</code> dir from our local system to the work dir in the docker container. - We are mapping port 7800 from our local machine to 7800 to the pg_tileserv container.</p>
<p>Start Docker Desktop and run <code>docker-compose build</code> in the command line. It will download the image needed from the dockerfile specified. It only downloads the latest alpine image and all other dependencies are installed in the build.</p>
<p>Once the database setup is done, we now load data into the database by running either <code>load-data.sh</code> shell script (or) the following command,</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Load data using shp2pgsql </span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> exec pg_tileserv_db sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shp2pgsql -D -s 4326 /work/ne_50m_admin_0_countries.shp | psql -U tileserv -d tileserv"</span></span></code></pre></div>
<p>The above command opens a terminal inside the pg_tileserv_db container and runs the <code>shp2pgsql</code> command.</p>
<p>We can use <code>ogr2ogr</code> command line tool if your data is anything other than shapefile. Read this blog by <a href="https://blog.crunchydata.com/blog/loading-data-into-postgis-an-overview">Kat Batuigas</a> to know how to do it.</p>
<p>Finally, run <code>docker-compose up</code> to start the service. You’d see both containers starting up and your web app being served on port 7800. If you do not see this, stop the container and run again.</p>
<p><img src="https://i.imgur.com/Gy4QlTL.png" class="img-fluid"></p>
<p>On running the web app in the browser we see our tables visible under Table Layers and the schema it belongs to. We added a few additional layers (public.hydrants and a function layer following steps from <code>README.md</code>) to play around with it.</p>
<p><img src="https://i.imgur.com/CwmhUdK.png" class="img-fluid"></p>
</section>
</section>
<section id="endnote" class="level2">
<h2 class="anchored" data-anchor-id="endnote">Endnote</h2>
<p>We looked at serving vector data as tiles using pg_tileserv and docker container. Docker enables reproducibility and expedites the process of running a web app. Although there are numerous open-source tile servers available, each has its use case and would require testing them out to identify the best tileserver for your use case. You can read a long list of tileservers <a href="https://github.com/mapbox/awesome-vector-tiles">here</a>.</p>
<p>So next time you think to serve large vector data on the web app, make sure to use vector tiles built inside a docker container. It will surely simplify things!</p>
<p>Source: 1. CrunchyData/pg_tileserv: A very thin PostGIS-only tile server in Go. Takes in HTTP tile requests, executes SQL, returns MVT tiles. (https://github.com/CrunchyData/pg_tileserv/)</p>
<ol start="2" type="1">
<li><p>Lightweight PostGIS Web Services Using pg tileserv and pg featureserv (https://www.youtube.com/watch?v=TXPtocZWr78&amp;t=1s&amp;ab_channel=CrunchyData)</p></li>
<li><p>Reference | Vector tiles | Mapbox (https://docs.mapbox.com/vector-tiles/reference/)</p></li>
<li><p>Vector Tiles – Geoinformation HSR (https://giswiki.hsr.ch/Vector_Tiles)</p></li>
</ol>


</section>

 ]]></description>
  <category>Docker</category>
  <category>Vector-tiles</category>
  <guid>https://amanbagrecha.github.io/posts/2021-12-22-vector-tiles-and-docker-using-pg-tilerserv/</guid>
  <pubDate>Tue, 21 Dec 2021 18:30:00 GMT</pubDate>
  <media:content url="https://amanbagrecha.github.io/posts/2021-12-22-vector-tiles-and-docker-using-pg-tilerserv/featured.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Polygonize Raster and Compute Zonal-Statistics in Python</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-09-30-polygonize-raster-and-compute-zonal-stats-in-python/</link>
  <description><![CDATA[ 




<p>The output of a clustering algorithm is a raster. But when you want to compute statistics of the clustered raster, it needs to be polygonized.</p>
<p>A simple way to perform this action is using the gdal command line <code>gdal_polygonize.py</code> script. This script requires the output file format, input raster file and output name of the vector file. You can additionally mask pixel values which you don’t want to convert to polygons. For this example, we would consider a single band image.</p>
<pre class="shell"><code>python gdal_polygonize.py raster_file -f "ESRI Shapefile" vector_file.shp  layername atrributefieldname</code></pre>
<p><code>--nomask</code> allows to include nodata values in the shapefile</p>
<p><code>atrributefieldname</code> should always be preceded with <code>layername</code> else it would result in an error.</p>
<p>The output would result in a vector layer. The number of output polygons is equal to the number of non-NA values. Each neighbouring cell (pixel) which is connected in the raster having the same value is combined to form a single polygon.</p>
<p>For instance, consider this 4 x 4 raster. When converted to vector, it resulted in 6 polygons. Note that disconnected similar values form an independent polygon. Each polygon will have an attribute as its pixel value from the raster, in the data type of the image. These would end up being a pair of (polygon, value) for each feature found in the image.</p>
<figure class="figure">
<img src="https://i.imgur.com/xeJ4BGa.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.1 -Converting Raster to Vector using GDAL. The output polygon has attribute associated with its raster value </i></b>
</figcaption>
</figure>
<p>Another way to polygonize raster programmatically is to use the <code>rasterio</code> library. Since rasterio utilizes GDAL under the hood, it also performs similar action and results in a pair of geometry and raster value. We create a tuple of dictionaries to store each feature output.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code to polygonize using rasterio</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rasterio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> features</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read the raster and polygonize</span></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rasterio.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(cluster_image_path) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> src:</span>
<span id="cb2-6">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, out_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint16'</span>) </span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Make a mask!</span></span>
<span id="cb2-8">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `results` contains a tuple. With each element in the tuple representing a dictionary containing the feature (polygon) and its associated raster value</span></span>
<span id="cb2-10">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cluster_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(v)}, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geometry'</span>: s} </span>
<span id="cb2-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (s, v) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (features.shapes(image, mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>src.transform)))</span></code></pre></div>
<p>Once we have the raster polygonized, we can use <code>rasterstats</code> library to calculate zonal statistics. We use this library since there is no in-built functionality for rasterio to calculate it.</p>
<p>This library has a function <code>zonal_stats</code> which takes in a vector layer and a raster to calculate the zonal statistics. Read more <a href="https://pythonhosted.org/rasterstats/manual.html#zonal-statistics">here</a></p>
<p>The parameters to the function are:</p>
<ol type="1">
<li>vectors: path to an vector source or geo-like python objects</li>
<li>raster: ndarray or path to a GDAL raster source</li>
</ol>
<p>and various other options which can be found <a href="https://github.com/perrygeo/python-rasterstats/blob/master/src/rasterstats/main.py#L34">here</a></p>
<p>To create a vector layer from the tuple <code>results</code>, we use geopandas. There are other libraries (such as fiona) which can also create vector geometry from shapely objects.</p>
<p>For raster, we pass the <code>.tif</code> file directly to <code>zonal_stats</code>. The final code looks like the following</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rasterstats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zonal_stats</span>
<span id="cb3-2"></span>
<span id="cb3-3">in_shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame.from_features(results).set_crs(crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>src.crs)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stats parameter takes in various statistics that needs to be computed </span></span>
<span id="cb3-6">statistics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zonal_stats(in_shp,image,stats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min, max, mean, median'</span>,</span>
<span id="cb3-7">                geojson_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, nodata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>)</span></code></pre></div>
<p>The output is a geojson generator when <code>geojson_out</code> is True. we can convert the geojson to dataframe and export as csv for further processing.</p>
<p>This way, with the help of geopandas, rasterstats and rasterio, we polygonize the raster and calculate zonal statistics.</p>



 ]]></description>
  <category>GDAL</category>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/2021-09-30-polygonize-raster-and-compute-zonal-stats-in-python/</guid>
  <pubDate>Wed, 29 Sep 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Two ways to Programmatically change projection of raw CSV</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-09-30-three-ways-to-change-projection-of-raw-csv/</link>
  <description><![CDATA[ 




<p>Often, field values are collected in the Geographic Coordinate Reference System as CSV or ASCII so that it can be universally used. But when you want to perform any kind of analysis on these values, there is a need to reproject them into a Projected Coordinate Reference System for the specific area. Although there are many ways that exist now with desktop GIS, these methods can be cumbersome if you have thousands of files to reproject.</p>
<p>This task of reprojecting raw CSV can be accomplished using GDAL although it is not straightforward. It requires an indication of geographic data of a CSV file which is provided using VRT (GDAL virtual Raster). More advanced tools now exist which are either built on top of GDAL or are very similar. <strong>GeoPandas</strong> and <strong>pyproj</strong> are two such libraries which can help us reproject our raw CSV on-the-fly.</p>
<p>We first look at how this task can be accomplished using the GDAL command line.</p>
<section id="reproject-csv-using-ogr2ogr" class="level3">
<h3 class="anchored" data-anchor-id="reproject-csv-using-ogr2ogr">Reproject CSV using <code>ogr2ogr</code></h3>
<figure class="figure">
<img src="https://i.imgur.com/Udf4gdV.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.1 — Raw <b style="color:red;">input.csv</b> with <b>lat</b> &amp; <b>lon</b> geometry column </i></b>
</figcaption>
</figure>
<p>This example shows using <code>ogr2ogr</code> to reproject the CRS of CSV file with the latitude, longitude coordinates stored as columns <strong>lat</strong>, <strong>lon</strong> in the <code>input.csv</code> file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ogr2ogr</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> CSV <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lco</span> GEOMETRY=AS_XY <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t_srs</span> EPSG:32644 output.csv input.vrt</span></code></pre></div>
<p>Following is the explanation of the above command,</p>
<ol type="1">
<li><code>-lco GEOMETRY=AS_XY</code> : Layer creation option with XY columns added in output CSV.</li>
<li><code>input.vrt</code> : Input Virtual Raster file containing information about CSV and its geometry.</li>
<li><code>-t_srs EPSG:32644</code> : Set target CRS to EPSG:32644</li>
<li><code>-f CSV</code> : specify the output file format</li>
<li><code>output.csv</code> : output CSV with reprojected coordinates</li>
</ol>
<p>In the above code, <code>input.vrt</code> is a GDAL virtual raster which has to be created prior to running the command. It points to the CSV file which has the location data stored as columns (lon, lat)</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!--input.vrt pointing to the input.csv--&gt;</span></span>
<span id="cb2-2">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OGRVRTDataSource</span>&gt; </span>
<span id="cb2-3">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OGRVRTLayer</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>&gt; </span>
<span id="cb2-4">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SrcDataSource</span>&gt;input.csv&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SrcDataSource</span>&gt; </span>
<span id="cb2-5">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GeometryType</span>&gt;wkbPoint&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GeometryType</span>&gt; </span>
<span id="cb2-6">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LayerSRS</span>&gt;EPSG:4326&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LayerSRS</span>&gt; </span>
<span id="cb2-7">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GeometryField</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> encoding=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PointFromColumns"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> x=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> y=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>/&gt; </span>
<span id="cb2-8">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OGRVRTLayer</span>&gt; </span>
<span id="cb2-9">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OGRVRTDataSource</span>&gt;</span></code></pre></div>
<p><strong>But what does the above xml mean?</strong></p>
<p>The above xml is a virtual raster (VRT) which allows for lazy processing. Often, we have to save intermediary outputs on our local disk, which could potentially take a lot of space. To avoid that, VRT allows to store the processing in an xml encoding and performs all intermediary action at once, in the final step.</p>
<ol type="1">
<li>The first line <code>&lt;OGRVRTDataSource&gt;</code> is the root element.</li>
<li><code>&lt;OGRVRTLayer name="input"&gt;</code> corresponds with the <code>&lt;SrcDataSource&gt; input.csv &lt;/SrcDataSource&gt;</code> and points to the <code>input.csv</code> file we want to reproject.</li>
<li><code>&lt;LayerSRS&gt;EPSG:4326&lt;/LayerSRS&gt;</code> specifies the CRS of our <code>input.csv</code> file.</li>
<li><code>&lt;GeometryType&gt; wkbPoint &lt;/GeometryType&gt;</code> is the format that coordinates are stored in.</li>
<li>Lastly, <code>&lt;GeometryField encoding="PointFromColumns" x="lon" y="lat"/&gt;</code> indicates the columns corresponding to lon and lat in csv. Read more about converting CSV to VRT <a href="https://gdal.org/drivers/vector/csv.html#reading-csv-containing-spatial-information">here</a>.</li>
</ol>
<figure class="figure">
<img src="https://i.imgur.com/HefHXvu.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.2 — Reprojecting CSV from EPSG:4326 to EPSG:32644 using GDAL </i></b>
</figcaption>
</figure>
<p>Hence, by running the above GDAL command, we would be able to reproject our CSV. By writing a bash script, this method can be scaled to thousands of files. But the intermediary <code>VRT</code> file is messy to handle and it would be nice to avoid it. Luckily for us, there are libraries built on top of GDAL which would help us avoid the hassle of creating intermediary files.</p>
</section>
<section id="using-geopandas" class="level2">
<h2 class="anchored" data-anchor-id="using-geopandas">Using GeoPandas</h2>
<p>With its simple and intuitive API, GeoPandas allows us to read, reproject CRS and write files on-the-fly.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">in_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span></span>
<span id="cb3-2">out_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./output'</span></span>
<span id="cb3-3">files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(in_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>)]</span>
<span id="cb3-4">input_crs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EPSG:4326'</span></span>
<span id="cb3-5">output_crs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EPSG:32644'</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(out_path):</span>
<span id="cb3-8">    os.mkdir(out_path)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb3-11">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-12">    gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame(</span>
<span id="cb3-13">        df, crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_crs , geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb3-14"></span>
<span id="cb3-15">    gdf.to_crs(output_crs, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-16">    gdf.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.geometry.x <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace x</span></span>
<span id="cb3-17">    gdf.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.geometry.y <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace y</span></span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># export reprojected csv </span></span>
<span id="cb3-20">    gdf.iloc[:,:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].to_csv(os.path.join(out_path, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>), index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> )</span></code></pre></div>
<p>In the above code, we loop through our CSV files. For each file, we create a GeoDataFrame and change the CRS. Lastly, we replace the coordinates with reprojected one.</p>
<section id="endnote" class="level3">
<h3 class="anchored" data-anchor-id="endnote">Endnote</h3>
<p>There is another way I found by using <strong>pyproj</strong> library which is quite verbose but performs reprojection on-the-fly. To read about the <strong>pyproj</strong> method, refer <a href="https://gis.stackexchange.com/a/168496">here</a>.</p>


</section>
</section>

 ]]></description>
  <category>GDAL</category>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/2021-09-30-three-ways-to-change-projection-of-raw-csv/</guid>
  <pubDate>Wed, 29 Sep 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Overlay cropped raster with vector layer</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-09-19-overlay-cropped-raster-with-vector-layer/</link>
  <description><![CDATA[ 




<p>I recently faced a problem of having to plot “cropped raster” layer and a vector layer on the same axes. It is known that we first need to identify the spatial extent of each layer, having the same coordinate reference system.<br>
Rasterio does offer a plotting function <code>show</code> which can plot a raster layer with the correct spatial extent for you when we pass the dataset reader object.</p>
<p>When we pass a reader object, the spatial extent is automatically read by <code>show</code> function.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> src:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import rasterio as rs</span></span>
<span id="cb1-2">    </span>
<span id="cb1-3">    f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb1-4">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> show(src, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from rasterio.plot import show</span></span>
<span id="cb1-5">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_layer.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `vector_layer` is a geodataframe (geopandas)</span></span></code></pre></div>
<figure class="figure">
<p><img src="https://i.imgur.com/A33Vopw.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.1 -Overlay raster with vector layer. Notice the spatial extent</i></b>
</figcaption>
</figure>
<p>Moreover, if we pass a numpy array to the <code>show</code> function, the spatial extent of that array has to be explicitly passed using the <code>transform</code> parameter of the <code>show</code> function since the numpy array does not know the corner location of the raster and thus the plot would begin with x,y: 0,0 as shown below.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> src:</span>
<span id="cb2-2"></span>
<span id="cb2-3">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img is a numpy array</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">    f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb2-6">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> show(img, transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src.transform, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb2-7">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_layer.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<p>But what if you want to plot a subset of the raster image, in the sense that you would like to slice the image arbitrarily and plot it. When you slice the image, the affine transformation is not the same anymore and thus plotting the sliced image would result in a plot having the spatial extent of the original image while the sliced image being magnified (Fig. 2).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> src:</span>
<span id="cb3-2"></span>
<span id="cb3-3">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-4"></span>
<span id="cb3-5">    f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb3-6">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> show(img, transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src.transform, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb3-7">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_layer.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<figure class="figure">
<p><img src="https://i.imgur.com/ePTM6q0.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.2 - Overlaid cropped raster and vector layer with incorrect spatial extents</i></b>
</figcaption>
</figure>
<p>To avert this problem, we need to find the new affine transformation of the cropped image. Luckily rasterio has a <code>window_transform</code> method on the dataset reader which can compute the new transformation from the old one by passing the bounds of the layer. The <code>window_transform</code> function can either take a 2D N-D array indexer in the form of a tuple <code>((row_start, row_stop), (col_start, col_stop))</code> or provide offset as written in its <a href="https://rasterio.readthedocs.io/en/latest/api/rasterio.windows.html">documentation</a></p>
<section id="cropped-raster-and-vector-overlay" class="level2">
<h2 class="anchored" data-anchor-id="cropped-raster-and-vector-overlay">Cropped raster and vector overlay</h2>
<p>The above method returns the new affine transformation, which can be passed to the <code>show</code> function for the numpy array through the <code>transform</code> parameter. We also change the read method instead of slicing the array by window parameter to maintain uniformity</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load raster</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> src:</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># window =  (((row_start), (row_stop)), ((col_start), (col_stop)))</span></span>
<span id="cb4-4">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb4-5">    f, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb4-6">    show(img, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>src.window_transform(((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))), ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb4-7"></span>
<span id="cb4-8">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_layer.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<figure class="figure">
<p><img src="https://i.imgur.com/uwVnq4z.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.3 - Overlay of cropped raster and vector. Notice the updated spatial extent </i></b>
</figcaption>
</figure>
<p>The <code>show</code> method is helpful for plotting rasters or even RGB images for that matter. One of the differences with matplotlib’s plotting is the order of axes. <code>show</code> expects it the bands to be the last axis while matplotlib, the first. It can also plot 4-band image, which is almost always the for satellite images. While there is an <code>extent</code> paramter in matplotlib’s plotting function, <code>show</code> function is much tidier and straight-forward to implement cropped raster and overlay vector layer on it.</p>


</section>

 ]]></description>
  <category>Remote Sensing</category>
  <category>Python</category>
  <guid>https://amanbagrecha.github.io/posts/2021-09-19-overlay-cropped-raster-with-vector-layer/</guid>
  <pubDate>Sat, 18 Sep 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>SMAP Time Series</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-09-08-smap-time-series/</link>
  <description><![CDATA[ 




<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Farmers in parts of India still rely on groundwater for irrigation. For them to help understand the present condition of their farm, NASA’s Soil Moisture Active Passive (<strong>SMAP</strong>) satellite data could fill a significant void.</p>
<p>The mission collects the kind of local data agricultural and water managers worldwide need.</p>
<p>The main output of this data set is <strong>surface soil moisture</strong> (SSM)(representing approximately the top 5 cm of the soil column on average, given in cm3 /cm3 ) presented on the global 36 km EASE-Grid 2.0. While there are other measurements, we are only restricting ourselves to SSM</p>
<p>The SSM product has three main levels. L1, L2, and the latest being L3. SMAP uses a radiometer to detect microwave signals and process to obtain soil moisture. It initially had radar onboard but failed in 2015. Although the product is primarily available in 36 km resolution, with the help of Sentinel-1 Radar product, we now have access to 9 km resolution daily global product as well post 2016.</p>
<p>We are going to work with a 36 km product since a time-series can be computationally intensive to download.</p>
<p>One such product is <strong>L3_SM_P</strong>, a daily global product, which is an abbreviation of L3 soil moisture 36 km resolution.</p>
<p>We choose Bengaluru as our area of interest and perform the following three steps in sequence</p>
<ul>
<li><p>Download the SMAP L3 data for the latest one month ( <strong>August 2021</strong> here).</p></li>
<li><p>Extraction of the soil moisture values from SMAP L3 data over Lat, Lon of Bengaluru in python.</p></li>
<li><p>Plot the time series plot for the extracted soil moisture values for the latest one month.</p></li>
</ul>
<p>To download the SMAP L3 data, we head over to https://nsidc.org/data/SPL3SMP/versions/7 and select a time-period ( in our case for the entire month of August 2021) under the download tab. We then click on the download script button as a python file.</p>
<figure class="figure">
<p><img src="https://i.imgur.com/aoKJnay.jpg" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.1 -Downloading python script for the month of August from NSIDC</i></b>
</figcaption>
</figure>
<p>As can be seen in the picture, we have a download size of 980 mb once we run the python script. The next step would be to download the actual files and extract soil moisture value for the selected lat long. One thing to note is, since the product has a resolution of 36 km and that the entire pixel represents one value, we have to couple together a set of pixels around Bengaluru since the entire region does not overlay in one pixel size.</p>
<p>We would be using colaboratory in this entire process since it allows for smooth use of the command line within the notebook itself.</p>
<section id="run-the-downloaded-script.-it-will-ask-you-for-your-earth-data-credentials-username-and-password" class="level3">
<h3 class="anchored" data-anchor-id="run-the-downloaded-script.-it-will-ask-you-for-your-earth-data-credentials-username-and-password">Run the downloaded script. It will ask you for your earth data credentials (username and password)</h3>
<p>We move the downloaded files to data directory and delete any associated files that comes along with it.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download data: Enter credentials for earth data</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>download_SPL3.py</span>
<span id="cb1-3"> </span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move files to data dir</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L3_SM_P</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h5 data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L3_SM_P</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>.h5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-8"> </span></code></pre></div>
<p>Next, get the lat long for EASE grid 2.0. Since we have to locate Bengaluru (study area) and SMAP uses a specific grid system, we download these files.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>nsidc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>smap_python_notebooks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>notebooks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>EASE2_M36km.lats<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.964</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">x406x1</span>.double</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>nsidc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>smap_python_notebooks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>notebooks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>EASE2_M36km.lons<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.964</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">x406x1</span>.double</span></code></pre></div>
</section>
<section id="extract-soil-moisture" class="level3">
<h3 class="anchored" data-anchor-id="extract-soil-moisture">Extract soil moisture</h3>
<p>We define a python class since there are two half-orbit passes (ascending and descending pass) and we could later combine them easily.</p>
<p>We create a <code>read_SML3P</code> method which reads the hdf5 files using the h5py library as an array and removes noisy elements as defined by the user guide. The filename contains the date of acquisition and we extract that.</p>
<p>We next define the <code>generate_time_series</code> method to subset the array to our area of interest (Bengaluru) while also taking the mean since there might be more than 1 pixel intersecting the AOI and then return a dataframe with date and the value of Soil Moisture.</p>
<p>There are some additional method we define to run and initialise the class which can be read from <a href="https://github.com/amanbagrecha/smap_time_series_analysis/blob/main/main.py">here</a></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SML3PSoilMoist:</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  get soil moisture from L3 SMAP SCA-V algo for the specified date</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  ----------</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  soil_moisture: numpy.array</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  flag_id:  [str] Quality flag of retrieved soil moisture using SCA-V</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  var_id: [str] can be replaced with scva algorithm which is the default (baseline)</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  group_id: [str] retrive soil moisture for Ascending or descending pass</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  file_list: [list] of downloaded files; File path of a SMAP L3 HDF5 file</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  -------</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns Soil moisture values and time period as a DataFrame</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb3-14"> </span>
<span id="cb3-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, file_list : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'list'</span>, orbit_pass: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'str'</span>):</span>
<span id="cb3-16">    </span>
<span id="cb3-17">    ...</span>
<span id="cb3-18"> </span>
<span id="cb3-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""read files and return 3d array and time"""</span></span>
<span id="cb3-21">    ...</span>
<span id="cb3-22"> </span>
<span id="cb3-23"> </span>
<span id="cb3-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_SML3P(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, filepath):</span>
<span id="cb3-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' This function extracts soil moisture from SMAP L3 P HDF5 file.</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # refer to https://nsidc.org/support/faq/how-do-i-interpret-surface-and-quality-flag-information-level-2-and-3-passive-soil</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span>    </span>
<span id="cb3-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> h5py.File(filepath, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-30"> </span>
<span id="cb3-31">        group_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.group_id </span>
<span id="cb3-32">        flag_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flag_id</span>
<span id="cb3-33">        var_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.var_id</span>
<span id="cb3-34"> </span>
<span id="cb3-35">        flag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[group_id][flag_id][:,:]</span>
<span id="cb3-36"> </span>
<span id="cb3-37">        soil_moisture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[group_id][var_id][:,:]        </span>
<span id="cb3-38">        soil_moisture[soil_moisture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999.0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.nan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-39">        soil_moisture[(flag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.nan <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to nan expect for 0 and even bits</span></span>
<span id="cb3-40"> </span>
<span id="cb3-41">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(filepath)</span>
<span id="cb3-42">        </span>
<span id="cb3-43">        yyyymmdd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filename.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb3-44">        yyyy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(yyyymmdd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> mm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(yyyymmdd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(yyyymmdd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])</span>
<span id="cb3-45">        date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dt.datetime(yyyy,mm,dd)</span>
<span id="cb3-46"> </span>
<span id="cb3-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> soil_moisture, date</span>
<span id="cb3-48"> </span>
<span id="cb3-49">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_time_series(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, bbox: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'list -&gt; [N_lat, S_lat, W_lon, E_lon]'</span>):</span>
<span id="cb3-50">    </span>
<span id="cb3-51">    N_lat, S_lat, W_lon, E_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb3-52">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N_lat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>(lats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>S_lat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>(lons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>W_lon)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>(lons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>E_lon)</span>
<span id="cb3-53">    sm_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.time_period])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-54">    </span>
<span id="cb3-55">    sm_data_3d, times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run_()</span>
<span id="cb3-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.time_period):</span>
<span id="cb3-57">        sm_2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm_data_3d[:,:,i]</span>
<span id="cb3-58">        </span>
<span id="cb3-59">        sm_time[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nanmean(sm_2d[subset])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-60"> </span>
<span id="cb3-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span> : times, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orbit_pass: sm_time })</span></code></pre></div>
<p>Lastly, we plot the dataframe using pandas method <code>plot</code> and the result is to be shown to the world.</p>
<p><img src="https://i.imgur.com/PngGsda.png" class="img-fluid"></p>
<p>This blog helps demonstrates use of SMAP product to generate time series for an entire month of August. You can read more about the specification of the product <a href="https://nsidc.org/support/faq/how-do-i-interpret-surface-and-quality-flag-information-level-2-and-3-passive-soil">here</a></p>
<blockquote class="blockquote">
<p>Data courtesy: O’Neill et al.&nbsp;doi: https://doi.org/10.5067/HH4SZ2PXSP6A. [31st August, 2021].</p>
</blockquote>


</section>
</section>

 ]]></description>
  <category>Remote Sensing</category>
  <guid>https://amanbagrecha.github.io/posts/2021-09-08-smap-time-series/</guid>
  <pubDate>Tue, 07 Sep 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Contour Maps in QGIS</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-07-24-contour-maps-in-qgis/</link>
  <description><![CDATA[ 




<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Most of the time, we are equipped with a discrete set of sample points (of temperature, rainfall etc) and are tasked with generating a continuous surface. This is where spatial interpolation comes into picture. The objective is to estimate the most probable value at an unknown location with a set of known points within the extent of sample points.</p>
<p>Methods to perform spatial interpolation: 1. TIN: Triangular Irregular Network forms contiguous, non-overlapping triangles by dividing the geographic space on set of sample points</p>
<ol start="2" type="1">
<li><p>IDW: Inverse Distance Weighted interpolation method estimates cell values by weighted average of sample data. The closer the point, the more weight assigned. We can fix the radius of influence or the total sample points to weigh for cell value.</p></li>
<li><p>Spline: Also called french curves. It uses a mathematical function that minimizes overall surface curvature, resulting in a smooth surface that passes through the input points.</p></li>
<li><p>Kriging: A group of geostatistical techniques to interpolate the value of a random field at an unobserved location from observations of its value at a nearby location. It is implemented using semi-variogram.</p></li>
</ol>
<p>In this blog, we create surface plots for Rainfall Correction Factors, which is indicative of how much the climate impacts a hydraulic structure based on the return period it is designed for.</p>
<p>These RCF are useful for hydraulic structures such as dams, storm water drains, and spillways. These RCF are derived from Global Climate Models (GCMs) which models future scenarios. Not considering these factors can lead to reduced life time of the structure.</p>
<p>We calculate the RCF for each point for a grid of lat,lon around the indian subcontinent. These RCF are as a result of intensive computational simulations run in matlab which is out of scope for this blog.</p>
<section id="load-points-in-qgis" class="level3">
<h3 class="anchored" data-anchor-id="load-points-in-qgis">1. Load points in QGIS</h3>
<p>Our data is in the csv format with each column of the RP_ family representing the return period the Rainfall Correction Factor is estimated for.</p>
<figure class="figure">
<img src="https://i.imgur.com/fZpYAK9.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.1 -sample data points with key location and return period of RCF</i></b>
</figcaption>
</figure>
<p>This file can be imported into qgis from the layers panel and adding a delimited text layer. Once the layer is added, we export as shapefile so as to ease the process of automating the workflow which comes in handy later at the end of the blog.</p>
<figure class="figure">
<img src="https://i.imgur.com/MvHcCZx.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.2 -Add the csv file using Add delimited text layer</i></b>
</figcaption>
</figure>
<p>We load the sampled points and add an India boundary as the base vector to later clip the features to our area of Interest.</p>
<figure class="figure">
<img src="https://i.imgur.com/IuoE9pb.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.3 -Points equally spaced around the Indian state. Each point represent a RCF value</i></b>
</figcaption>
</figure>
</section>
<section id="generate-raster-from-points-using-tin-interpolation" class="level3">
<h3 class="anchored" data-anchor-id="generate-raster-from-points-using-tin-interpolation">2. Generate Raster from points using TIN interpolation</h3>
<p>For demonstration let us take an example to run through the entire process of generating surface raster and styling which can be later automated using python in qgis.</p>
<p>We use these sampled locations of points to generate a surface using TIN Interpolation readily available as a toolbox in qgis. The input parameter for the vector layer is our shapefile of points while the interpolation attribute is going to be the RP_ family of columns.</p>
<figure class="figure">
<img src="https://i.imgur.com/nzE5Vj7.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.4 -TIN interpolation in QGIS</i></b>
</figcaption>
</figure>
<p>The output of the interpolation with pixel size of 0.01 is shown below. The extent was set to the boundary of Indian state.</p>
<figure class="figure">
<img src="https://i.imgur.com/1HAjqQ4.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.5 -Output surface raster with 0.01 pixel size</i></b>
</figcaption>
</figure>
<p>We can go a step further and derive contours using the <code>contour</code> toolbox provided in qgis.</p>
</section>
<section id="generate-contours-from-raster-to-style-the-layer" class="level3">
<h3 class="anchored" data-anchor-id="generate-contours-from-raster-to-style-the-layer">3. Generate Contours from raster to style the layer</h3>
<figure class="figure">
<img src="https://i.imgur.com/SOKxUmC.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.6 -Generate contours from the surface raster</i></b>
</figcaption>
</figure>
<figure class="figure">
<img src="https://i.imgur.com/ExfM0MM.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.7 -Output as contour lines with 0.1 as interval</i></b>
</figcaption>
</figure>
<p>A better way to get the contour lines is by changing the symbology of the raster to contours and providing an interval. This exact method will be employed later in this post.</p>
</section>
<section id="automating-the-process" class="level3">
<h3 class="anchored" data-anchor-id="automating-the-process">Automating the process</h3>
<p>So far we have looked into creating surface raster for an individual return period. But we have several other return periods and we do not want to repeat ourselves. Thus we write a tiny python code to automate this workflow.</p>
<p>We derive the RCFs for return period of 5year, 10year, 25year, 50year</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify the output location for saving the files</span></span>
<span id="cb1-2">OUTPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">gcm_qgis</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop over different return periods from the shapefile</span></span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2y'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'10y'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'25y'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'50y'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify the shapefile containing the RCP values</span></span>
<span id="cb1-8">    MYFILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">gcm_qgis</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">RCP_avg.shp|layername=RCP_avg::~::0::~::</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">::~::0'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(i)</span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run interpolation and do not save the output permanently</span></span>
<span id="cb1-11">    RESULTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processing.run(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qgis:tininterpolation"</span>, </span>
<span id="cb1-12">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'INTERPOLATION_DATA'</span>: MYFILE,</span>
<span id="cb1-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'METHOD'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EXTENT'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'68.205600900,97.395561000,6.755997100,37.084107000 [EPSG:4326]'</span>,</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PIXEL_SIZE'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb1-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OUTPUT'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TEMPORARY_OUTPUT'</span>})</span>
<span id="cb1-17"></span>
<span id="cb1-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clip the temporary output from prev step and save the files.</span></span>
<span id="cb1-19">    processing.runAndLoadResults(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gdal:cliprasterbymasklayer"</span>, </span>
<span id="cb1-20">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'INPUT'</span>:RESULTS[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OUTPUT'</span>],</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MASK'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:/Users/91911/Downloads/india-osm.geojson.txt|layername=india-osm.geojson'</span>,</span>
<span id="cb1-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOURCE_CRS'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET_CRS'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NODATA'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ALPHA_BAND'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb1-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CROP_TO_CUTLINE'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KEEP_RESOLUTION'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SET_RESOLUTION'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_RESOLUTION'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y_RESOLUTION'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MULTITHREADING'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPTIONS'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,</span>
<span id="cb1-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATA_TYPE'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EXTRA'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,</span>
<span id="cb1-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OUTPUT'</span>:os.path.join(OUTPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RCP_avg_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.tif'</span>)})</span>
<span id="cb1-31">    iface.messageBar().pushMessage(</span>
<span id="cb1-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Success:'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output file written at '</span>, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Qgis.Success)</span></code></pre></div>
<p>Our output would save and display the contour files with RCP_avg_{return_period} where return period ranges from [2,5,10,25,50]</p>
<p>The code first fetches our shapefile, which is used to 1. create temporary TIN interpolation rasters 3. clipped to india boundary using <code>clip raster by mask layer</code></p>
<p>Once we have the rasters for each return period, we style the raster using singleband pseudocolor in <code>Equal Interval</code> mode ranging from 1.0 - 1.8 in steps of 0.1</p>
<p>We make a copy of the raster layer and place it above it, giving it a contour style at an interval of 0.1</p>
<p>We copy each return period and set the styling to be of contour as seen in the figure. This allows for a better visual representation of the regions with same the values.</p>
<figure class="figure">
<img src="https://i.imgur.com/tz0DP0k.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.8 -Styling the copy of surface raster</i></b>
</figcaption>
</figure>
<p>The final output can be seen in the below figure.</p>
<figure class="figure">
<img src="https://i.imgur.com/fiX9RA9.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.9 -Final output with contours overlaid on top of surface themself</i></b>
</figcaption>
</figure>
</section>
</section>
<section id="final-comments" class="level2">
<h2 class="anchored" data-anchor-id="final-comments">Final comments</h2>
<p>We looked at various spatial interpolation technique and automated workflow to derive spatially interpolated surface raster.</p>
<p>Sources:</p>
<ol type="a">
<li><p><a href="https://www.intechopen.com/chapters/52704">Comparison of Spatial Interpolation Techniques Using Visualization and Quantitative Assessment</a></p></li>
<li><p><a href="https://docs.qgis.org/3.16/en/docs/gentle_gis_introduction/spatial_analysis_interpolation.html">Spatial Analysis QGIS</a></p></li>
</ol>


</section>

 ]]></description>
  <category>QGIS</category>
  <guid>https://amanbagrecha.github.io/posts/2021-07-24-contour-maps-in-qgis/</guid>
  <pubDate>Fri, 23 Jul 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Query Geoserver Layer using openlayers</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-07-16-geoserver-query-builder/</link>
  <description><![CDATA[ 




<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This blog demonstrates how to display and query all geoserver layers or from a workspace using geoserver REST API. CQL (Common Query Language) filter provided by geoserver is used to query the layer.</p>
<p>We create a full stack application, setting up the backend using django and the frontend using vanilla js. The application will later be deployed on aws ec2 instance.</p>
</section>
<section id="setting-up-the-backend-django" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-backend-django">Setting up the backend (Django)</h2>
<section id="create-virtual-environment-and-activate-it" class="level3">
<h3 class="anchored" data-anchor-id="create-virtual-environment-and-activate-it">Create virtual environment and activate it</h3>
<pre class="shell"><code>conda create --name djangoEnv
conda activate djangoEnv</code></pre>
</section>
<section id="start-a-new-project-and-create-app" class="level3">
<h3 class="anchored" data-anchor-id="start-a-new-project-and-create-app">Start a new project and create app</h3>
<pre class="shell"><code>django-admin startproject DOGP
python manage.py startapp gisapp</code></pre>
</section>
<section id="setup-the-database" class="level3">
<h3 class="anchored" data-anchor-id="setup-the-database">Setup the database</h3>
<p>We set up postgresql for this exercise. Create a new database and add a postgis extension from it. For more info on how to set up the extension, click here.</p>
<p>Once the database is set up on the localhost server, we make changes to the settings.py module in our application.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change database</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">DATABASES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>: {</span>
<span id="cb3-5">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENGINE'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'django.contrib.gis.db.backends.postgis'</span>,</span>
<span id="cb3-6">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NAME'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DOGP'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our new database name</span></span>
<span id="cb3-7">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'USER'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'postgres'</span>,</span>
<span id="cb3-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PASSWORD'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1234'</span>,</span>
<span id="cb3-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HOST'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'127.0.0.1'</span>,</span>
<span id="cb3-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PORT'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5432'</span>,</span>
<span id="cb3-11">    },</span>
<span id="cb3-12">}</span></code></pre></div>
</section>
<section id="add-installed-apps" class="level3">
<h3 class="anchored" data-anchor-id="add-installed-apps">Add installed apps</h3>
<pre><code>
INSTALLED_APPS = [
    'gisapp.apps.GisappConfig',
    'django.contrib.gis',
]
</code></pre>
<p>There are other setups such as setting up login page and authentication, creating media url root and setting up the url which we are not going to deal with in this blog post.</p>
<p>Once the setup is done, we run migrations to reflect those changes in the admin page.</p>
<p>On running <code>python manage.py runserver</code> you should see this page.</p>
<figure class="figure">
<img src="https://i.imgur.com/zSSpoqV.png" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.1 -Page indicating successful installation of Django</i></b>
</figcaption>
</figure>
<hr>
<p>Our focus will be on the frontend, but the full code can be accessed from <a href="https://github.com/amanbagrecha/openlayers-geoserver-query">here</a>.</p>
<p>For querying and displaying layers from geoserver, we first need geoserver installed and running. For more info on how to do that can be found <a href="https://docs.geoserver.org/master/en/user/installation/win_binary.html">here</a>.</p>
<p>In the following steps we setup our basemap layer to be ESRI World Imagery and define an empty vector layer to store the result of query.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// map setup</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> maplayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tile</span>({</span>
<span id="cb5-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">XYZ</span>({</span>
<span id="cb5-4">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attributions</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Powered by Esri'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attributionsCollapsible</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">url</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">maxZoom</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span></span>
<span id="cb5-8">    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">zIndex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-10">  })</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> view <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">View</span>({</span>
<span id="cb5-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">projection</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EPSG:4326'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">center</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">103.32989447589996</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.18118547387081</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">zoom</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-16">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-17">  </span>
<span id="cb5-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Map</span>({</span>
<span id="cb5-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [ maplayer]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">target</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'map'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">view</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-22">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// define empty vector layer to store query result later</span></span>
<span id="cb5-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> SearchvectorLayerSource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector</span>({</span>
<span id="cb5-26">      </span>
<span id="cb5-27">    })</span>
<span id="cb5-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> SearchvectorLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector</span>({</span>
<span id="cb5-29">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>SearchvectorLayerSource</span>
<span id="cb5-30">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-31">  map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLayer</span>(SearchvectorLayer)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-32"></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// define headers for authentication and login</span></span>
<span id="cb5-34">MyHeaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Content-Type'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Access-Control-Allow-Credentials'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Access-Control-Allow-Origin'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accept'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-37">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Authorization'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Basic '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">btoa</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'admin:geoserver'</span>)}</span></code></pre></div>
<p>To access all layers from a particular workspace, the api end point to do that is as follows</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// https://docs.geoserver.org/latest/en/api/#1.0.0/layers.yaml</span></span>
<span id="cb6-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/workspaces/</span>{workspaceName}<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/layers</span></span></code></pre></div>
<p>To see this in action, we display all layers from the <code>sf</code> workspace, provided in geoserver by default.</p>
<figure class="figure">
<p><img src="https://i.imgur.com/sSjlZkU.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.2 -Geoserver layers from sf workspace</i></b>
</figcaption>
</figure>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layerList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// array to store all the layer info</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> loginInfo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geoserver"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// username and password for geoserver</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> geoserverURL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geoserver_ip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geoserver_port  </span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// make ajax call to access the sf layer</span></span>
<span id="cb7-7">$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ajax</span>({</span>
<span id="cb7-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">url</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> geoserverURL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/geoserver/rest/workspaces/sf/layers/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GET'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dataType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'json'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">contentType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"application/json"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">beforeSend</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(xhr) {</span>
<span id="cb7-13">         xhr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setRequestHeader</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Authorization"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Basic "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">btoa</span>(loginInfo[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loginInfo[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data){</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb7-17">            layerList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>([data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer</span>[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer</span>[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">href</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-18">        }</span>
<span id="cb7-19"></span>
<span id="cb7-20">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">async</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span></span>
<span id="cb7-22">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>The output of this ajax call returns us a <code>layerList</code> array containing all the layer name and the url associated with it of size (:, 2)</p>
<p>This layer can then be displayed on the frontend by looping over the array and inserting into the div element.</p>
<figure class="figure">
<img src="https://i.imgur.com/ZDctdje.jpg" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.3 -The layers of workspace <code>sf</code> displayed on the map with some styles applied to it </i></b>
</figcaption>
</figure>
<hr>
<p>The next step after displaying all the layers of the workspace is to load the features of the layer on selecting a particular layer.</p>
<p>When the layer is ticked we send a request to geoserver to load the features of that layer and add to the map. If the layer is then unticked, we do the opposite and remove the layer from map.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb8-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toggleLayer</span>(input) {</span>
<span id="cb8-2">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">checked</span>) {</span>
<span id="cb8-3">          wmsLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Image</span>({</span>
<span id="cb8-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ImageWMS</span>({</span>
<span id="cb8-5">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">url</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> geoserver_ip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>geoserver_port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/geoserver/wms"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-6">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">imageLoadFunction</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> tileLoader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-7">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">params</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">LAYERS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-8">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">serverType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geoserver"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-9">            })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-10">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-11">          })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-12"></span>
<span id="cb8-13">        map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLayer</span>(wmsLayer)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-14">                    </span>
<span id="cb8-15">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb8-16">          map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getLayers</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb8-17">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span>) {</span>
<span id="cb8-18">                 map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">removeLayer</span>(layer)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-19">             }</span>
<span id="cb8-20">         })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-21">      }</span>
<span id="cb8-22">  }</span></code></pre></div>
<figure class="figure">
<img src="https://i.imgur.com/Wgy2YV5.jpg" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.4 -Displaying layer on map</i></b>
</figcaption>
</figure>
</section>
<section id="query-layer" class="level3">
<h3 class="anchored" data-anchor-id="query-layer">Query layer</h3>
<p>We start with the querying the layer by their attributes. We load all the attributes (as columns) and display as dropdown. We use <code>wfs</code> service and <code>DescribeFeatureType</code> request to load the attributes.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb9-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadprops</span>(layername) {</span>
<span id="cb9-2">      selectedLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(</span>
<span id="cb9-4">        geoserver_ip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>geoserver_port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/geoserver/wfs?service=wfs&amp;version=2.0.0&amp;request=DescribeFeatureType&amp;typeNames="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-5">          layername <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-6">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;outputFormat=application/json"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-7">        {</span>
<span id="cb9-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">method</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GET"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">headers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> MyHeaders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-10">        }</span>
<span id="cb9-11">      )</span>
<span id="cb9-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> (response) {</span>
<span id="cb9-13">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-14">        })</span>
<span id="cb9-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> (json) {</span>
<span id="cb9-16">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> allprops <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">featureTypes</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-17">          <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> ColumnnamesSelect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columnnames"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-18">              ColumnnamesSelect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb9-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> allprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>){</span>
<span id="cb9-20">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (allprops[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'the_geom'</span>) {</span>
<span id="cb9-21">                    ColumnnamesSelect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span></span>
<span id="cb9-22">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;option value="'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-23">                      allprops[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-24">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"&gt; '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-25">                      allprops[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-26">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/option&gt;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-27">                }</span>
<span id="cb9-28">  </span>
<span id="cb9-29">            }</span>
<span id="cb9-30">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-31">  }</span></code></pre></div>
<p>Upto this point we have the layer and its features we want to search for. To query the layer we make a fetch call to ows service protocol and pass in the values of feature and the layer we want to query for.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb10-1">CQL_filter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = '"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> query_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-2">  query_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geoserver_ip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>geoserver_port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/geoserver/sf/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> selectedLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;CQL_FILTER="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>    CQL_filter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;outputFormat=application%2Fjson"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-3">            </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_search_call</span>(query_url)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">catch</span>((error) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb10-5">  CQL_filter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%20"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ILIKE"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%20%27%25"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> query_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%25%27"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-6">    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>We define a fetch_search_call function which makes a request to ows service and returns a geojson. We can parse the geojson and display it on the map.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb11-1">  </span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_search_call</span>(query_url){</span>
<span id="cb11-3"></span>
<span id="cb11-4">    fetch_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(query_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {</span>
<span id="cb11-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">method</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GET"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">headers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> MyHeaders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-7">      })</span>
<span id="cb11-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> (response) {</span>
<span id="cb11-9">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-10">        })</span>
<span id="cb11-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> (json) {</span>
<span id="cb11-12">        </span>
<span id="cb11-13">                SearchvectorLayerSource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clear</span>()</span>
<span id="cb11-14">                SearchvectorLayerSource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addFeatures</span>(</span>
<span id="cb11-15">              <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> ol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GeoJSON</span>({</span>
<span id="cb11-16">              })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readFeatures</span>(json)</span>
<span id="cb11-17">              )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-18">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">features</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>){</span>
<span id="cb11-19">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#searchModal'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modal</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'toggle'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-20">              }</span>
<span id="cb11-21"></span>
<span id="cb11-22">            SearchvectorLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'search_polygon_layer'</span>)</span>
<span id="cb11-23">            map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getView</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(SearchvectorLayerSource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getExtent</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">duration</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1590</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getSize</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">padding</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">maxZoom</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-24">            </span>
<span id="cb11-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fetch_result</span>
<span id="cb11-26">  }</span></code></pre></div>
<p>The above function queries a feature and adds it to the map as a new layer. If the search is successful, we are zoomed into that location and only the feature queried gets displayed. If the fetch call could not find the match it returns an error which is caught by <code>catch</code> and displays the error to the client.</p>
<figure class="figure">
<img src="https://i.imgur.com/syqvzq0.gif" class="img-fluid figure-img">
<figcaption align="center">
<b><i>Fig.5 -Displaying Queried layer by attribute value</i></b>
</figcaption>
</figure>
<p>This completes the blog on how to query layer and display on the map. Visit the <a href="https://github.com/amanbagrecha/openlayers-geoserver-query">github page</a> to find the working application.</p>


</section>
</section>

 ]]></description>
  <category>Geoserver</category>
  <category>OpenLayers</category>
  <guid>https://amanbagrecha.github.io/posts/2021-07-16-geoserver-query-builder/</guid>
  <pubDate>Thu, 15 Jul 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Validating LULC classes in QGIS</title>
  <dc:creator>Aman Bagrecha</dc:creator>
  <link>https://amanbagrecha.github.io/posts/2021-06-09-validating-lulc-classes-in-qgis/</link>
  <description><![CDATA[ 




<section id="the-problem-statement" class="level2">
<h2 class="anchored" data-anchor-id="the-problem-statement"><strong>The problem statement</strong></h2>
<p>Any land-use land cover classification needs to be validated with ground-truth data to measure the accuracy. A key single-valued statistic to determine the effectiveness of classification is Cohen’s kappa. This validation metric has been fairly widely used for unbalanced classification as well which expresses a level of agreement between two annotators on a classification problem.</p>
<p>The objective of this quality assessment was to validate the land cover map performed on June, 2020 sentinel-2 imagery by k-means classification algorithm, thus providing a statistical measure of overall class predictions. The validation was done using an independent set of sample points (~500) generated randomly following stratified random sampling design, to capture the variance within the class</p>
<p>After running the tool, the sample points were manually assigned to the ground-truth class. The ground-truth dataset was taken to be Bing-satellite imagery as a proxy for field data. Each sample point was labelled by visual inspection on the ground-truth dataset.</p>
</section>
<section id="step-1-classify-image" class="level2">
<h2 class="anchored" data-anchor-id="step-1-classify-image"><strong>Step 1: Classify Image</strong></h2>
<ul>
<li>Load raster Image</li>
<li>Open <code>K-means clustering for grids</code> under SAGA tools. Select the raster Image as <code>grid</code> and in this case we specify 4 classes</li>
</ul>
<figure class="figure">
<p><img src="https://i.imgur.com/xdx5Tsn.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.1 -K-means clustering on sentinel-2 Image</i></b>
</figcaption>
</figure>
<ul>
<li>Click <code>Run</code></li>
</ul>
<blockquote class="blockquote">
<p>At this stage we have unsupervised k-means clustering output ready <code>(Fig.2)</code>.</p>
</blockquote>
<figure class="figure">
<p><img src="https://i.imgur.com/eW0cOXE.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.2 -classification of RR Nagar, Bengaluru. Classes- Forest, Urban, water, Bareland</i></b>
</figcaption>
</figure>
<hr>
</section>
<section id="step-2-convert-to-polygon-vector-format" class="level2">
<h2 class="anchored" data-anchor-id="step-2-convert-to-polygon-vector-format"><strong>Step 2: Convert to polygon (vector format)</strong></h2>
<ul>
<li>Select <code>Polygonize (Raster to Vector)</code> tool under <code>GDAL</code>-&gt;<code>Raster Conversion</code></li>
<li>Select the classified image as input. Leave everything else as default. The output would be a <code>Vectorised</code> scratch layer.</li>
</ul>
<figure class="figure">
<p><img src="https://i.imgur.com/36nk2tF.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.3 -Convert Raster to vector</i></b>
</figcaption>
</figure>
<blockquote class="blockquote">
<p>Note the name of the field (<code>DN</code> here). This will be used later.</p>
</blockquote>
<ul>
<li>Fix geometries (this step is important here to avoid any error in further steps) <code>Vector Geometry</code>-&gt;<code>Fix Geometry</code></li>
</ul>
<figure class="figure">
<p><img src="https://i.imgur.com/gG9gBIc.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.4 -Fixing topology issues with <code>Fix Geometry</code> Toolbox</i></b>
</figcaption>
</figure>
<hr>
</section>
<section id="step-3-dissolve-the-layer-on-dn-field" class="level2">
<h2 class="anchored" data-anchor-id="step-3-dissolve-the-layer-on-dn-field"><strong>Step 3: Dissolve the layer on DN field</strong></h2>
<p>In this step we dissolve the layer based on the <code>DN</code> value. This will ensure that each polygon can be evaluated based on the land class type which is needed for stratified random sampling.</p>
<figure class="figure">
<p><img src="https://i.imgur.com/gm1ihfT.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.5 -<code>Dissolve</code> toolbox to dissolve polygon on <code> DN </code> value</i></b>
</figcaption>
</figure>
<blockquote class="blockquote">
<p>Make sure to select dissolve field as <code>DN</code></p>
</blockquote>
<hr>
</section>
<section id="step-4-create-stratified-random-samples" class="level2">
<h2 class="anchored" data-anchor-id="step-4-create-stratified-random-samples"><strong>Step 4: Create stratified random samples</strong></h2>
<p>Go to <code>Vector-&gt;research tools-&gt; Random Points inside Polygon</code> and set <code>Sampling Strategy</code> = <code>Points Density</code> and <code>Point count or density</code> = <code>0.001</code>.</p>
<p>Note: The value <code>0.001</code> signify <code>1</code> point for <code>1/0.001</code> m2 of area, given that the units is meters.</p>
<figure class="figure">
<p><img src="https://i.imgur.com/1LB6R5L.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.6 - One sample point is generated for each 1000 m2 of area</i></b>
</figcaption>
</figure>
<hr>
</section>
<section id="step-5-extract-raster-values-to-sample-layer" class="level2">
<h2 class="anchored" data-anchor-id="step-5-extract-raster-values-to-sample-layer"><strong>Step 5: Extract raster values to sample layer</strong></h2>
<p>We extract the raster value, which is essentially the land cover class for the classified image. We use <code>Sample Raster Values</code> function here (<code>Fig.7</code>). The input layer is the random points we generated earlier and the the raster layer is the classified image. The output adds a new column to the sample points layer with the prediction class of the land-cover (<code>Fig.8</code>).</p>
<figure class="figure">
<p><img src="https://i.imgur.com/s2RXNOZ.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.7 -Running <code>Sample Raster Value</code> to extract Raster values for the input points</i></b>
</figcaption>
</figure>
<figure class="figure">
<p><img src="https://i.imgur.com/GG9wgNK.png" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.8 -The corresponding Attribute Table with Predicted Class <code> PREDICTED_1</code> for each feature</i></b>
</figcaption>
</figure>
<hr>
</section>
<section id="step-6-ground-truth-labelling-using-bing-maps" class="level2">
<h2 class="anchored" data-anchor-id="step-6-ground-truth-labelling-using-bing-maps"><strong>Step 6: Ground Truth Labelling using Bing maps</strong></h2>
<p>At this stage we are ready to validate the image using Bing maps as ground truth. We turn on the edit mode and create new field named Actual class. THen we visually inspect the class on the map and note the land-cover class. Once we inspect all the sample points we can use cohens Kappa statistics to determine the validation result. Alternatively, simply calculating the accuracy would also suffice the need.</p>
</section>
<section id="step-7-add-other-field-to-the-attribute-table-with-reclassification" class="level2">
<h2 class="anchored" data-anchor-id="step-7-add-other-field-to-the-attribute-table-with-reclassification"><strong>Step 7: Add other field to the attribute table with reclassification</strong></h2>
<p>We can use the <code>Field Calculator</code> to generate verbose text for each label in our feature class and display labels for the prediction.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- in field calculator to increase verbosity</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> PREDICTED_1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Urban'</span> </span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> PREDICTED_1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bareland'</span></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> PREDICTED_1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Forest'</span></span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> PREDICTED_1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Urban'</span></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span></span></code></pre></div>
<figure class="figure">
<p><img src="https://i.imgur.com/3CBAK6X.jpg" class="img-fluid figure-img"></p>
<figcaption align="center">
<b><i>Fig.9 -Predicted classes (foreground) vs ground truth (background)</i></b>
</figcaption>
</figure>
<p>With this we come to end of the post. Now, validation accuracy can be reported for k-means classification.</p>


</section>

 ]]></description>
  <category>QGIS</category>
  <category>machine learning</category>
  <guid>https://amanbagrecha.github.io/posts/2021-06-09-validating-lulc-classes-in-qgis/</guid>
  <pubDate>Tue, 08 Jun 2021 18:30:00 GMT</pubDate>
</item>
</channel>
</rss>
